package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/woocoos/knockout/ent"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/graph/generated"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	return r.Client.NoderEx(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	return r.Client.NodersEx(ctx, ids)
}

// Apps is the resolver for the apps field.默认查询是公共的应用(org_id=0)
func (r *queryResolver) Apps(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppOrder, where *ent.AppWhereInput) (*ent.AppConnection, error) {
	return r.Client.App.Query().Where(app.CreatedOrgID(0)).Paginate(ctx, after, first, before, last,
		ent.WithAppOrder(orderBy),
		ent.WithAppFilter(where.Filter))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrganizationOrder, where *ent.OrganizationWhereInput) (*ent.OrganizationConnection, error) {
	return r.Client.Organization.Query().Paginate(ctx, after, first, before, last,
		ent.WithOrganizationOrder(orderBy),
		ent.WithOrganizationFilter(where.Filter))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.Client.User.Query().Paginate(ctx, after, first, before, last,
		ent.WithUserOrder(orderBy), ent.WithUserFilter(where.Filter))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// CreateUserInput returns generated.CreateUserInputResolver implementation.
func (r *Resolver) CreateUserInput() generated.CreateUserInputResolver {
	return &createUserInputResolver{r}
}

type queryResolver struct{ *Resolver }
type createUserInputResolver struct{ *Resolver }
