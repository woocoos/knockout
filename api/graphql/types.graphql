input EnableDirectoryInput {
    """域名"""
    domain: String!
    name: String!
}

extend input CreateUserInput {
    loginProfile: CreateUserLoginProfileInput
    """如指定密码则填入,否则由系统自动生成密码"""
    password: CreateUserPasswordInput
}

input AssignRoleUserInput {
    """授权类型为角色或用户组的ID"""
    orgRoleID: ID!
    userID: ID!
    """生效开始时间"""
    startAt: Time
    """生效结束时间"""
    endAt: Time
}

"""树操作类型"""
enum TreeAction {
    """作为子节点"""
    child
    """上移"""
    up
    """下移"""
    down
}

enum PolicyEffect {
    allow
    deny
}
type PolicyRule {
    effect: PolicyEffect!
    actions: [String!]
    resources: [String!]
    conditions: [String!]
}

input PolicyRuleInput {
    effect: PolicyEffect!
    actions: [String!]
    resources: [String!]
    conditions: [String!]
}

input GrantInput {
    principal: GID!
    orgScope: ID!
    policyID: ID!
}

type Mfa{
    secret: String!
    account: String!
}

extend type OrgRole {
    """是否系统角色"""
    isAppRole: Boolean!
}

extend type OrgPolicy {
    """是否授权role"""
    isGrantRole(roleID:ID!): Boolean!
    """是否授权user"""
    isGrantUser(userID:ID!): Boolean!
}

extend type User {
    """是否分配role"""
    isAssignOrgRole(orgRoleID:ID!): Boolean!
    """是否允许解除角色授权"""
    isAllowRevokeRole(orgRoleID:ID!):Boolean!
}

extend type Org {
    """是否允许解除应用策略"""
    isAllowRevokeAppPolicy(appPolicyID:ID!):Boolean!
}

extend type OrgRole {
    """是否分配给user"""
    isGrantUser(userID:ID!): Boolean!
}

extend type AppPolicy {
    """是否授权role"""
    isGrantAppRole(appRoleID:ID!): Boolean!
}

extend type Permission {
    """是否允许撤销：根用户授权及系统角色授权不允许撤销"""
    isAllowRevoke:Boolean!
}