// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"github.com/woocoos/knockout/api/graphql/model"
	"github.com/woocoos/knockout/ent"
	"github.com/woocoos/knockout/ent/userloginprofile"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AppPolicy() AppPolicyResolver
	Mutation() MutationResolver
	Org() OrgResolver
	OrgPolicy() OrgPolicyResolver
	OrgRole() OrgRoleResolver
	Permission() PermissionResolver
	Query() QueryResolver
	User() UserResolver
	CreateUserInput() CreateUserInputResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	App struct {
		Actions              func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppActionOrder, where *ent.AppActionWhereInput) int
		AppKey               func(childComplexity int) int
		AppSecret            func(childComplexity int) int
		Code                 func(childComplexity int) int
		Comments             func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Dicts                func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppDictOrder, where *ent.AppDictWhereInput) int
		ID                   func(childComplexity int) int
		Kind                 func(childComplexity int) int
		Logo                 func(childComplexity int) int
		Menus                func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppMenuOrder, where *ent.AppMenuWhereInput) int
		Name                 func(childComplexity int) int
		Orgs                 func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrgOrder, where *ent.OrgWhereInput) int
		Policies             func(childComplexity int) int
		RedirectURI          func(childComplexity int) int
		RefreshTokenValidity func(childComplexity int) int
		Resources            func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppResOrder, where *ent.AppResWhereInput) int
		Roles                func(childComplexity int) int
		Scopes               func(childComplexity int) int
		Status               func(childComplexity int) int
		TokenValidity        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	AppAction struct {
		App       func(childComplexity int) int
		AppID     func(childComplexity int) int
		Comments  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Kind      func(childComplexity int) int
		Menus     func(childComplexity int) int
		Method    func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	AppActionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppActionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppDict struct {
		App       func(childComplexity int) int
		AppID     func(childComplexity int) int
		Code      func(childComplexity int) int
		Comments  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Items     func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	AppDictConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppDictEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppDictItem struct {
		Code        func(childComplexity int) int
		Comments    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Dict        func(childComplexity int) int
		DictID      func(childComplexity int) int
		DisplaySort func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Org         func(childComplexity int) int
		OrgID       func(childComplexity int) int
		RefCode     func(childComplexity int) int
		Status      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	AppEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppMenu struct {
		Action      func(childComplexity int) int
		ActionID    func(childComplexity int) int
		App         func(childComplexity int) int
		AppID       func(childComplexity int) int
		Comments    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		DisplaySort func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Kind        func(childComplexity int) int
		Name        func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Route       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	AppMenuConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppMenuEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppPolicy struct {
		App            func(childComplexity int) int
		AppID          func(childComplexity int) int
		AutoGrant      func(childComplexity int) int
		Comments       func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		IsGrantAppRole func(childComplexity int, appRoleID int) int
		Name           func(childComplexity int) int
		Roles          func(childComplexity int) int
		Rules          func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	AppPolicyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppPolicyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppRes struct {
		App        func(childComplexity int) int
		AppID      func(childComplexity int) int
		ArnPattern func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		TypeName   func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
	}

	AppResConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppResEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AppRole struct {
		App       func(childComplexity int) int
		AppID     func(childComplexity int) int
		AutoGrant func(childComplexity int) int
		Comments  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		Editable  func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Policies  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
	}

	FileIdentity struct {
		AccessKeyID     func(childComplexity int) int
		Comments        func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DurationSeconds func(childComplexity int) int
		FileSourceID    func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDefault       func(childComplexity int) int
		Org             func(childComplexity int) int
		Policy          func(childComplexity int) int
		RoleArn         func(childComplexity int) int
		Source          func(childComplexity int) int
		TenantID        func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UpdatedBy       func(childComplexity int) int
	}

	FileIdentityConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileIdentityEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FileIdentityForApp struct {
		AccessKeyID     func(childComplexity int) int
		AccessKeySecret func(childComplexity int) int
		DurationSeconds func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDefault       func(childComplexity int) int
		Policy          func(childComplexity int) int
		RoleArn         func(childComplexity int) int
		Source          func(childComplexity int) int
		TenantID        func(childComplexity int) int
	}

	FileSource struct {
		Bucket            func(childComplexity int) int
		BucketURL         func(childComplexity int) int
		Comments          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		Endpoint          func(childComplexity int) int
		EndpointImmutable func(childComplexity int) int
		ID                func(childComplexity int) int
		Kind              func(childComplexity int) int
		Region            func(childComplexity int) int
		StsEndpoint       func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
	}

	FileSourceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	FileSourceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Mfa struct {
		Account func(childComplexity int) int
		Secret  func(childComplexity int) int
	}

	Mutation struct {
		AllotOrganizationUser       func(childComplexity int, input ent.CreateOrgUserInput) int
		AssignAppRolePolicy         func(childComplexity int, appID int, roleID int, policyIDs []int) int
		AssignOrganizationApp       func(childComplexity int, orgID int, appID int) int
		AssignOrganizationAppPolicy func(childComplexity int, orgID int, appPolicyID int) int
		AssignOrganizationAppRole   func(childComplexity int, orgID int, appRoleID int) int
		AssignRoleUser              func(childComplexity int, input model.AssignRoleUserInput) int
		BindUserIdentity            func(childComplexity int, input ent.CreateUserIdentityInput) int
		ChangePassword              func(childComplexity int, oldPwd string, newPwd string) int
		CreateApp                   func(childComplexity int, input ent.CreateAppInput) int
		CreateAppActions            func(childComplexity int, appID int, input []*ent.CreateAppActionInput) int
		CreateAppDict               func(childComplexity int, appID int, input ent.CreateAppDictInput) int
		CreateAppDictItem           func(childComplexity int, dictID int, input ent.CreateAppDictItemInput) int
		CreateAppMenus              func(childComplexity int, appID int, input []*ent.CreateAppMenuInput) int
		CreateAppPolicy             func(childComplexity int, appID int, input ent.CreateAppPolicyInput) int
		CreateAppRole               func(childComplexity int, appID int, input ent.CreateAppRoleInput) int
		CreateFileIdentity          func(childComplexity int, input ent.CreateFileIdentityInput) int
		CreateFileSource            func(childComplexity int, input ent.CreateFileSourceInput) int
		CreateOauthClient           func(childComplexity int, input ent.CreateOauthClientInput) int
		CreateOrganization          func(childComplexity int, input ent.CreateOrgInput) int
		CreateOrganizationAccount   func(childComplexity int, rootOrgID int, input ent.CreateUserInput) int
		CreateOrganizationPolicy    func(childComplexity int, input ent.CreateOrgPolicyInput) int
		CreateOrganizationUser      func(childComplexity int, rootOrgID int, input ent.CreateUserInput) int
		CreateRole                  func(childComplexity int, input ent.CreateOrgRoleInput) int
		CreateRoot                  func(childComplexity int, input ent.CreateOrgInput) int
		DeleteApp                   func(childComplexity int, appID int) int
		DeleteAppAction             func(childComplexity int, actionID int) int
		DeleteAppDict               func(childComplexity int, dictID int) int
		DeleteAppDictItem           func(childComplexity int, itemID int) int
		DeleteAppMenu               func(childComplexity int, menuID int) int
		DeleteAppPolicy             func(childComplexity int, policyID int) int
		DeleteAppRole               func(childComplexity int, roleID int) int
		DeleteFileIdentity          func(childComplexity int, id int) int
		DeleteFileSource            func(childComplexity int, fsID int) int
		DeleteOauthClient           func(childComplexity int, id int) int
		DeleteOrganization          func(childComplexity int, orgID int) int
		DeleteOrganizationPolicy    func(childComplexity int, orgPolicyID int) int
		DeleteRole                  func(childComplexity int, roleID int) int
		DeleteUser                  func(childComplexity int, userID int) int
		DeleteUserIdentity          func(childComplexity int, id int) int
		DisableMfa                  func(childComplexity int, userID int) int
		DisableOauthClient          func(childComplexity int, id int) int
		EnableDirectory             func(childComplexity int, input model.EnableDirectoryInput) int
		EnableMfa                   func(childComplexity int, userID int) int
		EnableOauthClient           func(childComplexity int, id int) int
		Grant                       func(childComplexity int, input ent.CreatePermissionInput) int
		MoveAppDictItem             func(childComplexity int, sourceID int, targetID int, action model.TreeAction) int
		MoveAppMenu                 func(childComplexity int, sourceID int, targetID int, action model.TreeAction) int
		MoveOrganization            func(childComplexity int, sourceID int, targetID int, action model.TreeAction) int
		RecoverOrgUser              func(childComplexity int, userID int, userInput ent.UpdateUserInput, pwdKind userloginprofile.SetKind, pwdInput *ent.CreateUserPasswordInput) int
		RemoveOrganizationUser      func(childComplexity int, orgID int, userID int) int
		ResetUserPasswordByEmail    func(childComplexity int, userID int) int
		Revoke                      func(childComplexity int, orgID int, permissionID int) int
		RevokeAppRolePolicy         func(childComplexity int, appID int, roleID int, policyIDs []int) int
		RevokeOrganizationApp       func(childComplexity int, orgID int, appID int) int
		RevokeOrganizationAppPolicy func(childComplexity int, orgID int, appPolicyID int) int
		RevokeOrganizationAppRole   func(childComplexity int, orgID int, appRoleID int) int
		RevokeRoleUser              func(childComplexity int, roleID int, userID int) int
		SaveOrgUserPreference       func(childComplexity int, input model.OrgUserPreferenceInput) int
		SendMFAToUserByEmail        func(childComplexity int, userID int) int
		SetDefaultFileIdentity      func(childComplexity int, identityID int, orgID int) int
		UpdateApp                   func(childComplexity int, appID int, input ent.UpdateAppInput) int
		UpdateAppAction             func(childComplexity int, actionID int, input ent.UpdateAppActionInput) int
		UpdateAppDict               func(childComplexity int, dictID int, input ent.UpdateAppDictInput) int
		UpdateAppDictItem           func(childComplexity int, itemID int, input ent.UpdateAppDictItemInput) int
		UpdateAppMenu               func(childComplexity int, menuID int, input ent.UpdateAppMenuInput) int
		UpdateAppPolicy             func(childComplexity int, policyID int, input ent.UpdateAppPolicyInput) int
		UpdateAppRes                func(childComplexity int, appResID int, input ent.UpdateAppResInput) int
		UpdateAppRole               func(childComplexity int, roleID int, input ent.UpdateAppRoleInput) int
		UpdateFileIdentity          func(childComplexity int, id int, input ent.UpdateFileIdentityInput) int
		UpdateFileSource            func(childComplexity int, fsID int, input ent.UpdateFileSourceInput) int
		UpdateLoginProfile          func(childComplexity int, userID int, input ent.UpdateUserLoginProfileInput) int
		UpdateOrganization          func(childComplexity int, orgID int, input ent.UpdateOrgInput) int
		UpdateOrganizationPolicy    func(childComplexity int, orgPolicyID int, input ent.UpdateOrgPolicyInput) int
		UpdatePermission            func(childComplexity int, permissionID int, input ent.UpdatePermissionInput) int
		UpdateRole                  func(childComplexity int, roleID int, input ent.UpdateOrgRoleInput) int
		UpdateUser                  func(childComplexity int, userID int, input ent.UpdateUserInput) int
	}

	OauthClient struct {
		ClientID     func(childComplexity int) int
		ClientSecret func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		GrantTypes   func(childComplexity int) int
		ID           func(childComplexity int) int
		LastAuthAt   func(childComplexity int) int
		Name         func(childComplexity int) int
		Status       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		User         func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	Org struct {
		Apps                   func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppOrder, where *ent.AppWhereInput) int
		Children               func(childComplexity int) int
		Code                   func(childComplexity int) int
		CountryCode            func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		DisplaySort            func(childComplexity int) int
		Domain                 func(childComplexity int) int
		FileIdentities         func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsAllowRevokeAppPolicy func(childComplexity int, appPolicyID int) int
		Kind                   func(childComplexity int) int
		Name                   func(childComplexity int) int
		Owner                  func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		Parent                 func(childComplexity int) int
		ParentID               func(childComplexity int) int
		Path                   func(childComplexity int) int
		Permissions            func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.PermissionOrder, where *ent.PermissionWhereInput) int
		Policies               func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrgPolicyOrder, where *ent.OrgPolicyWhereInput) int
		Profile                func(childComplexity int) int
		Status                 func(childComplexity int) int
		Timezone               func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		UpdatedBy              func(childComplexity int) int
		Users                  func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
	}

	OrgConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgFileIdentity struct {
		Comments     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		FileSourceID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDefault    func(childComplexity int) int
		Source       func(childComplexity int) int
		TenantID     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	OrgPolicy struct {
		AppPolicyID func(childComplexity int) int
		Comments    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		ID          func(childComplexity int) int
		IsGrantRole func(childComplexity int, roleID int) int
		IsGrantUser func(childComplexity int, userID int) int
		Name        func(childComplexity int) int
		Org         func(childComplexity int) int
		OrgID       func(childComplexity int) int
		Permissions func(childComplexity int) int
		Rules       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	OrgPolicyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgPolicyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgRole struct {
		Comments    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		ID          func(childComplexity int) int
		IsAppRole   func(childComplexity int) int
		IsGrantUser func(childComplexity int, userID int) int
		Kind        func(childComplexity int) int
		Name        func(childComplexity int) int
		OrgID       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UpdatedBy   func(childComplexity int) int
	}

	OrgRoleConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgRoleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrgUserPreference struct {
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		ID           func(childComplexity int) int
		MenuFavorite func(childComplexity int) int
		MenuRecent   func(childComplexity int) int
		Org          func(childComplexity int) int
		OrgID        func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		User         func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	OrgUserPreferenceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrgUserPreferenceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Permission struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		EndAt         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsAllowRevoke func(childComplexity int) int
		Org           func(childComplexity int) int
		OrgID         func(childComplexity int) int
		OrgPolicy     func(childComplexity int) int
		OrgPolicyID   func(childComplexity int) int
		PrincipalKind func(childComplexity int) int
		Role          func(childComplexity int) int
		RoleID        func(childComplexity int) int
		StartAt       func(childComplexity int) int
		Status        func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		User          func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	PermissionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PermissionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PolicyRule struct {
		Actions    func(childComplexity int) int
		Conditions func(childComplexity int) int
		Effect     func(childComplexity int) int
		Resources  func(childComplexity int) int
	}

	Query struct {
		AppAccess                   func(childComplexity int, appCode string) int
		AppDictByRefCode            func(childComplexity int, refCodes []string) int
		AppDictItemByRefCode        func(childComplexity int, refCode string) int
		AppDicts                    func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppDictOrder, where *ent.AppDictWhereInput) int
		AppPolicyAssignedToOrgs     func(childComplexity int, policyID int, where *ent.OrgWhereInput) int
		AppResources                func(childComplexity int, appID int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppResOrder, where *ent.AppResWhereInput) int
		AppRoleAssignedToOrgs       func(childComplexity int, roleID int, where *ent.OrgWhereInput) int
		Apps                        func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppOrder, where *ent.AppWhereInput) int
		CheckPermission             func(childComplexity int, permission string) int
		FileIdentities              func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.FileIdentityOrder, where *ent.FileIdentityWhereInput) int
		FileIdentitiesForApp        func(childComplexity int, where *ent.FileIdentityWhereInput) int
		FileIdentitiesForOrg        func(childComplexity int) int
		FileIdentityAccessKeySecret func(childComplexity int, id int) int
		FileSources                 func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.FileSourceOrder, where *ent.FileSourceWhereInput) int
		GlobalID                    func(childComplexity int, typeArg string, id int) int
		Node                        func(childComplexity int, id string) int
		Nodes                       func(childComplexity int, ids []string) int
		OrgAppActions               func(childComplexity int, appCode string) int
		OrgAppResources             func(childComplexity int, appID int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AppResOrder, where *ent.AppResWhereInput) int
		OrgGroups                   func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrgRoleOrder, where *ent.OrgRoleWhereInput) int
		OrgPolicyReferences         func(childComplexity int, policyID int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.PermissionOrder, where *ent.PermissionWhereInput) int
		OrgRecycleUsers             func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
		OrgRoleUsers                func(childComplexity int, roleID int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
		OrgRoles                    func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrgRoleOrder, where *ent.OrgRoleWhereInput) int
		OrgUserPreference           func(childComplexity int) int
		Organizations               func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrgOrder, where *ent.OrgWhereInput) int
		UserApps                    func(childComplexity int) int
		UserExtendGroupPolicies     func(childComplexity int, userID int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.PermissionOrder, where *ent.PermissionWhereInput) int
		UserGroups                  func(childComplexity int, userID int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OrgRoleOrder, where *ent.OrgRoleWhereInput) int
		UserMenus                   func(childComplexity int, appCode string) int
		UserPermissions             func(childComplexity int, where *ent.AppActionWhereInput) int
		UserRootOrgs                func(childComplexity int) int
		Users                       func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) int
	}

	User struct {
		Avatar            func(childComplexity int) int
		Comments          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		CreationType      func(childComplexity int) int
		DeletedAt         func(childComplexity int) int
		Devices           func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		Email             func(childComplexity int) int
		ID                func(childComplexity int) int
		Identities        func(childComplexity int) int
		IsAllowRevokeRole func(childComplexity int, orgRoleID int) int
		IsAssignOrgRole   func(childComplexity int, orgRoleID int) int
		LoginProfile      func(childComplexity int) int
		Mobile            func(childComplexity int) int
		OauthClients      func(childComplexity int) int
		Permissions       func(childComplexity int, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.PermissionOrder, where *ent.PermissionWhereInput) int
		PrincipalName     func(childComplexity int) int
		RegisterIP        func(childComplexity int) int
		Status            func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UpdatedBy         func(childComplexity int) int
		UserType          func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserDevice struct {
		AppVersion    func(childComplexity int) int
		Comments      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeviceModel   func(childComplexity int) int
		DeviceName    func(childComplexity int) int
		DeviceUID     func(childComplexity int) int
		ID            func(childComplexity int) int
		Status        func(childComplexity int) int
		SystemName    func(childComplexity int) int
		SystemVersion func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		User          func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserIdentity struct {
		Code       func(childComplexity int) int
		CodeExtend func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		ID         func(childComplexity int) int
		Kind       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		UpdatedBy  func(childComplexity int) int
		User       func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	UserLoginProfile struct {
		CanLogin      func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ID            func(childComplexity int) int
		LastLoginAt   func(childComplexity int) int
		LastLoginIP   func(childComplexity int) int
		MfaEnabled    func(childComplexity int) int
		MfaStatus     func(childComplexity int) int
		PasswordReset func(childComplexity int) int
		SetKind       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		User          func(childComplexity int) int
		UserID        func(childComplexity int) int
		VerifyDevice  func(childComplexity int) int
	}

	UserPassword struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Scene     func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UpdatedBy func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "App.actions":
		if e.complexity.App.Actions == nil {
			break
		}

		args, err := ec.field_App_actions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Actions(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppActionOrder), args["where"].(*ent.AppActionWhereInput)), true

	case "App.appKey":
		if e.complexity.App.AppKey == nil {
			break
		}

		return e.complexity.App.AppKey(childComplexity), true

	case "App.appSecret":
		if e.complexity.App.AppSecret == nil {
			break
		}

		return e.complexity.App.AppSecret(childComplexity), true

	case "App.code":
		if e.complexity.App.Code == nil {
			break
		}

		return e.complexity.App.Code(childComplexity), true

	case "App.comments":
		if e.complexity.App.Comments == nil {
			break
		}

		return e.complexity.App.Comments(childComplexity), true

	case "App.createdAt":
		if e.complexity.App.CreatedAt == nil {
			break
		}

		return e.complexity.App.CreatedAt(childComplexity), true

	case "App.createdBy":
		if e.complexity.App.CreatedBy == nil {
			break
		}

		return e.complexity.App.CreatedBy(childComplexity), true

	case "App.dicts":
		if e.complexity.App.Dicts == nil {
			break
		}

		args, err := ec.field_App_dicts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Dicts(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppDictOrder), args["where"].(*ent.AppDictWhereInput)), true

	case "App.id":
		if e.complexity.App.ID == nil {
			break
		}

		return e.complexity.App.ID(childComplexity), true

	case "App.kind":
		if e.complexity.App.Kind == nil {
			break
		}

		return e.complexity.App.Kind(childComplexity), true

	case "App.logo":
		if e.complexity.App.Logo == nil {
			break
		}

		return e.complexity.App.Logo(childComplexity), true

	case "App.menus":
		if e.complexity.App.Menus == nil {
			break
		}

		args, err := ec.field_App_menus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Menus(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppMenuOrder), args["where"].(*ent.AppMenuWhereInput)), true

	case "App.name":
		if e.complexity.App.Name == nil {
			break
		}

		return e.complexity.App.Name(childComplexity), true

	case "App.orgs":
		if e.complexity.App.Orgs == nil {
			break
		}

		args, err := ec.field_App_orgs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Orgs(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.OrgOrder), args["where"].(*ent.OrgWhereInput)), true

	case "App.policies":
		if e.complexity.App.Policies == nil {
			break
		}

		return e.complexity.App.Policies(childComplexity), true

	case "App.redirectURI":
		if e.complexity.App.RedirectURI == nil {
			break
		}

		return e.complexity.App.RedirectURI(childComplexity), true

	case "App.refreshTokenValidity":
		if e.complexity.App.RefreshTokenValidity == nil {
			break
		}

		return e.complexity.App.RefreshTokenValidity(childComplexity), true

	case "App.resources":
		if e.complexity.App.Resources == nil {
			break
		}

		args, err := ec.field_App_resources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Resources(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppResOrder), args["where"].(*ent.AppResWhereInput)), true

	case "App.roles":
		if e.complexity.App.Roles == nil {
			break
		}

		return e.complexity.App.Roles(childComplexity), true

	case "App.scopes":
		if e.complexity.App.Scopes == nil {
			break
		}

		return e.complexity.App.Scopes(childComplexity), true

	case "App.status":
		if e.complexity.App.Status == nil {
			break
		}

		return e.complexity.App.Status(childComplexity), true

	case "App.tokenValidity":
		if e.complexity.App.TokenValidity == nil {
			break
		}

		return e.complexity.App.TokenValidity(childComplexity), true

	case "App.updatedAt":
		if e.complexity.App.UpdatedAt == nil {
			break
		}

		return e.complexity.App.UpdatedAt(childComplexity), true

	case "App.updatedBy":
		if e.complexity.App.UpdatedBy == nil {
			break
		}

		return e.complexity.App.UpdatedBy(childComplexity), true

	case "AppAction.app":
		if e.complexity.AppAction.App == nil {
			break
		}

		return e.complexity.AppAction.App(childComplexity), true

	case "AppAction.appID":
		if e.complexity.AppAction.AppID == nil {
			break
		}

		return e.complexity.AppAction.AppID(childComplexity), true

	case "AppAction.comments":
		if e.complexity.AppAction.Comments == nil {
			break
		}

		return e.complexity.AppAction.Comments(childComplexity), true

	case "AppAction.createdAt":
		if e.complexity.AppAction.CreatedAt == nil {
			break
		}

		return e.complexity.AppAction.CreatedAt(childComplexity), true

	case "AppAction.createdBy":
		if e.complexity.AppAction.CreatedBy == nil {
			break
		}

		return e.complexity.AppAction.CreatedBy(childComplexity), true

	case "AppAction.id":
		if e.complexity.AppAction.ID == nil {
			break
		}

		return e.complexity.AppAction.ID(childComplexity), true

	case "AppAction.kind":
		if e.complexity.AppAction.Kind == nil {
			break
		}

		return e.complexity.AppAction.Kind(childComplexity), true

	case "AppAction.menus":
		if e.complexity.AppAction.Menus == nil {
			break
		}

		return e.complexity.AppAction.Menus(childComplexity), true

	case "AppAction.method":
		if e.complexity.AppAction.Method == nil {
			break
		}

		return e.complexity.AppAction.Method(childComplexity), true

	case "AppAction.name":
		if e.complexity.AppAction.Name == nil {
			break
		}

		return e.complexity.AppAction.Name(childComplexity), true

	case "AppAction.updatedAt":
		if e.complexity.AppAction.UpdatedAt == nil {
			break
		}

		return e.complexity.AppAction.UpdatedAt(childComplexity), true

	case "AppAction.updatedBy":
		if e.complexity.AppAction.UpdatedBy == nil {
			break
		}

		return e.complexity.AppAction.UpdatedBy(childComplexity), true

	case "AppActionConnection.edges":
		if e.complexity.AppActionConnection.Edges == nil {
			break
		}

		return e.complexity.AppActionConnection.Edges(childComplexity), true

	case "AppActionConnection.pageInfo":
		if e.complexity.AppActionConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppActionConnection.PageInfo(childComplexity), true

	case "AppActionConnection.totalCount":
		if e.complexity.AppActionConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppActionConnection.TotalCount(childComplexity), true

	case "AppActionEdge.cursor":
		if e.complexity.AppActionEdge.Cursor == nil {
			break
		}

		return e.complexity.AppActionEdge.Cursor(childComplexity), true

	case "AppActionEdge.node":
		if e.complexity.AppActionEdge.Node == nil {
			break
		}

		return e.complexity.AppActionEdge.Node(childComplexity), true

	case "AppConnection.edges":
		if e.complexity.AppConnection.Edges == nil {
			break
		}

		return e.complexity.AppConnection.Edges(childComplexity), true

	case "AppConnection.pageInfo":
		if e.complexity.AppConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppConnection.PageInfo(childComplexity), true

	case "AppConnection.totalCount":
		if e.complexity.AppConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppConnection.TotalCount(childComplexity), true

	case "AppDict.app":
		if e.complexity.AppDict.App == nil {
			break
		}

		return e.complexity.AppDict.App(childComplexity), true

	case "AppDict.appID":
		if e.complexity.AppDict.AppID == nil {
			break
		}

		return e.complexity.AppDict.AppID(childComplexity), true

	case "AppDict.code":
		if e.complexity.AppDict.Code == nil {
			break
		}

		return e.complexity.AppDict.Code(childComplexity), true

	case "AppDict.comments":
		if e.complexity.AppDict.Comments == nil {
			break
		}

		return e.complexity.AppDict.Comments(childComplexity), true

	case "AppDict.createdAt":
		if e.complexity.AppDict.CreatedAt == nil {
			break
		}

		return e.complexity.AppDict.CreatedAt(childComplexity), true

	case "AppDict.createdBy":
		if e.complexity.AppDict.CreatedBy == nil {
			break
		}

		return e.complexity.AppDict.CreatedBy(childComplexity), true

	case "AppDict.id":
		if e.complexity.AppDict.ID == nil {
			break
		}

		return e.complexity.AppDict.ID(childComplexity), true

	case "AppDict.items":
		if e.complexity.AppDict.Items == nil {
			break
		}

		return e.complexity.AppDict.Items(childComplexity), true

	case "AppDict.name":
		if e.complexity.AppDict.Name == nil {
			break
		}

		return e.complexity.AppDict.Name(childComplexity), true

	case "AppDict.updatedAt":
		if e.complexity.AppDict.UpdatedAt == nil {
			break
		}

		return e.complexity.AppDict.UpdatedAt(childComplexity), true

	case "AppDict.updatedBy":
		if e.complexity.AppDict.UpdatedBy == nil {
			break
		}

		return e.complexity.AppDict.UpdatedBy(childComplexity), true

	case "AppDictConnection.edges":
		if e.complexity.AppDictConnection.Edges == nil {
			break
		}

		return e.complexity.AppDictConnection.Edges(childComplexity), true

	case "AppDictConnection.pageInfo":
		if e.complexity.AppDictConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppDictConnection.PageInfo(childComplexity), true

	case "AppDictConnection.totalCount":
		if e.complexity.AppDictConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppDictConnection.TotalCount(childComplexity), true

	case "AppDictEdge.cursor":
		if e.complexity.AppDictEdge.Cursor == nil {
			break
		}

		return e.complexity.AppDictEdge.Cursor(childComplexity), true

	case "AppDictEdge.node":
		if e.complexity.AppDictEdge.Node == nil {
			break
		}

		return e.complexity.AppDictEdge.Node(childComplexity), true

	case "AppDictItem.code":
		if e.complexity.AppDictItem.Code == nil {
			break
		}

		return e.complexity.AppDictItem.Code(childComplexity), true

	case "AppDictItem.comments":
		if e.complexity.AppDictItem.Comments == nil {
			break
		}

		return e.complexity.AppDictItem.Comments(childComplexity), true

	case "AppDictItem.createdAt":
		if e.complexity.AppDictItem.CreatedAt == nil {
			break
		}

		return e.complexity.AppDictItem.CreatedAt(childComplexity), true

	case "AppDictItem.createdBy":
		if e.complexity.AppDictItem.CreatedBy == nil {
			break
		}

		return e.complexity.AppDictItem.CreatedBy(childComplexity), true

	case "AppDictItem.dict":
		if e.complexity.AppDictItem.Dict == nil {
			break
		}

		return e.complexity.AppDictItem.Dict(childComplexity), true

	case "AppDictItem.dictID":
		if e.complexity.AppDictItem.DictID == nil {
			break
		}

		return e.complexity.AppDictItem.DictID(childComplexity), true

	case "AppDictItem.displaySort":
		if e.complexity.AppDictItem.DisplaySort == nil {
			break
		}

		return e.complexity.AppDictItem.DisplaySort(childComplexity), true

	case "AppDictItem.id":
		if e.complexity.AppDictItem.ID == nil {
			break
		}

		return e.complexity.AppDictItem.ID(childComplexity), true

	case "AppDictItem.name":
		if e.complexity.AppDictItem.Name == nil {
			break
		}

		return e.complexity.AppDictItem.Name(childComplexity), true

	case "AppDictItem.org":
		if e.complexity.AppDictItem.Org == nil {
			break
		}

		return e.complexity.AppDictItem.Org(childComplexity), true

	case "AppDictItem.orgID":
		if e.complexity.AppDictItem.OrgID == nil {
			break
		}

		return e.complexity.AppDictItem.OrgID(childComplexity), true

	case "AppDictItem.refCode":
		if e.complexity.AppDictItem.RefCode == nil {
			break
		}

		return e.complexity.AppDictItem.RefCode(childComplexity), true

	case "AppDictItem.status":
		if e.complexity.AppDictItem.Status == nil {
			break
		}

		return e.complexity.AppDictItem.Status(childComplexity), true

	case "AppDictItem.updatedAt":
		if e.complexity.AppDictItem.UpdatedAt == nil {
			break
		}

		return e.complexity.AppDictItem.UpdatedAt(childComplexity), true

	case "AppDictItem.updatedBy":
		if e.complexity.AppDictItem.UpdatedBy == nil {
			break
		}

		return e.complexity.AppDictItem.UpdatedBy(childComplexity), true

	case "AppEdge.cursor":
		if e.complexity.AppEdge.Cursor == nil {
			break
		}

		return e.complexity.AppEdge.Cursor(childComplexity), true

	case "AppEdge.node":
		if e.complexity.AppEdge.Node == nil {
			break
		}

		return e.complexity.AppEdge.Node(childComplexity), true

	case "AppMenu.action":
		if e.complexity.AppMenu.Action == nil {
			break
		}

		return e.complexity.AppMenu.Action(childComplexity), true

	case "AppMenu.actionID":
		if e.complexity.AppMenu.ActionID == nil {
			break
		}

		return e.complexity.AppMenu.ActionID(childComplexity), true

	case "AppMenu.app":
		if e.complexity.AppMenu.App == nil {
			break
		}

		return e.complexity.AppMenu.App(childComplexity), true

	case "AppMenu.appID":
		if e.complexity.AppMenu.AppID == nil {
			break
		}

		return e.complexity.AppMenu.AppID(childComplexity), true

	case "AppMenu.comments":
		if e.complexity.AppMenu.Comments == nil {
			break
		}

		return e.complexity.AppMenu.Comments(childComplexity), true

	case "AppMenu.createdAt":
		if e.complexity.AppMenu.CreatedAt == nil {
			break
		}

		return e.complexity.AppMenu.CreatedAt(childComplexity), true

	case "AppMenu.createdBy":
		if e.complexity.AppMenu.CreatedBy == nil {
			break
		}

		return e.complexity.AppMenu.CreatedBy(childComplexity), true

	case "AppMenu.displaySort":
		if e.complexity.AppMenu.DisplaySort == nil {
			break
		}

		return e.complexity.AppMenu.DisplaySort(childComplexity), true

	case "AppMenu.id":
		if e.complexity.AppMenu.ID == nil {
			break
		}

		return e.complexity.AppMenu.ID(childComplexity), true

	case "AppMenu.icon":
		if e.complexity.AppMenu.Icon == nil {
			break
		}

		return e.complexity.AppMenu.Icon(childComplexity), true

	case "AppMenu.kind":
		if e.complexity.AppMenu.Kind == nil {
			break
		}

		return e.complexity.AppMenu.Kind(childComplexity), true

	case "AppMenu.name":
		if e.complexity.AppMenu.Name == nil {
			break
		}

		return e.complexity.AppMenu.Name(childComplexity), true

	case "AppMenu.parentID":
		if e.complexity.AppMenu.ParentID == nil {
			break
		}

		return e.complexity.AppMenu.ParentID(childComplexity), true

	case "AppMenu.route":
		if e.complexity.AppMenu.Route == nil {
			break
		}

		return e.complexity.AppMenu.Route(childComplexity), true

	case "AppMenu.updatedAt":
		if e.complexity.AppMenu.UpdatedAt == nil {
			break
		}

		return e.complexity.AppMenu.UpdatedAt(childComplexity), true

	case "AppMenu.updatedBy":
		if e.complexity.AppMenu.UpdatedBy == nil {
			break
		}

		return e.complexity.AppMenu.UpdatedBy(childComplexity), true

	case "AppMenuConnection.edges":
		if e.complexity.AppMenuConnection.Edges == nil {
			break
		}

		return e.complexity.AppMenuConnection.Edges(childComplexity), true

	case "AppMenuConnection.pageInfo":
		if e.complexity.AppMenuConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppMenuConnection.PageInfo(childComplexity), true

	case "AppMenuConnection.totalCount":
		if e.complexity.AppMenuConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppMenuConnection.TotalCount(childComplexity), true

	case "AppMenuEdge.cursor":
		if e.complexity.AppMenuEdge.Cursor == nil {
			break
		}

		return e.complexity.AppMenuEdge.Cursor(childComplexity), true

	case "AppMenuEdge.node":
		if e.complexity.AppMenuEdge.Node == nil {
			break
		}

		return e.complexity.AppMenuEdge.Node(childComplexity), true

	case "AppPolicy.app":
		if e.complexity.AppPolicy.App == nil {
			break
		}

		return e.complexity.AppPolicy.App(childComplexity), true

	case "AppPolicy.appID":
		if e.complexity.AppPolicy.AppID == nil {
			break
		}

		return e.complexity.AppPolicy.AppID(childComplexity), true

	case "AppPolicy.autoGrant":
		if e.complexity.AppPolicy.AutoGrant == nil {
			break
		}

		return e.complexity.AppPolicy.AutoGrant(childComplexity), true

	case "AppPolicy.comments":
		if e.complexity.AppPolicy.Comments == nil {
			break
		}

		return e.complexity.AppPolicy.Comments(childComplexity), true

	case "AppPolicy.createdAt":
		if e.complexity.AppPolicy.CreatedAt == nil {
			break
		}

		return e.complexity.AppPolicy.CreatedAt(childComplexity), true

	case "AppPolicy.createdBy":
		if e.complexity.AppPolicy.CreatedBy == nil {
			break
		}

		return e.complexity.AppPolicy.CreatedBy(childComplexity), true

	case "AppPolicy.id":
		if e.complexity.AppPolicy.ID == nil {
			break
		}

		return e.complexity.AppPolicy.ID(childComplexity), true

	case "AppPolicy.isGrantAppRole":
		if e.complexity.AppPolicy.IsGrantAppRole == nil {
			break
		}

		args, err := ec.field_AppPolicy_isGrantAppRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AppPolicy.IsGrantAppRole(childComplexity, args["appRoleID"].(int)), true

	case "AppPolicy.name":
		if e.complexity.AppPolicy.Name == nil {
			break
		}

		return e.complexity.AppPolicy.Name(childComplexity), true

	case "AppPolicy.roles":
		if e.complexity.AppPolicy.Roles == nil {
			break
		}

		return e.complexity.AppPolicy.Roles(childComplexity), true

	case "AppPolicy.rules":
		if e.complexity.AppPolicy.Rules == nil {
			break
		}

		return e.complexity.AppPolicy.Rules(childComplexity), true

	case "AppPolicy.status":
		if e.complexity.AppPolicy.Status == nil {
			break
		}

		return e.complexity.AppPolicy.Status(childComplexity), true

	case "AppPolicy.updatedAt":
		if e.complexity.AppPolicy.UpdatedAt == nil {
			break
		}

		return e.complexity.AppPolicy.UpdatedAt(childComplexity), true

	case "AppPolicy.updatedBy":
		if e.complexity.AppPolicy.UpdatedBy == nil {
			break
		}

		return e.complexity.AppPolicy.UpdatedBy(childComplexity), true

	case "AppPolicyConnection.edges":
		if e.complexity.AppPolicyConnection.Edges == nil {
			break
		}

		return e.complexity.AppPolicyConnection.Edges(childComplexity), true

	case "AppPolicyConnection.pageInfo":
		if e.complexity.AppPolicyConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppPolicyConnection.PageInfo(childComplexity), true

	case "AppPolicyConnection.totalCount":
		if e.complexity.AppPolicyConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppPolicyConnection.TotalCount(childComplexity), true

	case "AppPolicyEdge.cursor":
		if e.complexity.AppPolicyEdge.Cursor == nil {
			break
		}

		return e.complexity.AppPolicyEdge.Cursor(childComplexity), true

	case "AppPolicyEdge.node":
		if e.complexity.AppPolicyEdge.Node == nil {
			break
		}

		return e.complexity.AppPolicyEdge.Node(childComplexity), true

	case "AppRes.app":
		if e.complexity.AppRes.App == nil {
			break
		}

		return e.complexity.AppRes.App(childComplexity), true

	case "AppRes.appID":
		if e.complexity.AppRes.AppID == nil {
			break
		}

		return e.complexity.AppRes.AppID(childComplexity), true

	case "AppRes.arnPattern":
		if e.complexity.AppRes.ArnPattern == nil {
			break
		}

		return e.complexity.AppRes.ArnPattern(childComplexity), true

	case "AppRes.createdAt":
		if e.complexity.AppRes.CreatedAt == nil {
			break
		}

		return e.complexity.AppRes.CreatedAt(childComplexity), true

	case "AppRes.createdBy":
		if e.complexity.AppRes.CreatedBy == nil {
			break
		}

		return e.complexity.AppRes.CreatedBy(childComplexity), true

	case "AppRes.id":
		if e.complexity.AppRes.ID == nil {
			break
		}

		return e.complexity.AppRes.ID(childComplexity), true

	case "AppRes.name":
		if e.complexity.AppRes.Name == nil {
			break
		}

		return e.complexity.AppRes.Name(childComplexity), true

	case "AppRes.typeName":
		if e.complexity.AppRes.TypeName == nil {
			break
		}

		return e.complexity.AppRes.TypeName(childComplexity), true

	case "AppRes.updatedAt":
		if e.complexity.AppRes.UpdatedAt == nil {
			break
		}

		return e.complexity.AppRes.UpdatedAt(childComplexity), true

	case "AppRes.updatedBy":
		if e.complexity.AppRes.UpdatedBy == nil {
			break
		}

		return e.complexity.AppRes.UpdatedBy(childComplexity), true

	case "AppResConnection.edges":
		if e.complexity.AppResConnection.Edges == nil {
			break
		}

		return e.complexity.AppResConnection.Edges(childComplexity), true

	case "AppResConnection.pageInfo":
		if e.complexity.AppResConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppResConnection.PageInfo(childComplexity), true

	case "AppResConnection.totalCount":
		if e.complexity.AppResConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppResConnection.TotalCount(childComplexity), true

	case "AppResEdge.cursor":
		if e.complexity.AppResEdge.Cursor == nil {
			break
		}

		return e.complexity.AppResEdge.Cursor(childComplexity), true

	case "AppResEdge.node":
		if e.complexity.AppResEdge.Node == nil {
			break
		}

		return e.complexity.AppResEdge.Node(childComplexity), true

	case "AppRole.app":
		if e.complexity.AppRole.App == nil {
			break
		}

		return e.complexity.AppRole.App(childComplexity), true

	case "AppRole.appID":
		if e.complexity.AppRole.AppID == nil {
			break
		}

		return e.complexity.AppRole.AppID(childComplexity), true

	case "AppRole.autoGrant":
		if e.complexity.AppRole.AutoGrant == nil {
			break
		}

		return e.complexity.AppRole.AutoGrant(childComplexity), true

	case "AppRole.comments":
		if e.complexity.AppRole.Comments == nil {
			break
		}

		return e.complexity.AppRole.Comments(childComplexity), true

	case "AppRole.createdAt":
		if e.complexity.AppRole.CreatedAt == nil {
			break
		}

		return e.complexity.AppRole.CreatedAt(childComplexity), true

	case "AppRole.createdBy":
		if e.complexity.AppRole.CreatedBy == nil {
			break
		}

		return e.complexity.AppRole.CreatedBy(childComplexity), true

	case "AppRole.editable":
		if e.complexity.AppRole.Editable == nil {
			break
		}

		return e.complexity.AppRole.Editable(childComplexity), true

	case "AppRole.id":
		if e.complexity.AppRole.ID == nil {
			break
		}

		return e.complexity.AppRole.ID(childComplexity), true

	case "AppRole.name":
		if e.complexity.AppRole.Name == nil {
			break
		}

		return e.complexity.AppRole.Name(childComplexity), true

	case "AppRole.policies":
		if e.complexity.AppRole.Policies == nil {
			break
		}

		return e.complexity.AppRole.Policies(childComplexity), true

	case "AppRole.updatedAt":
		if e.complexity.AppRole.UpdatedAt == nil {
			break
		}

		return e.complexity.AppRole.UpdatedAt(childComplexity), true

	case "AppRole.updatedBy":
		if e.complexity.AppRole.UpdatedBy == nil {
			break
		}

		return e.complexity.AppRole.UpdatedBy(childComplexity), true

	case "FileIdentity.accessKeyID":
		if e.complexity.FileIdentity.AccessKeyID == nil {
			break
		}

		return e.complexity.FileIdentity.AccessKeyID(childComplexity), true

	case "FileIdentity.comments":
		if e.complexity.FileIdentity.Comments == nil {
			break
		}

		return e.complexity.FileIdentity.Comments(childComplexity), true

	case "FileIdentity.createdAt":
		if e.complexity.FileIdentity.CreatedAt == nil {
			break
		}

		return e.complexity.FileIdentity.CreatedAt(childComplexity), true

	case "FileIdentity.createdBy":
		if e.complexity.FileIdentity.CreatedBy == nil {
			break
		}

		return e.complexity.FileIdentity.CreatedBy(childComplexity), true

	case "FileIdentity.durationSeconds":
		if e.complexity.FileIdentity.DurationSeconds == nil {
			break
		}

		return e.complexity.FileIdentity.DurationSeconds(childComplexity), true

	case "FileIdentity.fileSourceID":
		if e.complexity.FileIdentity.FileSourceID == nil {
			break
		}

		return e.complexity.FileIdentity.FileSourceID(childComplexity), true

	case "FileIdentity.id":
		if e.complexity.FileIdentity.ID == nil {
			break
		}

		return e.complexity.FileIdentity.ID(childComplexity), true

	case "FileIdentity.isDefault":
		if e.complexity.FileIdentity.IsDefault == nil {
			break
		}

		return e.complexity.FileIdentity.IsDefault(childComplexity), true

	case "FileIdentity.org":
		if e.complexity.FileIdentity.Org == nil {
			break
		}

		return e.complexity.FileIdentity.Org(childComplexity), true

	case "FileIdentity.policy":
		if e.complexity.FileIdentity.Policy == nil {
			break
		}

		return e.complexity.FileIdentity.Policy(childComplexity), true

	case "FileIdentity.roleArn":
		if e.complexity.FileIdentity.RoleArn == nil {
			break
		}

		return e.complexity.FileIdentity.RoleArn(childComplexity), true

	case "FileIdentity.source":
		if e.complexity.FileIdentity.Source == nil {
			break
		}

		return e.complexity.FileIdentity.Source(childComplexity), true

	case "FileIdentity.tenantID":
		if e.complexity.FileIdentity.TenantID == nil {
			break
		}

		return e.complexity.FileIdentity.TenantID(childComplexity), true

	case "FileIdentity.updatedAt":
		if e.complexity.FileIdentity.UpdatedAt == nil {
			break
		}

		return e.complexity.FileIdentity.UpdatedAt(childComplexity), true

	case "FileIdentity.updatedBy":
		if e.complexity.FileIdentity.UpdatedBy == nil {
			break
		}

		return e.complexity.FileIdentity.UpdatedBy(childComplexity), true

	case "FileIdentityConnection.edges":
		if e.complexity.FileIdentityConnection.Edges == nil {
			break
		}

		return e.complexity.FileIdentityConnection.Edges(childComplexity), true

	case "FileIdentityConnection.pageInfo":
		if e.complexity.FileIdentityConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileIdentityConnection.PageInfo(childComplexity), true

	case "FileIdentityConnection.totalCount":
		if e.complexity.FileIdentityConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileIdentityConnection.TotalCount(childComplexity), true

	case "FileIdentityEdge.cursor":
		if e.complexity.FileIdentityEdge.Cursor == nil {
			break
		}

		return e.complexity.FileIdentityEdge.Cursor(childComplexity), true

	case "FileIdentityEdge.node":
		if e.complexity.FileIdentityEdge.Node == nil {
			break
		}

		return e.complexity.FileIdentityEdge.Node(childComplexity), true

	case "FileIdentityForApp.accessKeyID":
		if e.complexity.FileIdentityForApp.AccessKeyID == nil {
			break
		}

		return e.complexity.FileIdentityForApp.AccessKeyID(childComplexity), true

	case "FileIdentityForApp.accessKeySecret":
		if e.complexity.FileIdentityForApp.AccessKeySecret == nil {
			break
		}

		return e.complexity.FileIdentityForApp.AccessKeySecret(childComplexity), true

	case "FileIdentityForApp.durationSeconds":
		if e.complexity.FileIdentityForApp.DurationSeconds == nil {
			break
		}

		return e.complexity.FileIdentityForApp.DurationSeconds(childComplexity), true

	case "FileIdentityForApp.id":
		if e.complexity.FileIdentityForApp.ID == nil {
			break
		}

		return e.complexity.FileIdentityForApp.ID(childComplexity), true

	case "FileIdentityForApp.isDefault":
		if e.complexity.FileIdentityForApp.IsDefault == nil {
			break
		}

		return e.complexity.FileIdentityForApp.IsDefault(childComplexity), true

	case "FileIdentityForApp.policy":
		if e.complexity.FileIdentityForApp.Policy == nil {
			break
		}

		return e.complexity.FileIdentityForApp.Policy(childComplexity), true

	case "FileIdentityForApp.roleArn":
		if e.complexity.FileIdentityForApp.RoleArn == nil {
			break
		}

		return e.complexity.FileIdentityForApp.RoleArn(childComplexity), true

	case "FileIdentityForApp.source":
		if e.complexity.FileIdentityForApp.Source == nil {
			break
		}

		return e.complexity.FileIdentityForApp.Source(childComplexity), true

	case "FileIdentityForApp.tenantID":
		if e.complexity.FileIdentityForApp.TenantID == nil {
			break
		}

		return e.complexity.FileIdentityForApp.TenantID(childComplexity), true

	case "FileSource.bucket":
		if e.complexity.FileSource.Bucket == nil {
			break
		}

		return e.complexity.FileSource.Bucket(childComplexity), true

	case "FileSource.bucketURL":
		if e.complexity.FileSource.BucketURL == nil {
			break
		}

		return e.complexity.FileSource.BucketURL(childComplexity), true

	case "FileSource.comments":
		if e.complexity.FileSource.Comments == nil {
			break
		}

		return e.complexity.FileSource.Comments(childComplexity), true

	case "FileSource.createdAt":
		if e.complexity.FileSource.CreatedAt == nil {
			break
		}

		return e.complexity.FileSource.CreatedAt(childComplexity), true

	case "FileSource.createdBy":
		if e.complexity.FileSource.CreatedBy == nil {
			break
		}

		return e.complexity.FileSource.CreatedBy(childComplexity), true

	case "FileSource.endpoint":
		if e.complexity.FileSource.Endpoint == nil {
			break
		}

		return e.complexity.FileSource.Endpoint(childComplexity), true

	case "FileSource.endpointImmutable":
		if e.complexity.FileSource.EndpointImmutable == nil {
			break
		}

		return e.complexity.FileSource.EndpointImmutable(childComplexity), true

	case "FileSource.id":
		if e.complexity.FileSource.ID == nil {
			break
		}

		return e.complexity.FileSource.ID(childComplexity), true

	case "FileSource.kind":
		if e.complexity.FileSource.Kind == nil {
			break
		}

		return e.complexity.FileSource.Kind(childComplexity), true

	case "FileSource.region":
		if e.complexity.FileSource.Region == nil {
			break
		}

		return e.complexity.FileSource.Region(childComplexity), true

	case "FileSource.stsEndpoint":
		if e.complexity.FileSource.StsEndpoint == nil {
			break
		}

		return e.complexity.FileSource.StsEndpoint(childComplexity), true

	case "FileSource.updatedAt":
		if e.complexity.FileSource.UpdatedAt == nil {
			break
		}

		return e.complexity.FileSource.UpdatedAt(childComplexity), true

	case "FileSource.updatedBy":
		if e.complexity.FileSource.UpdatedBy == nil {
			break
		}

		return e.complexity.FileSource.UpdatedBy(childComplexity), true

	case "FileSourceConnection.edges":
		if e.complexity.FileSourceConnection.Edges == nil {
			break
		}

		return e.complexity.FileSourceConnection.Edges(childComplexity), true

	case "FileSourceConnection.pageInfo":
		if e.complexity.FileSourceConnection.PageInfo == nil {
			break
		}

		return e.complexity.FileSourceConnection.PageInfo(childComplexity), true

	case "FileSourceConnection.totalCount":
		if e.complexity.FileSourceConnection.TotalCount == nil {
			break
		}

		return e.complexity.FileSourceConnection.TotalCount(childComplexity), true

	case "FileSourceEdge.cursor":
		if e.complexity.FileSourceEdge.Cursor == nil {
			break
		}

		return e.complexity.FileSourceEdge.Cursor(childComplexity), true

	case "FileSourceEdge.node":
		if e.complexity.FileSourceEdge.Node == nil {
			break
		}

		return e.complexity.FileSourceEdge.Node(childComplexity), true

	case "Mfa.account":
		if e.complexity.Mfa.Account == nil {
			break
		}

		return e.complexity.Mfa.Account(childComplexity), true

	case "Mfa.secret":
		if e.complexity.Mfa.Secret == nil {
			break
		}

		return e.complexity.Mfa.Secret(childComplexity), true

	case "Mutation.allotOrganizationUser":
		if e.complexity.Mutation.AllotOrganizationUser == nil {
			break
		}

		args, err := ec.field_Mutation_allotOrganizationUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AllotOrganizationUser(childComplexity, args["input"].(ent.CreateOrgUserInput)), true

	case "Mutation.assignAppRolePolicy":
		if e.complexity.Mutation.AssignAppRolePolicy == nil {
			break
		}

		args, err := ec.field_Mutation_assignAppRolePolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignAppRolePolicy(childComplexity, args["appID"].(int), args["roleID"].(int), args["policyIDs"].([]int)), true

	case "Mutation.assignOrganizationApp":
		if e.complexity.Mutation.AssignOrganizationApp == nil {
			break
		}

		args, err := ec.field_Mutation_assignOrganizationApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignOrganizationApp(childComplexity, args["orgID"].(int), args["appID"].(int)), true

	case "Mutation.assignOrganizationAppPolicy":
		if e.complexity.Mutation.AssignOrganizationAppPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_assignOrganizationAppPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignOrganizationAppPolicy(childComplexity, args["orgID"].(int), args["appPolicyID"].(int)), true

	case "Mutation.assignOrganizationAppRole":
		if e.complexity.Mutation.AssignOrganizationAppRole == nil {
			break
		}

		args, err := ec.field_Mutation_assignOrganizationAppRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignOrganizationAppRole(childComplexity, args["orgID"].(int), args["appRoleID"].(int)), true

	case "Mutation.assignRoleUser":
		if e.complexity.Mutation.AssignRoleUser == nil {
			break
		}

		args, err := ec.field_Mutation_assignRoleUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignRoleUser(childComplexity, args["input"].(model.AssignRoleUserInput)), true

	case "Mutation.bindUserIdentity":
		if e.complexity.Mutation.BindUserIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_bindUserIdentity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BindUserIdentity(childComplexity, args["input"].(ent.CreateUserIdentityInput)), true

	case "Mutation.changePassword":
		if e.complexity.Mutation.ChangePassword == nil {
			break
		}

		args, err := ec.field_Mutation_changePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangePassword(childComplexity, args["oldPwd"].(string), args["newPwd"].(string)), true

	case "Mutation.createApp":
		if e.complexity.Mutation.CreateApp == nil {
			break
		}

		args, err := ec.field_Mutation_createApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateApp(childComplexity, args["input"].(ent.CreateAppInput)), true

	case "Mutation.createAppActions":
		if e.complexity.Mutation.CreateAppActions == nil {
			break
		}

		args, err := ec.field_Mutation_createAppActions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAppActions(childComplexity, args["appID"].(int), args["input"].([]*ent.CreateAppActionInput)), true

	case "Mutation.createAppDict":
		if e.complexity.Mutation.CreateAppDict == nil {
			break
		}

		args, err := ec.field_Mutation_createAppDict_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAppDict(childComplexity, args["appID"].(int), args["input"].(ent.CreateAppDictInput)), true

	case "Mutation.createAppDictItem":
		if e.complexity.Mutation.CreateAppDictItem == nil {
			break
		}

		args, err := ec.field_Mutation_createAppDictItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAppDictItem(childComplexity, args["dictID"].(int), args["input"].(ent.CreateAppDictItemInput)), true

	case "Mutation.createAppMenus":
		if e.complexity.Mutation.CreateAppMenus == nil {
			break
		}

		args, err := ec.field_Mutation_createAppMenus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAppMenus(childComplexity, args["appID"].(int), args["input"].([]*ent.CreateAppMenuInput)), true

	case "Mutation.createAppPolicy":
		if e.complexity.Mutation.CreateAppPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createAppPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAppPolicy(childComplexity, args["appID"].(int), args["input"].(ent.CreateAppPolicyInput)), true

	case "Mutation.createAppRole":
		if e.complexity.Mutation.CreateAppRole == nil {
			break
		}

		args, err := ec.field_Mutation_createAppRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAppRole(childComplexity, args["appID"].(int), args["input"].(ent.CreateAppRoleInput)), true

	case "Mutation.createFileIdentity":
		if e.complexity.Mutation.CreateFileIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_createFileIdentity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFileIdentity(childComplexity, args["input"].(ent.CreateFileIdentityInput)), true

	case "Mutation.createFileSource":
		if e.complexity.Mutation.CreateFileSource == nil {
			break
		}

		args, err := ec.field_Mutation_createFileSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFileSource(childComplexity, args["input"].(ent.CreateFileSourceInput)), true

	case "Mutation.createOauthClient":
		if e.complexity.Mutation.CreateOauthClient == nil {
			break
		}

		args, err := ec.field_Mutation_createOauthClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOauthClient(childComplexity, args["input"].(ent.CreateOauthClientInput)), true

	case "Mutation.createOrganization":
		if e.complexity.Mutation.CreateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganization(childComplexity, args["input"].(ent.CreateOrgInput)), true

	case "Mutation.createOrganizationAccount":
		if e.complexity.Mutation.CreateOrganizationAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationAccount(childComplexity, args["rootOrgID"].(int), args["input"].(ent.CreateUserInput)), true

	case "Mutation.createOrganizationPolicy":
		if e.complexity.Mutation.CreateOrganizationPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationPolicy(childComplexity, args["input"].(ent.CreateOrgPolicyInput)), true

	case "Mutation.createOrganizationUser":
		if e.complexity.Mutation.CreateOrganizationUser == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationUser(childComplexity, args["rootOrgID"].(int), args["input"].(ent.CreateUserInput)), true

	case "Mutation.createRole":
		if e.complexity.Mutation.CreateRole == nil {
			break
		}

		args, err := ec.field_Mutation_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRole(childComplexity, args["input"].(ent.CreateOrgRoleInput)), true

	case "Mutation.createRoot":
		if e.complexity.Mutation.CreateRoot == nil {
			break
		}

		args, err := ec.field_Mutation_createRoot_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRoot(childComplexity, args["input"].(ent.CreateOrgInput)), true

	case "Mutation.deleteApp":
		if e.complexity.Mutation.DeleteApp == nil {
			break
		}

		args, err := ec.field_Mutation_deleteApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteApp(childComplexity, args["appID"].(int)), true

	case "Mutation.deleteAppAction":
		if e.complexity.Mutation.DeleteAppAction == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAppAction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppAction(childComplexity, args["actionID"].(int)), true

	case "Mutation.deleteAppDict":
		if e.complexity.Mutation.DeleteAppDict == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAppDict_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppDict(childComplexity, args["dictID"].(int)), true

	case "Mutation.deleteAppDictItem":
		if e.complexity.Mutation.DeleteAppDictItem == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAppDictItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppDictItem(childComplexity, args["itemID"].(int)), true

	case "Mutation.deleteAppMenu":
		if e.complexity.Mutation.DeleteAppMenu == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAppMenu_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppMenu(childComplexity, args["menuID"].(int)), true

	case "Mutation.deleteAppPolicy":
		if e.complexity.Mutation.DeleteAppPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAppPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppPolicy(childComplexity, args["policyID"].(int)), true

	case "Mutation.deleteAppRole":
		if e.complexity.Mutation.DeleteAppRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAppRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppRole(childComplexity, args["roleID"].(int)), true

	case "Mutation.deleteFileIdentity":
		if e.complexity.Mutation.DeleteFileIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFileIdentity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFileIdentity(childComplexity, args["id"].(int)), true

	case "Mutation.deleteFileSource":
		if e.complexity.Mutation.DeleteFileSource == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFileSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFileSource(childComplexity, args["fsID"].(int)), true

	case "Mutation.deleteOauthClient":
		if e.complexity.Mutation.DeleteOauthClient == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOauthClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOauthClient(childComplexity, args["id"].(int)), true

	case "Mutation.deleteOrganization":
		if e.complexity.Mutation.DeleteOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganization(childComplexity, args["orgID"].(int)), true

	case "Mutation.deleteOrganizationPolicy":
		if e.complexity.Mutation.DeleteOrganizationPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganizationPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganizationPolicy(childComplexity, args["orgPolicyID"].(int)), true

	case "Mutation.deleteRole":
		if e.complexity.Mutation.DeleteRole == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRole(childComplexity, args["roleID"].(int)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["userID"].(int)), true

	case "Mutation.deleteUserIdentity":
		if e.complexity.Mutation.DeleteUserIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserIdentity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserIdentity(childComplexity, args["id"].(int)), true

	case "Mutation.disableMFA":
		if e.complexity.Mutation.DisableMfa == nil {
			break
		}

		args, err := ec.field_Mutation_disableMFA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableMfa(childComplexity, args["userID"].(int)), true

	case "Mutation.disableOauthClient":
		if e.complexity.Mutation.DisableOauthClient == nil {
			break
		}

		args, err := ec.field_Mutation_disableOauthClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableOauthClient(childComplexity, args["id"].(int)), true

	case "Mutation.enableDirectory":
		if e.complexity.Mutation.EnableDirectory == nil {
			break
		}

		args, err := ec.field_Mutation_enableDirectory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableDirectory(childComplexity, args["input"].(model.EnableDirectoryInput)), true

	case "Mutation.enableMFA":
		if e.complexity.Mutation.EnableMfa == nil {
			break
		}

		args, err := ec.field_Mutation_enableMFA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableMfa(childComplexity, args["userID"].(int)), true

	case "Mutation.enableOauthClient":
		if e.complexity.Mutation.EnableOauthClient == nil {
			break
		}

		args, err := ec.field_Mutation_enableOauthClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableOauthClient(childComplexity, args["id"].(int)), true

	case "Mutation.grant":
		if e.complexity.Mutation.Grant == nil {
			break
		}

		args, err := ec.field_Mutation_grant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Grant(childComplexity, args["input"].(ent.CreatePermissionInput)), true

	case "Mutation.moveAppDictItem":
		if e.complexity.Mutation.MoveAppDictItem == nil {
			break
		}

		args, err := ec.field_Mutation_moveAppDictItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoveAppDictItem(childComplexity, args["sourceID"].(int), args["targetID"].(int), args["action"].(model.TreeAction)), true

	case "Mutation.moveAppMenu":
		if e.complexity.Mutation.MoveAppMenu == nil {
			break
		}

		args, err := ec.field_Mutation_moveAppMenu_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoveAppMenu(childComplexity, args["sourceID"].(int), args["targetID"].(int), args["action"].(model.TreeAction)), true

	case "Mutation.moveOrganization":
		if e.complexity.Mutation.MoveOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_moveOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoveOrganization(childComplexity, args["sourceID"].(int), args["targetId"].(int), args["action"].(model.TreeAction)), true

	case "Mutation.recoverOrgUser":
		if e.complexity.Mutation.RecoverOrgUser == nil {
			break
		}

		args, err := ec.field_Mutation_recoverOrgUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecoverOrgUser(childComplexity, args["userID"].(int), args["userInput"].(ent.UpdateUserInput), args["pwdKind"].(userloginprofile.SetKind), args["pwdInput"].(*ent.CreateUserPasswordInput)), true

	case "Mutation.removeOrganizationUser":
		if e.complexity.Mutation.RemoveOrganizationUser == nil {
			break
		}

		args, err := ec.field_Mutation_removeOrganizationUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveOrganizationUser(childComplexity, args["orgID"].(int), args["userID"].(int)), true

	case "Mutation.resetUserPasswordByEmail":
		if e.complexity.Mutation.ResetUserPasswordByEmail == nil {
			break
		}

		args, err := ec.field_Mutation_resetUserPasswordByEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetUserPasswordByEmail(childComplexity, args["userId"].(int)), true

	case "Mutation.revoke":
		if e.complexity.Mutation.Revoke == nil {
			break
		}

		args, err := ec.field_Mutation_revoke_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Revoke(childComplexity, args["orgID"].(int), args["permissionID"].(int)), true

	case "Mutation.revokeAppRolePolicy":
		if e.complexity.Mutation.RevokeAppRolePolicy == nil {
			break
		}

		args, err := ec.field_Mutation_revokeAppRolePolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeAppRolePolicy(childComplexity, args["appID"].(int), args["roleID"].(int), args["policyIDs"].([]int)), true

	case "Mutation.revokeOrganizationApp":
		if e.complexity.Mutation.RevokeOrganizationApp == nil {
			break
		}

		args, err := ec.field_Mutation_revokeOrganizationApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeOrganizationApp(childComplexity, args["orgID"].(int), args["appID"].(int)), true

	case "Mutation.revokeOrganizationAppPolicy":
		if e.complexity.Mutation.RevokeOrganizationAppPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_revokeOrganizationAppPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeOrganizationAppPolicy(childComplexity, args["orgID"].(int), args["appPolicyID"].(int)), true

	case "Mutation.revokeOrganizationAppRole":
		if e.complexity.Mutation.RevokeOrganizationAppRole == nil {
			break
		}

		args, err := ec.field_Mutation_revokeOrganizationAppRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeOrganizationAppRole(childComplexity, args["orgID"].(int), args["appRoleID"].(int)), true

	case "Mutation.revokeRoleUser":
		if e.complexity.Mutation.RevokeRoleUser == nil {
			break
		}

		args, err := ec.field_Mutation_revokeRoleUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeRoleUser(childComplexity, args["roleID"].(int), args["userID"].(int)), true

	case "Mutation.saveOrgUserPreference":
		if e.complexity.Mutation.SaveOrgUserPreference == nil {
			break
		}

		args, err := ec.field_Mutation_saveOrgUserPreference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveOrgUserPreference(childComplexity, args["input"].(model.OrgUserPreferenceInput)), true

	case "Mutation.sendMFAToUserByEmail":
		if e.complexity.Mutation.SendMFAToUserByEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendMFAToUserByEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendMFAToUserByEmail(childComplexity, args["userID"].(int)), true

	case "Mutation.setDefaultFileIdentity":
		if e.complexity.Mutation.SetDefaultFileIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_setDefaultFileIdentity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetDefaultFileIdentity(childComplexity, args["identityID"].(int), args["orgID"].(int)), true

	case "Mutation.updateApp":
		if e.complexity.Mutation.UpdateApp == nil {
			break
		}

		args, err := ec.field_Mutation_updateApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateApp(childComplexity, args["appID"].(int), args["input"].(ent.UpdateAppInput)), true

	case "Mutation.updateAppAction":
		if e.complexity.Mutation.UpdateAppAction == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppAction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppAction(childComplexity, args["actionID"].(int), args["input"].(ent.UpdateAppActionInput)), true

	case "Mutation.updateAppDict":
		if e.complexity.Mutation.UpdateAppDict == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppDict_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppDict(childComplexity, args["dictID"].(int), args["input"].(ent.UpdateAppDictInput)), true

	case "Mutation.updateAppDictItem":
		if e.complexity.Mutation.UpdateAppDictItem == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppDictItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppDictItem(childComplexity, args["itemID"].(int), args["input"].(ent.UpdateAppDictItemInput)), true

	case "Mutation.updateAppMenu":
		if e.complexity.Mutation.UpdateAppMenu == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppMenu_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppMenu(childComplexity, args["menuID"].(int), args["input"].(ent.UpdateAppMenuInput)), true

	case "Mutation.updateAppPolicy":
		if e.complexity.Mutation.UpdateAppPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppPolicy(childComplexity, args["policyID"].(int), args["input"].(ent.UpdateAppPolicyInput)), true

	case "Mutation.updateAppRes":
		if e.complexity.Mutation.UpdateAppRes == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppRes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppRes(childComplexity, args["appResID"].(int), args["input"].(ent.UpdateAppResInput)), true

	case "Mutation.updateAppRole":
		if e.complexity.Mutation.UpdateAppRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppRole(childComplexity, args["roleID"].(int), args["input"].(ent.UpdateAppRoleInput)), true

	case "Mutation.updateFileIdentity":
		if e.complexity.Mutation.UpdateFileIdentity == nil {
			break
		}

		args, err := ec.field_Mutation_updateFileIdentity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFileIdentity(childComplexity, args["id"].(int), args["input"].(ent.UpdateFileIdentityInput)), true

	case "Mutation.updateFileSource":
		if e.complexity.Mutation.UpdateFileSource == nil {
			break
		}

		args, err := ec.field_Mutation_updateFileSource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFileSource(childComplexity, args["fsID"].(int), args["input"].(ent.UpdateFileSourceInput)), true

	case "Mutation.updateLoginProfile":
		if e.complexity.Mutation.UpdateLoginProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateLoginProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLoginProfile(childComplexity, args["userID"].(int), args["input"].(ent.UpdateUserLoginProfileInput)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["orgID"].(int), args["input"].(ent.UpdateOrgInput)), true

	case "Mutation.updateOrganizationPolicy":
		if e.complexity.Mutation.UpdateOrganizationPolicy == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationPolicy(childComplexity, args["orgPolicyID"].(int), args["input"].(ent.UpdateOrgPolicyInput)), true

	case "Mutation.updatePermission":
		if e.complexity.Mutation.UpdatePermission == nil {
			break
		}

		args, err := ec.field_Mutation_updatePermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePermission(childComplexity, args["permissionID"].(int), args["input"].(ent.UpdatePermissionInput)), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["roleID"].(int), args["input"].(ent.UpdateOrgRoleInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["userID"].(int), args["input"].(ent.UpdateUserInput)), true

	case "OauthClient.clientID":
		if e.complexity.OauthClient.ClientID == nil {
			break
		}

		return e.complexity.OauthClient.ClientID(childComplexity), true

	case "OauthClient.clientSecret":
		if e.complexity.OauthClient.ClientSecret == nil {
			break
		}

		return e.complexity.OauthClient.ClientSecret(childComplexity), true

	case "OauthClient.createdAt":
		if e.complexity.OauthClient.CreatedAt == nil {
			break
		}

		return e.complexity.OauthClient.CreatedAt(childComplexity), true

	case "OauthClient.createdBy":
		if e.complexity.OauthClient.CreatedBy == nil {
			break
		}

		return e.complexity.OauthClient.CreatedBy(childComplexity), true

	case "OauthClient.grantTypes":
		if e.complexity.OauthClient.GrantTypes == nil {
			break
		}

		return e.complexity.OauthClient.GrantTypes(childComplexity), true

	case "OauthClient.id":
		if e.complexity.OauthClient.ID == nil {
			break
		}

		return e.complexity.OauthClient.ID(childComplexity), true

	case "OauthClient.lastAuthAt":
		if e.complexity.OauthClient.LastAuthAt == nil {
			break
		}

		return e.complexity.OauthClient.LastAuthAt(childComplexity), true

	case "OauthClient.name":
		if e.complexity.OauthClient.Name == nil {
			break
		}

		return e.complexity.OauthClient.Name(childComplexity), true

	case "OauthClient.status":
		if e.complexity.OauthClient.Status == nil {
			break
		}

		return e.complexity.OauthClient.Status(childComplexity), true

	case "OauthClient.updatedAt":
		if e.complexity.OauthClient.UpdatedAt == nil {
			break
		}

		return e.complexity.OauthClient.UpdatedAt(childComplexity), true

	case "OauthClient.updatedBy":
		if e.complexity.OauthClient.UpdatedBy == nil {
			break
		}

		return e.complexity.OauthClient.UpdatedBy(childComplexity), true

	case "OauthClient.user":
		if e.complexity.OauthClient.User == nil {
			break
		}

		return e.complexity.OauthClient.User(childComplexity), true

	case "OauthClient.userID":
		if e.complexity.OauthClient.UserID == nil {
			break
		}

		return e.complexity.OauthClient.UserID(childComplexity), true

	case "Org.apps":
		if e.complexity.Org.Apps == nil {
			break
		}

		args, err := ec.field_Org_apps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Org.Apps(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppOrder), args["where"].(*ent.AppWhereInput)), true

	case "Org.children":
		if e.complexity.Org.Children == nil {
			break
		}

		return e.complexity.Org.Children(childComplexity), true

	case "Org.code":
		if e.complexity.Org.Code == nil {
			break
		}

		return e.complexity.Org.Code(childComplexity), true

	case "Org.countryCode":
		if e.complexity.Org.CountryCode == nil {
			break
		}

		return e.complexity.Org.CountryCode(childComplexity), true

	case "Org.createdAt":
		if e.complexity.Org.CreatedAt == nil {
			break
		}

		return e.complexity.Org.CreatedAt(childComplexity), true

	case "Org.createdBy":
		if e.complexity.Org.CreatedBy == nil {
			break
		}

		return e.complexity.Org.CreatedBy(childComplexity), true

	case "Org.deletedAt":
		if e.complexity.Org.DeletedAt == nil {
			break
		}

		return e.complexity.Org.DeletedAt(childComplexity), true

	case "Org.displaySort":
		if e.complexity.Org.DisplaySort == nil {
			break
		}

		return e.complexity.Org.DisplaySort(childComplexity), true

	case "Org.domain":
		if e.complexity.Org.Domain == nil {
			break
		}

		return e.complexity.Org.Domain(childComplexity), true

	case "Org.fileIdentities":
		if e.complexity.Org.FileIdentities == nil {
			break
		}

		return e.complexity.Org.FileIdentities(childComplexity), true

	case "Org.id":
		if e.complexity.Org.ID == nil {
			break
		}

		return e.complexity.Org.ID(childComplexity), true

	case "Org.isAllowRevokeAppPolicy":
		if e.complexity.Org.IsAllowRevokeAppPolicy == nil {
			break
		}

		args, err := ec.field_Org_isAllowRevokeAppPolicy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Org.IsAllowRevokeAppPolicy(childComplexity, args["appPolicyID"].(int)), true

	case "Org.kind":
		if e.complexity.Org.Kind == nil {
			break
		}

		return e.complexity.Org.Kind(childComplexity), true

	case "Org.name":
		if e.complexity.Org.Name == nil {
			break
		}

		return e.complexity.Org.Name(childComplexity), true

	case "Org.owner":
		if e.complexity.Org.Owner == nil {
			break
		}

		return e.complexity.Org.Owner(childComplexity), true

	case "Org.ownerID":
		if e.complexity.Org.OwnerID == nil {
			break
		}

		return e.complexity.Org.OwnerID(childComplexity), true

	case "Org.parent":
		if e.complexity.Org.Parent == nil {
			break
		}

		return e.complexity.Org.Parent(childComplexity), true

	case "Org.parentID":
		if e.complexity.Org.ParentID == nil {
			break
		}

		return e.complexity.Org.ParentID(childComplexity), true

	case "Org.path":
		if e.complexity.Org.Path == nil {
			break
		}

		return e.complexity.Org.Path(childComplexity), true

	case "Org.permissions":
		if e.complexity.Org.Permissions == nil {
			break
		}

		args, err := ec.field_Org_permissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Org.Permissions(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.PermissionOrder), args["where"].(*ent.PermissionWhereInput)), true

	case "Org.policies":
		if e.complexity.Org.Policies == nil {
			break
		}

		args, err := ec.field_Org_policies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Org.Policies(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.OrgPolicyOrder), args["where"].(*ent.OrgPolicyWhereInput)), true

	case "Org.profile":
		if e.complexity.Org.Profile == nil {
			break
		}

		return e.complexity.Org.Profile(childComplexity), true

	case "Org.status":
		if e.complexity.Org.Status == nil {
			break
		}

		return e.complexity.Org.Status(childComplexity), true

	case "Org.timezone":
		if e.complexity.Org.Timezone == nil {
			break
		}

		return e.complexity.Org.Timezone(childComplexity), true

	case "Org.updatedAt":
		if e.complexity.Org.UpdatedAt == nil {
			break
		}

		return e.complexity.Org.UpdatedAt(childComplexity), true

	case "Org.updatedBy":
		if e.complexity.Org.UpdatedBy == nil {
			break
		}

		return e.complexity.Org.UpdatedBy(childComplexity), true

	case "Org.users":
		if e.complexity.Org.Users == nil {
			break
		}

		args, err := ec.field_Org_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Org.Users(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "OrgConnection.edges":
		if e.complexity.OrgConnection.Edges == nil {
			break
		}

		return e.complexity.OrgConnection.Edges(childComplexity), true

	case "OrgConnection.pageInfo":
		if e.complexity.OrgConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgConnection.PageInfo(childComplexity), true

	case "OrgConnection.totalCount":
		if e.complexity.OrgConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgConnection.TotalCount(childComplexity), true

	case "OrgEdge.cursor":
		if e.complexity.OrgEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgEdge.Cursor(childComplexity), true

	case "OrgEdge.node":
		if e.complexity.OrgEdge.Node == nil {
			break
		}

		return e.complexity.OrgEdge.Node(childComplexity), true

	case "OrgFileIdentity.comments":
		if e.complexity.OrgFileIdentity.Comments == nil {
			break
		}

		return e.complexity.OrgFileIdentity.Comments(childComplexity), true

	case "OrgFileIdentity.createdAt":
		if e.complexity.OrgFileIdentity.CreatedAt == nil {
			break
		}

		return e.complexity.OrgFileIdentity.CreatedAt(childComplexity), true

	case "OrgFileIdentity.createdBy":
		if e.complexity.OrgFileIdentity.CreatedBy == nil {
			break
		}

		return e.complexity.OrgFileIdentity.CreatedBy(childComplexity), true

	case "OrgFileIdentity.fileSourceID":
		if e.complexity.OrgFileIdentity.FileSourceID == nil {
			break
		}

		return e.complexity.OrgFileIdentity.FileSourceID(childComplexity), true

	case "OrgFileIdentity.id":
		if e.complexity.OrgFileIdentity.ID == nil {
			break
		}

		return e.complexity.OrgFileIdentity.ID(childComplexity), true

	case "OrgFileIdentity.isDefault":
		if e.complexity.OrgFileIdentity.IsDefault == nil {
			break
		}

		return e.complexity.OrgFileIdentity.IsDefault(childComplexity), true

	case "OrgFileIdentity.source":
		if e.complexity.OrgFileIdentity.Source == nil {
			break
		}

		return e.complexity.OrgFileIdentity.Source(childComplexity), true

	case "OrgFileIdentity.tenantID":
		if e.complexity.OrgFileIdentity.TenantID == nil {
			break
		}

		return e.complexity.OrgFileIdentity.TenantID(childComplexity), true

	case "OrgFileIdentity.updatedAt":
		if e.complexity.OrgFileIdentity.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgFileIdentity.UpdatedAt(childComplexity), true

	case "OrgFileIdentity.updatedBy":
		if e.complexity.OrgFileIdentity.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgFileIdentity.UpdatedBy(childComplexity), true

	case "OrgPolicy.appPolicyID":
		if e.complexity.OrgPolicy.AppPolicyID == nil {
			break
		}

		return e.complexity.OrgPolicy.AppPolicyID(childComplexity), true

	case "OrgPolicy.comments":
		if e.complexity.OrgPolicy.Comments == nil {
			break
		}

		return e.complexity.OrgPolicy.Comments(childComplexity), true

	case "OrgPolicy.createdAt":
		if e.complexity.OrgPolicy.CreatedAt == nil {
			break
		}

		return e.complexity.OrgPolicy.CreatedAt(childComplexity), true

	case "OrgPolicy.createdBy":
		if e.complexity.OrgPolicy.CreatedBy == nil {
			break
		}

		return e.complexity.OrgPolicy.CreatedBy(childComplexity), true

	case "OrgPolicy.id":
		if e.complexity.OrgPolicy.ID == nil {
			break
		}

		return e.complexity.OrgPolicy.ID(childComplexity), true

	case "OrgPolicy.isGrantRole":
		if e.complexity.OrgPolicy.IsGrantRole == nil {
			break
		}

		args, err := ec.field_OrgPolicy_isGrantRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgPolicy.IsGrantRole(childComplexity, args["roleID"].(int)), true

	case "OrgPolicy.isGrantUser":
		if e.complexity.OrgPolicy.IsGrantUser == nil {
			break
		}

		args, err := ec.field_OrgPolicy_isGrantUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgPolicy.IsGrantUser(childComplexity, args["userID"].(int)), true

	case "OrgPolicy.name":
		if e.complexity.OrgPolicy.Name == nil {
			break
		}

		return e.complexity.OrgPolicy.Name(childComplexity), true

	case "OrgPolicy.org":
		if e.complexity.OrgPolicy.Org == nil {
			break
		}

		return e.complexity.OrgPolicy.Org(childComplexity), true

	case "OrgPolicy.orgID":
		if e.complexity.OrgPolicy.OrgID == nil {
			break
		}

		return e.complexity.OrgPolicy.OrgID(childComplexity), true

	case "OrgPolicy.permissions":
		if e.complexity.OrgPolicy.Permissions == nil {
			break
		}

		return e.complexity.OrgPolicy.Permissions(childComplexity), true

	case "OrgPolicy.rules":
		if e.complexity.OrgPolicy.Rules == nil {
			break
		}

		return e.complexity.OrgPolicy.Rules(childComplexity), true

	case "OrgPolicy.updatedAt":
		if e.complexity.OrgPolicy.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgPolicy.UpdatedAt(childComplexity), true

	case "OrgPolicy.updatedBy":
		if e.complexity.OrgPolicy.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgPolicy.UpdatedBy(childComplexity), true

	case "OrgPolicyConnection.edges":
		if e.complexity.OrgPolicyConnection.Edges == nil {
			break
		}

		return e.complexity.OrgPolicyConnection.Edges(childComplexity), true

	case "OrgPolicyConnection.pageInfo":
		if e.complexity.OrgPolicyConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgPolicyConnection.PageInfo(childComplexity), true

	case "OrgPolicyConnection.totalCount":
		if e.complexity.OrgPolicyConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgPolicyConnection.TotalCount(childComplexity), true

	case "OrgPolicyEdge.cursor":
		if e.complexity.OrgPolicyEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgPolicyEdge.Cursor(childComplexity), true

	case "OrgPolicyEdge.node":
		if e.complexity.OrgPolicyEdge.Node == nil {
			break
		}

		return e.complexity.OrgPolicyEdge.Node(childComplexity), true

	case "OrgRole.comments":
		if e.complexity.OrgRole.Comments == nil {
			break
		}

		return e.complexity.OrgRole.Comments(childComplexity), true

	case "OrgRole.createdAt":
		if e.complexity.OrgRole.CreatedAt == nil {
			break
		}

		return e.complexity.OrgRole.CreatedAt(childComplexity), true

	case "OrgRole.createdBy":
		if e.complexity.OrgRole.CreatedBy == nil {
			break
		}

		return e.complexity.OrgRole.CreatedBy(childComplexity), true

	case "OrgRole.id":
		if e.complexity.OrgRole.ID == nil {
			break
		}

		return e.complexity.OrgRole.ID(childComplexity), true

	case "OrgRole.isAppRole":
		if e.complexity.OrgRole.IsAppRole == nil {
			break
		}

		return e.complexity.OrgRole.IsAppRole(childComplexity), true

	case "OrgRole.isGrantUser":
		if e.complexity.OrgRole.IsGrantUser == nil {
			break
		}

		args, err := ec.field_OrgRole_isGrantUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgRole.IsGrantUser(childComplexity, args["userID"].(int)), true

	case "OrgRole.kind":
		if e.complexity.OrgRole.Kind == nil {
			break
		}

		return e.complexity.OrgRole.Kind(childComplexity), true

	case "OrgRole.name":
		if e.complexity.OrgRole.Name == nil {
			break
		}

		return e.complexity.OrgRole.Name(childComplexity), true

	case "OrgRole.orgID":
		if e.complexity.OrgRole.OrgID == nil {
			break
		}

		return e.complexity.OrgRole.OrgID(childComplexity), true

	case "OrgRole.updatedAt":
		if e.complexity.OrgRole.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgRole.UpdatedAt(childComplexity), true

	case "OrgRole.updatedBy":
		if e.complexity.OrgRole.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgRole.UpdatedBy(childComplexity), true

	case "OrgRoleConnection.edges":
		if e.complexity.OrgRoleConnection.Edges == nil {
			break
		}

		return e.complexity.OrgRoleConnection.Edges(childComplexity), true

	case "OrgRoleConnection.pageInfo":
		if e.complexity.OrgRoleConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgRoleConnection.PageInfo(childComplexity), true

	case "OrgRoleConnection.totalCount":
		if e.complexity.OrgRoleConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgRoleConnection.TotalCount(childComplexity), true

	case "OrgRoleEdge.cursor":
		if e.complexity.OrgRoleEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgRoleEdge.Cursor(childComplexity), true

	case "OrgRoleEdge.node":
		if e.complexity.OrgRoleEdge.Node == nil {
			break
		}

		return e.complexity.OrgRoleEdge.Node(childComplexity), true

	case "OrgUserPreference.createdAt":
		if e.complexity.OrgUserPreference.CreatedAt == nil {
			break
		}

		return e.complexity.OrgUserPreference.CreatedAt(childComplexity), true

	case "OrgUserPreference.createdBy":
		if e.complexity.OrgUserPreference.CreatedBy == nil {
			break
		}

		return e.complexity.OrgUserPreference.CreatedBy(childComplexity), true

	case "OrgUserPreference.id":
		if e.complexity.OrgUserPreference.ID == nil {
			break
		}

		return e.complexity.OrgUserPreference.ID(childComplexity), true

	case "OrgUserPreference.menuFavorite":
		if e.complexity.OrgUserPreference.MenuFavorite == nil {
			break
		}

		return e.complexity.OrgUserPreference.MenuFavorite(childComplexity), true

	case "OrgUserPreference.menuRecent":
		if e.complexity.OrgUserPreference.MenuRecent == nil {
			break
		}

		return e.complexity.OrgUserPreference.MenuRecent(childComplexity), true

	case "OrgUserPreference.org":
		if e.complexity.OrgUserPreference.Org == nil {
			break
		}

		return e.complexity.OrgUserPreference.Org(childComplexity), true

	case "OrgUserPreference.orgID":
		if e.complexity.OrgUserPreference.OrgID == nil {
			break
		}

		return e.complexity.OrgUserPreference.OrgID(childComplexity), true

	case "OrgUserPreference.updatedAt":
		if e.complexity.OrgUserPreference.UpdatedAt == nil {
			break
		}

		return e.complexity.OrgUserPreference.UpdatedAt(childComplexity), true

	case "OrgUserPreference.updatedBy":
		if e.complexity.OrgUserPreference.UpdatedBy == nil {
			break
		}

		return e.complexity.OrgUserPreference.UpdatedBy(childComplexity), true

	case "OrgUserPreference.user":
		if e.complexity.OrgUserPreference.User == nil {
			break
		}

		return e.complexity.OrgUserPreference.User(childComplexity), true

	case "OrgUserPreference.userID":
		if e.complexity.OrgUserPreference.UserID == nil {
			break
		}

		return e.complexity.OrgUserPreference.UserID(childComplexity), true

	case "OrgUserPreferenceConnection.edges":
		if e.complexity.OrgUserPreferenceConnection.Edges == nil {
			break
		}

		return e.complexity.OrgUserPreferenceConnection.Edges(childComplexity), true

	case "OrgUserPreferenceConnection.pageInfo":
		if e.complexity.OrgUserPreferenceConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrgUserPreferenceConnection.PageInfo(childComplexity), true

	case "OrgUserPreferenceConnection.totalCount":
		if e.complexity.OrgUserPreferenceConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrgUserPreferenceConnection.TotalCount(childComplexity), true

	case "OrgUserPreferenceEdge.cursor":
		if e.complexity.OrgUserPreferenceEdge.Cursor == nil {
			break
		}

		return e.complexity.OrgUserPreferenceEdge.Cursor(childComplexity), true

	case "OrgUserPreferenceEdge.node":
		if e.complexity.OrgUserPreferenceEdge.Node == nil {
			break
		}

		return e.complexity.OrgUserPreferenceEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Permission.createdAt":
		if e.complexity.Permission.CreatedAt == nil {
			break
		}

		return e.complexity.Permission.CreatedAt(childComplexity), true

	case "Permission.createdBy":
		if e.complexity.Permission.CreatedBy == nil {
			break
		}

		return e.complexity.Permission.CreatedBy(childComplexity), true

	case "Permission.endAt":
		if e.complexity.Permission.EndAt == nil {
			break
		}

		return e.complexity.Permission.EndAt(childComplexity), true

	case "Permission.id":
		if e.complexity.Permission.ID == nil {
			break
		}

		return e.complexity.Permission.ID(childComplexity), true

	case "Permission.isAllowRevoke":
		if e.complexity.Permission.IsAllowRevoke == nil {
			break
		}

		return e.complexity.Permission.IsAllowRevoke(childComplexity), true

	case "Permission.org":
		if e.complexity.Permission.Org == nil {
			break
		}

		return e.complexity.Permission.Org(childComplexity), true

	case "Permission.orgID":
		if e.complexity.Permission.OrgID == nil {
			break
		}

		return e.complexity.Permission.OrgID(childComplexity), true

	case "Permission.orgPolicy":
		if e.complexity.Permission.OrgPolicy == nil {
			break
		}

		return e.complexity.Permission.OrgPolicy(childComplexity), true

	case "Permission.orgPolicyID":
		if e.complexity.Permission.OrgPolicyID == nil {
			break
		}

		return e.complexity.Permission.OrgPolicyID(childComplexity), true

	case "Permission.principalKind":
		if e.complexity.Permission.PrincipalKind == nil {
			break
		}

		return e.complexity.Permission.PrincipalKind(childComplexity), true

	case "Permission.role":
		if e.complexity.Permission.Role == nil {
			break
		}

		return e.complexity.Permission.Role(childComplexity), true

	case "Permission.roleID":
		if e.complexity.Permission.RoleID == nil {
			break
		}

		return e.complexity.Permission.RoleID(childComplexity), true

	case "Permission.startAt":
		if e.complexity.Permission.StartAt == nil {
			break
		}

		return e.complexity.Permission.StartAt(childComplexity), true

	case "Permission.status":
		if e.complexity.Permission.Status == nil {
			break
		}

		return e.complexity.Permission.Status(childComplexity), true

	case "Permission.updatedAt":
		if e.complexity.Permission.UpdatedAt == nil {
			break
		}

		return e.complexity.Permission.UpdatedAt(childComplexity), true

	case "Permission.updatedBy":
		if e.complexity.Permission.UpdatedBy == nil {
			break
		}

		return e.complexity.Permission.UpdatedBy(childComplexity), true

	case "Permission.user":
		if e.complexity.Permission.User == nil {
			break
		}

		return e.complexity.Permission.User(childComplexity), true

	case "Permission.userID":
		if e.complexity.Permission.UserID == nil {
			break
		}

		return e.complexity.Permission.UserID(childComplexity), true

	case "PermissionConnection.edges":
		if e.complexity.PermissionConnection.Edges == nil {
			break
		}

		return e.complexity.PermissionConnection.Edges(childComplexity), true

	case "PermissionConnection.pageInfo":
		if e.complexity.PermissionConnection.PageInfo == nil {
			break
		}

		return e.complexity.PermissionConnection.PageInfo(childComplexity), true

	case "PermissionConnection.totalCount":
		if e.complexity.PermissionConnection.TotalCount == nil {
			break
		}

		return e.complexity.PermissionConnection.TotalCount(childComplexity), true

	case "PermissionEdge.cursor":
		if e.complexity.PermissionEdge.Cursor == nil {
			break
		}

		return e.complexity.PermissionEdge.Cursor(childComplexity), true

	case "PermissionEdge.node":
		if e.complexity.PermissionEdge.Node == nil {
			break
		}

		return e.complexity.PermissionEdge.Node(childComplexity), true

	case "PolicyRule.actions":
		if e.complexity.PolicyRule.Actions == nil {
			break
		}

		return e.complexity.PolicyRule.Actions(childComplexity), true

	case "PolicyRule.conditions":
		if e.complexity.PolicyRule.Conditions == nil {
			break
		}

		return e.complexity.PolicyRule.Conditions(childComplexity), true

	case "PolicyRule.effect":
		if e.complexity.PolicyRule.Effect == nil {
			break
		}

		return e.complexity.PolicyRule.Effect(childComplexity), true

	case "PolicyRule.resources":
		if e.complexity.PolicyRule.Resources == nil {
			break
		}

		return e.complexity.PolicyRule.Resources(childComplexity), true

	case "Query.appAccess":
		if e.complexity.Query.AppAccess == nil {
			break
		}

		args, err := ec.field_Query_appAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppAccess(childComplexity, args["appCode"].(string)), true

	case "Query.appDictByRefCode":
		if e.complexity.Query.AppDictByRefCode == nil {
			break
		}

		args, err := ec.field_Query_appDictByRefCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppDictByRefCode(childComplexity, args["refCodes"].([]string)), true

	case "Query.appDictItemByRefCode":
		if e.complexity.Query.AppDictItemByRefCode == nil {
			break
		}

		args, err := ec.field_Query_appDictItemByRefCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppDictItemByRefCode(childComplexity, args["refCode"].(string)), true

	case "Query.appDicts":
		if e.complexity.Query.AppDicts == nil {
			break
		}

		args, err := ec.field_Query_appDicts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppDicts(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppDictOrder), args["where"].(*ent.AppDictWhereInput)), true

	case "Query.appPolicyAssignedToOrgs":
		if e.complexity.Query.AppPolicyAssignedToOrgs == nil {
			break
		}

		args, err := ec.field_Query_appPolicyAssignedToOrgs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppPolicyAssignedToOrgs(childComplexity, args["policyID"].(int), args["where"].(*ent.OrgWhereInput)), true

	case "Query.appResources":
		if e.complexity.Query.AppResources == nil {
			break
		}

		args, err := ec.field_Query_appResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppResources(childComplexity, args["appID"].(int), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppResOrder), args["where"].(*ent.AppResWhereInput)), true

	case "Query.appRoleAssignedToOrgs":
		if e.complexity.Query.AppRoleAssignedToOrgs == nil {
			break
		}

		args, err := ec.field_Query_appRoleAssignedToOrgs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppRoleAssignedToOrgs(childComplexity, args["roleID"].(int), args["where"].(*ent.OrgWhereInput)), true

	case "Query.apps":
		if e.complexity.Query.Apps == nil {
			break
		}

		args, err := ec.field_Query_apps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Apps(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppOrder), args["where"].(*ent.AppWhereInput)), true

	case "Query.checkPermission":
		if e.complexity.Query.CheckPermission == nil {
			break
		}

		args, err := ec.field_Query_checkPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckPermission(childComplexity, args["permission"].(string)), true

	case "Query.fileIdentities":
		if e.complexity.Query.FileIdentities == nil {
			break
		}

		args, err := ec.field_Query_fileIdentities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileIdentities(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.FileIdentityOrder), args["where"].(*ent.FileIdentityWhereInput)), true

	case "Query.fileIdentitiesForApp":
		if e.complexity.Query.FileIdentitiesForApp == nil {
			break
		}

		args, err := ec.field_Query_fileIdentitiesForApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileIdentitiesForApp(childComplexity, args["where"].(*ent.FileIdentityWhereInput)), true

	case "Query.fileIdentitiesForOrg":
		if e.complexity.Query.FileIdentitiesForOrg == nil {
			break
		}

		return e.complexity.Query.FileIdentitiesForOrg(childComplexity), true

	case "Query.fileIdentityAccessKeySecret":
		if e.complexity.Query.FileIdentityAccessKeySecret == nil {
			break
		}

		args, err := ec.field_Query_fileIdentityAccessKeySecret_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileIdentityAccessKeySecret(childComplexity, args["id"].(int)), true

	case "Query.fileSources":
		if e.complexity.Query.FileSources == nil {
			break
		}

		args, err := ec.field_Query_fileSources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FileSources(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.FileSourceOrder), args["where"].(*ent.FileSourceWhereInput)), true

	case "Query.globalID":
		if e.complexity.Query.GlobalID == nil {
			break
		}

		args, err := ec.field_Query_globalID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GlobalID(childComplexity, args["type"].(string), args["id"].(int)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Query.orgAppActions":
		if e.complexity.Query.OrgAppActions == nil {
			break
		}

		args, err := ec.field_Query_orgAppActions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgAppActions(childComplexity, args["appCode"].(string)), true

	case "Query.orgAppResources":
		if e.complexity.Query.OrgAppResources == nil {
			break
		}

		args, err := ec.field_Query_orgAppResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgAppResources(childComplexity, args["appID"].(int), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.AppResOrder), args["where"].(*ent.AppResWhereInput)), true

	case "Query.orgGroups":
		if e.complexity.Query.OrgGroups == nil {
			break
		}

		args, err := ec.field_Query_orgGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgGroups(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.OrgRoleOrder), args["where"].(*ent.OrgRoleWhereInput)), true

	case "Query.orgPolicyReferences":
		if e.complexity.Query.OrgPolicyReferences == nil {
			break
		}

		args, err := ec.field_Query_orgPolicyReferences_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgPolicyReferences(childComplexity, args["policyID"].(int), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.PermissionOrder), args["where"].(*ent.PermissionWhereInput)), true

	case "Query.orgRecycleUsers":
		if e.complexity.Query.OrgRecycleUsers == nil {
			break
		}

		args, err := ec.field_Query_orgRecycleUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgRecycleUsers(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "Query.orgRoleUsers":
		if e.complexity.Query.OrgRoleUsers == nil {
			break
		}

		args, err := ec.field_Query_orgRoleUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgRoleUsers(childComplexity, args["roleID"].(int), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "Query.orgRoles":
		if e.complexity.Query.OrgRoles == nil {
			break
		}

		args, err := ec.field_Query_orgRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgRoles(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.OrgRoleOrder), args["where"].(*ent.OrgRoleWhereInput)), true

	case "Query.orgUserPreference":
		if e.complexity.Query.OrgUserPreference == nil {
			break
		}

		return e.complexity.Query.OrgUserPreference(childComplexity), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		args, err := ec.field_Query_organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organizations(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.OrgOrder), args["where"].(*ent.OrgWhereInput)), true

	case "Query.userApps":
		if e.complexity.Query.UserApps == nil {
			break
		}

		return e.complexity.Query.UserApps(childComplexity), true

	case "Query.userExtendGroupPolicies":
		if e.complexity.Query.UserExtendGroupPolicies == nil {
			break
		}

		args, err := ec.field_Query_userExtendGroupPolicies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserExtendGroupPolicies(childComplexity, args["userID"].(int), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.PermissionOrder), args["where"].(*ent.PermissionWhereInput)), true

	case "Query.userGroups":
		if e.complexity.Query.UserGroups == nil {
			break
		}

		args, err := ec.field_Query_userGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserGroups(childComplexity, args["userID"].(int), args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.OrgRoleOrder), args["where"].(*ent.OrgRoleWhereInput)), true

	case "Query.userMenus":
		if e.complexity.Query.UserMenus == nil {
			break
		}

		args, err := ec.field_Query_userMenus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserMenus(childComplexity, args["appCode"].(string)), true

	case "Query.userPermissions":
		if e.complexity.Query.UserPermissions == nil {
			break
		}

		args, err := ec.field_Query_userPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserPermissions(childComplexity, args["where"].(*ent.AppActionWhereInput)), true

	case "Query.userRootOrgs":
		if e.complexity.Query.UserRootOrgs == nil {
			break
		}

		return e.complexity.Query.UserRootOrgs(childComplexity), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "User.avatar":
		if e.complexity.User.Avatar == nil {
			break
		}

		return e.complexity.User.Avatar(childComplexity), true

	case "User.comments":
		if e.complexity.User.Comments == nil {
			break
		}

		return e.complexity.User.Comments(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.createdBy":
		if e.complexity.User.CreatedBy == nil {
			break
		}

		return e.complexity.User.CreatedBy(childComplexity), true

	case "User.creationType":
		if e.complexity.User.CreationType == nil {
			break
		}

		return e.complexity.User.CreationType(childComplexity), true

	case "User.deletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.devices":
		if e.complexity.User.Devices == nil {
			break
		}

		return e.complexity.User.Devices(childComplexity), true

	case "User.displayName":
		if e.complexity.User.DisplayName == nil {
			break
		}

		return e.complexity.User.DisplayName(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.identities":
		if e.complexity.User.Identities == nil {
			break
		}

		return e.complexity.User.Identities(childComplexity), true

	case "User.isAllowRevokeRole":
		if e.complexity.User.IsAllowRevokeRole == nil {
			break
		}

		args, err := ec.field_User_isAllowRevokeRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.IsAllowRevokeRole(childComplexity, args["orgRoleID"].(int)), true

	case "User.isAssignOrgRole":
		if e.complexity.User.IsAssignOrgRole == nil {
			break
		}

		args, err := ec.field_User_isAssignOrgRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.IsAssignOrgRole(childComplexity, args["orgRoleID"].(int)), true

	case "User.loginProfile":
		if e.complexity.User.LoginProfile == nil {
			break
		}

		return e.complexity.User.LoginProfile(childComplexity), true

	case "User.mobile":
		if e.complexity.User.Mobile == nil {
			break
		}

		return e.complexity.User.Mobile(childComplexity), true

	case "User.oauthClients":
		if e.complexity.User.OauthClients == nil {
			break
		}

		return e.complexity.User.OauthClients(childComplexity), true

	case "User.permissions":
		if e.complexity.User.Permissions == nil {
			break
		}

		args, err := ec.field_User_permissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Permissions(childComplexity, args["after"].(*entgql.Cursor[int]), args["first"].(*int), args["before"].(*entgql.Cursor[int]), args["last"].(*int), args["orderBy"].(*ent.PermissionOrder), args["where"].(*ent.PermissionWhereInput)), true

	case "User.principalName":
		if e.complexity.User.PrincipalName == nil {
			break
		}

		return e.complexity.User.PrincipalName(childComplexity), true

	case "User.registerIP":
		if e.complexity.User.RegisterIP == nil {
			break
		}

		return e.complexity.User.RegisterIP(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.updatedBy":
		if e.complexity.User.UpdatedBy == nil {
			break
		}

		return e.complexity.User.UpdatedBy(childComplexity), true

	case "User.userType":
		if e.complexity.User.UserType == nil {
			break
		}

		return e.complexity.User.UserType(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserDevice.appVersion":
		if e.complexity.UserDevice.AppVersion == nil {
			break
		}

		return e.complexity.UserDevice.AppVersion(childComplexity), true

	case "UserDevice.comments":
		if e.complexity.UserDevice.Comments == nil {
			break
		}

		return e.complexity.UserDevice.Comments(childComplexity), true

	case "UserDevice.createdAt":
		if e.complexity.UserDevice.CreatedAt == nil {
			break
		}

		return e.complexity.UserDevice.CreatedAt(childComplexity), true

	case "UserDevice.createdBy":
		if e.complexity.UserDevice.CreatedBy == nil {
			break
		}

		return e.complexity.UserDevice.CreatedBy(childComplexity), true

	case "UserDevice.deviceModel":
		if e.complexity.UserDevice.DeviceModel == nil {
			break
		}

		return e.complexity.UserDevice.DeviceModel(childComplexity), true

	case "UserDevice.deviceName":
		if e.complexity.UserDevice.DeviceName == nil {
			break
		}

		return e.complexity.UserDevice.DeviceName(childComplexity), true

	case "UserDevice.deviceUID":
		if e.complexity.UserDevice.DeviceUID == nil {
			break
		}

		return e.complexity.UserDevice.DeviceUID(childComplexity), true

	case "UserDevice.id":
		if e.complexity.UserDevice.ID == nil {
			break
		}

		return e.complexity.UserDevice.ID(childComplexity), true

	case "UserDevice.status":
		if e.complexity.UserDevice.Status == nil {
			break
		}

		return e.complexity.UserDevice.Status(childComplexity), true

	case "UserDevice.systemName":
		if e.complexity.UserDevice.SystemName == nil {
			break
		}

		return e.complexity.UserDevice.SystemName(childComplexity), true

	case "UserDevice.systemVersion":
		if e.complexity.UserDevice.SystemVersion == nil {
			break
		}

		return e.complexity.UserDevice.SystemVersion(childComplexity), true

	case "UserDevice.updatedAt":
		if e.complexity.UserDevice.UpdatedAt == nil {
			break
		}

		return e.complexity.UserDevice.UpdatedAt(childComplexity), true

	case "UserDevice.updatedBy":
		if e.complexity.UserDevice.UpdatedBy == nil {
			break
		}

		return e.complexity.UserDevice.UpdatedBy(childComplexity), true

	case "UserDevice.user":
		if e.complexity.UserDevice.User == nil {
			break
		}

		return e.complexity.UserDevice.User(childComplexity), true

	case "UserDevice.userID":
		if e.complexity.UserDevice.UserID == nil {
			break
		}

		return e.complexity.UserDevice.UserID(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserIdentity.code":
		if e.complexity.UserIdentity.Code == nil {
			break
		}

		return e.complexity.UserIdentity.Code(childComplexity), true

	case "UserIdentity.codeExtend":
		if e.complexity.UserIdentity.CodeExtend == nil {
			break
		}

		return e.complexity.UserIdentity.CodeExtend(childComplexity), true

	case "UserIdentity.createdAt":
		if e.complexity.UserIdentity.CreatedAt == nil {
			break
		}

		return e.complexity.UserIdentity.CreatedAt(childComplexity), true

	case "UserIdentity.createdBy":
		if e.complexity.UserIdentity.CreatedBy == nil {
			break
		}

		return e.complexity.UserIdentity.CreatedBy(childComplexity), true

	case "UserIdentity.id":
		if e.complexity.UserIdentity.ID == nil {
			break
		}

		return e.complexity.UserIdentity.ID(childComplexity), true

	case "UserIdentity.kind":
		if e.complexity.UserIdentity.Kind == nil {
			break
		}

		return e.complexity.UserIdentity.Kind(childComplexity), true

	case "UserIdentity.status":
		if e.complexity.UserIdentity.Status == nil {
			break
		}

		return e.complexity.UserIdentity.Status(childComplexity), true

	case "UserIdentity.updatedAt":
		if e.complexity.UserIdentity.UpdatedAt == nil {
			break
		}

		return e.complexity.UserIdentity.UpdatedAt(childComplexity), true

	case "UserIdentity.updatedBy":
		if e.complexity.UserIdentity.UpdatedBy == nil {
			break
		}

		return e.complexity.UserIdentity.UpdatedBy(childComplexity), true

	case "UserIdentity.user":
		if e.complexity.UserIdentity.User == nil {
			break
		}

		return e.complexity.UserIdentity.User(childComplexity), true

	case "UserIdentity.userID":
		if e.complexity.UserIdentity.UserID == nil {
			break
		}

		return e.complexity.UserIdentity.UserID(childComplexity), true

	case "UserLoginProfile.canLogin":
		if e.complexity.UserLoginProfile.CanLogin == nil {
			break
		}

		return e.complexity.UserLoginProfile.CanLogin(childComplexity), true

	case "UserLoginProfile.createdAt":
		if e.complexity.UserLoginProfile.CreatedAt == nil {
			break
		}

		return e.complexity.UserLoginProfile.CreatedAt(childComplexity), true

	case "UserLoginProfile.createdBy":
		if e.complexity.UserLoginProfile.CreatedBy == nil {
			break
		}

		return e.complexity.UserLoginProfile.CreatedBy(childComplexity), true

	case "UserLoginProfile.id":
		if e.complexity.UserLoginProfile.ID == nil {
			break
		}

		return e.complexity.UserLoginProfile.ID(childComplexity), true

	case "UserLoginProfile.lastLoginAt":
		if e.complexity.UserLoginProfile.LastLoginAt == nil {
			break
		}

		return e.complexity.UserLoginProfile.LastLoginAt(childComplexity), true

	case "UserLoginProfile.lastLoginIP":
		if e.complexity.UserLoginProfile.LastLoginIP == nil {
			break
		}

		return e.complexity.UserLoginProfile.LastLoginIP(childComplexity), true

	case "UserLoginProfile.mfaEnabled":
		if e.complexity.UserLoginProfile.MfaEnabled == nil {
			break
		}

		return e.complexity.UserLoginProfile.MfaEnabled(childComplexity), true

	case "UserLoginProfile.mfaStatus":
		if e.complexity.UserLoginProfile.MfaStatus == nil {
			break
		}

		return e.complexity.UserLoginProfile.MfaStatus(childComplexity), true

	case "UserLoginProfile.passwordReset":
		if e.complexity.UserLoginProfile.PasswordReset == nil {
			break
		}

		return e.complexity.UserLoginProfile.PasswordReset(childComplexity), true

	case "UserLoginProfile.setKind":
		if e.complexity.UserLoginProfile.SetKind == nil {
			break
		}

		return e.complexity.UserLoginProfile.SetKind(childComplexity), true

	case "UserLoginProfile.updatedAt":
		if e.complexity.UserLoginProfile.UpdatedAt == nil {
			break
		}

		return e.complexity.UserLoginProfile.UpdatedAt(childComplexity), true

	case "UserLoginProfile.updatedBy":
		if e.complexity.UserLoginProfile.UpdatedBy == nil {
			break
		}

		return e.complexity.UserLoginProfile.UpdatedBy(childComplexity), true

	case "UserLoginProfile.user":
		if e.complexity.UserLoginProfile.User == nil {
			break
		}

		return e.complexity.UserLoginProfile.User(childComplexity), true

	case "UserLoginProfile.userID":
		if e.complexity.UserLoginProfile.UserID == nil {
			break
		}

		return e.complexity.UserLoginProfile.UserID(childComplexity), true

	case "UserLoginProfile.verifyDevice":
		if e.complexity.UserLoginProfile.VerifyDevice == nil {
			break
		}

		return e.complexity.UserLoginProfile.VerifyDevice(childComplexity), true

	case "UserPassword.createdAt":
		if e.complexity.UserPassword.CreatedAt == nil {
			break
		}

		return e.complexity.UserPassword.CreatedAt(childComplexity), true

	case "UserPassword.createdBy":
		if e.complexity.UserPassword.CreatedBy == nil {
			break
		}

		return e.complexity.UserPassword.CreatedBy(childComplexity), true

	case "UserPassword.id":
		if e.complexity.UserPassword.ID == nil {
			break
		}

		return e.complexity.UserPassword.ID(childComplexity), true

	case "UserPassword.scene":
		if e.complexity.UserPassword.Scene == nil {
			break
		}

		return e.complexity.UserPassword.Scene(childComplexity), true

	case "UserPassword.status":
		if e.complexity.UserPassword.Status == nil {
			break
		}

		return e.complexity.UserPassword.Status(childComplexity), true

	case "UserPassword.updatedAt":
		if e.complexity.UserPassword.UpdatedAt == nil {
			break
		}

		return e.complexity.UserPassword.UpdatedAt(childComplexity), true

	case "UserPassword.updatedBy":
		if e.complexity.UserPassword.UpdatedBy == nil {
			break
		}

		return e.complexity.UserPassword.UpdatedBy(childComplexity), true

	case "UserPassword.user":
		if e.complexity.UserPassword.User == nil {
			break
		}

		return e.complexity.UserPassword.User(childComplexity), true

	case "UserPassword.userID":
		if e.complexity.UserPassword.UserID == nil {
			break
		}

		return e.complexity.UserPassword.UserID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAppActionOrder,
		ec.unmarshalInputAppActionWhereInput,
		ec.unmarshalInputAppDictItemOrder,
		ec.unmarshalInputAppDictItemWhereInput,
		ec.unmarshalInputAppDictOrder,
		ec.unmarshalInputAppDictWhereInput,
		ec.unmarshalInputAppMenuOrder,
		ec.unmarshalInputAppMenuWhereInput,
		ec.unmarshalInputAppOrder,
		ec.unmarshalInputAppPolicyOrder,
		ec.unmarshalInputAppPolicyWhereInput,
		ec.unmarshalInputAppResOrder,
		ec.unmarshalInputAppResWhereInput,
		ec.unmarshalInputAppRoleOrder,
		ec.unmarshalInputAppRolePolicyOrder,
		ec.unmarshalInputAppRolePolicyWhereInput,
		ec.unmarshalInputAppRoleWhereInput,
		ec.unmarshalInputAppWhereInput,
		ec.unmarshalInputAssignRoleUserInput,
		ec.unmarshalInputCreateAppActionInput,
		ec.unmarshalInputCreateAppDictInput,
		ec.unmarshalInputCreateAppDictItemInput,
		ec.unmarshalInputCreateAppInput,
		ec.unmarshalInputCreateAppMenuInput,
		ec.unmarshalInputCreateAppPolicyInput,
		ec.unmarshalInputCreateAppResInput,
		ec.unmarshalInputCreateAppRoleInput,
		ec.unmarshalInputCreateFileIdentityInput,
		ec.unmarshalInputCreateFileSourceInput,
		ec.unmarshalInputCreateOauthClientInput,
		ec.unmarshalInputCreateOrgInput,
		ec.unmarshalInputCreateOrgPolicyInput,
		ec.unmarshalInputCreateOrgRoleInput,
		ec.unmarshalInputCreateOrgUserInput,
		ec.unmarshalInputCreateOrgUserPreferenceInput,
		ec.unmarshalInputCreatePermissionInput,
		ec.unmarshalInputCreateUserIdentityInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateUserLoginProfileInput,
		ec.unmarshalInputCreateUserPasswordInput,
		ec.unmarshalInputEnableDirectoryInput,
		ec.unmarshalInputFileIdentityOrder,
		ec.unmarshalInputFileIdentityWhereInput,
		ec.unmarshalInputFileSourceOrder,
		ec.unmarshalInputFileSourceWhereInput,
		ec.unmarshalInputGrantInput,
		ec.unmarshalInputOauthClientOrder,
		ec.unmarshalInputOauthClientWhereInput,
		ec.unmarshalInputOrgOrder,
		ec.unmarshalInputOrgPolicyOrder,
		ec.unmarshalInputOrgPolicyWhereInput,
		ec.unmarshalInputOrgRoleOrder,
		ec.unmarshalInputOrgRoleUserOrder,
		ec.unmarshalInputOrgRoleUserWhereInput,
		ec.unmarshalInputOrgRoleWhereInput,
		ec.unmarshalInputOrgUserOrder,
		ec.unmarshalInputOrgUserPreferenceInput,
		ec.unmarshalInputOrgUserPreferenceOrder,
		ec.unmarshalInputOrgUserPreferenceWhereInput,
		ec.unmarshalInputOrgUserWhereInput,
		ec.unmarshalInputOrgWhereInput,
		ec.unmarshalInputPermissionOrder,
		ec.unmarshalInputPermissionWhereInput,
		ec.unmarshalInputPolicyRuleInput,
		ec.unmarshalInputUpdateAppActionInput,
		ec.unmarshalInputUpdateAppDictInput,
		ec.unmarshalInputUpdateAppDictItemInput,
		ec.unmarshalInputUpdateAppInput,
		ec.unmarshalInputUpdateAppMenuInput,
		ec.unmarshalInputUpdateAppPolicyInput,
		ec.unmarshalInputUpdateAppResInput,
		ec.unmarshalInputUpdateAppRoleInput,
		ec.unmarshalInputUpdateFileIdentityInput,
		ec.unmarshalInputUpdateFileSourceInput,
		ec.unmarshalInputUpdateOauthClientInput,
		ec.unmarshalInputUpdateOrgInput,
		ec.unmarshalInputUpdateOrgPolicyInput,
		ec.unmarshalInputUpdateOrgRoleInput,
		ec.unmarshalInputUpdateOrgUserInput,
		ec.unmarshalInputUpdateOrgUserPreferenceInput,
		ec.unmarshalInputUpdatePermissionInput,
		ec.unmarshalInputUpdateUserIdentityInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserLoginProfileInput,
		ec.unmarshalInputUpdateUserPasswordInput,
		ec.unmarshalInputUserDeviceOrder,
		ec.unmarshalInputUserDeviceWhereInput,
		ec.unmarshalInputUserIdentityOrder,
		ec.unmarshalInputUserIdentityWhereInput,
		ec.unmarshalInputUserLoginProfileOrder,
		ec.unmarshalInputUserLoginProfileWhereInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserPasswordOrder,
		ec.unmarshalInputUserPasswordWhereInput,
		ec.unmarshalInputUserWhereInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type App implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  名称
  """
  name: String!
  """
  用于标识应用资源的唯一代码,尽量简短
  """
  code: String!
  """
  应用类型
  """
  kind: AppKind!
  """
  回调地址
  """
  redirectURI: String
  """
  应用ID
  """
  appKey: String
  """
  应用密钥
  """
  appSecret: String
  """
  权限范围
  """
  scopes: String
  """
  token有效期
  """
  tokenValidity: Int
  """
  refresh_token有效期
  """
  refreshTokenValidity: Int
  """
  应用图标地址
  """
  logo: String
  """
  备注
  """
  comments: String
  """
  状态
  """
  status: AppSimpleStatus
  menus(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AppMenus returned from the connection.
    """
    orderBy: AppMenuOrder

    """
    Filtering options for AppMenus returned from the connection.
    """
    where: AppMenuWhereInput
  ): AppMenuConnection!
  actions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AppActions returned from the connection.
    """
    orderBy: AppActionOrder

    """
    Filtering options for AppActions returned from the connection.
    """
    where: AppActionWhereInput
  ): AppActionConnection!
  resources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AppResSlice returned from the connection.
    """
    orderBy: AppResOrder

    """
    Filtering options for AppResSlice returned from the connection.
    """
    where: AppResWhereInput
  ): AppResConnection!
  """
  角色
  """
  roles: [AppRole!]
  """
  策略
  """
  policies: [AppPolicy!]
  orgs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Orgs returned from the connection.
    """
    orderBy: OrgOrder

    """
    Filtering options for Orgs returned from the connection.
    """
    where: OrgWhereInput
  ): OrgConnection!
  dicts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AppDicts returned from the connection.
    """
    orderBy: AppDictOrder

    """
    Filtering options for AppDicts returned from the connection.
    """
    where: AppDictWhereInput
  ): AppDictConnection!
}
type AppAction implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  所属应用
  """
  appID: ID
  """
  名称
  """
  name: String!
  """
  restful,graphql,rpc,function
  """
  kind: AppActionKind!
  """
  操作方法:读,写,列表
  """
  method: AppActionMethod!
  """
  备注
  """
  comments: String
  app: App
  """
  被引用的菜单项
  """
  menus: [AppMenu!]
}
"""
A connection to a list of items.
"""
type AppActionConnection {
  """
  A list of edges.
  """
  edges: [AppActionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AppActionEdge {
  """
  The item at the end of the edge.
  """
  node: AppAction
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AppActionKind is enum for the field kind
"""
enum AppActionKind @goModel(model: "github.com/woocoos/knockout/ent/appaction.Kind") {
  restful
  graphql
  rpc
  function
  route
}
"""
AppActionMethod is enum for the field method
"""
enum AppActionMethod @goModel(model: "github.com/woocoos/knockout/ent/appaction.Method") {
  read
  write
  list
}
"""
Ordering options for AppAction connections
"""
input AppActionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppActions.
  """
  field: AppActionOrderField!
}
"""
Properties by which AppAction connections can be ordered.
"""
enum AppActionOrderField {
  createdAt
}
"""
AppActionWhereInput is used for filtering AppAction objects.
Input was generated by ent.
"""
input AppActionWhereInput {
  not: AppActionWhereInput
  and: [AppActionWhereInput!]
  or: [AppActionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  kind field predicates
  """
  kind: AppActionKind
  kindNEQ: AppActionKind
  kindIn: [AppActionKind!]
  kindNotIn: [AppActionKind!]
  """
  method field predicates
  """
  method: AppActionMethod
  methodNEQ: AppActionMethod
  methodIn: [AppActionMethod!]
  methodNotIn: [AppActionMethod!]
  """
  app edge predicates
  """
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """
  menus edge predicates
  """
  hasMenus: Boolean
  hasMenusWith: [AppMenuWhereInput!]
}
"""
A connection to a list of items.
"""
type AppConnection {
  """
  A list of edges.
  """
  edges: [AppEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type AppDict implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  所属应用
  """
  appID: ID
  """
  用于标识应用资源的唯一代码,尽量简短
  """
  code: String!
  """
  名称
  """
  name: String!
  """
  备注
  """
  comments: String
  app: App
  items: [AppDictItem!]
}
"""
A connection to a list of items.
"""
type AppDictConnection {
  """
  A list of edges.
  """
  edges: [AppDictEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AppDictEdge {
  """
  The item at the end of the edge.
  """
  node: AppDict
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type AppDictItem implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  组织ID,空为全局字典
  """
  orgID: ID
  """
  所属字典
  """
  dictID: ID
  """
  关联代码,由app_code和dict_code组成
  """
  refCode: String!
  """
  字典值唯一编码,生效后不可修改.
  """
  code: String!
  """
  名称
  """
  name: String!
  """
  备注
  """
  comments: String
  displaySort: Int
  """
  状态
  """
  status: AppDictItemSimpleStatus
  dict: AppDict
  org: Org
}
"""
Ordering options for AppDictItem connections
"""
input AppDictItemOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppDictItems.
  """
  field: AppDictItemOrderField!
}
"""
Properties by which AppDictItem connections can be ordered.
"""
enum AppDictItemOrderField {
  createdAt
  displaySort
}
"""
AppDictItemSimpleStatus is enum for the field status
"""
enum AppDictItemSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
AppDictItemWhereInput is used for filtering AppDictItem objects.
Input was generated by ent.
"""
input AppDictItemWhereInput {
  not: AppDictItemWhereInput
  and: [AppDictItemWhereInput!]
  or: [AppDictItemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  org_id field predicates
  """
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDIsNil: Boolean
  orgIDNotNil: Boolean
  """
  dict_id field predicates
  """
  dictID: ID
  dictIDNEQ: ID
  dictIDIn: [ID!]
  dictIDNotIn: [ID!]
  dictIDIsNil: Boolean
  dictIDNotNil: Boolean
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: AppDictItemSimpleStatus
  statusNEQ: AppDictItemSimpleStatus
  statusIn: [AppDictItemSimpleStatus!]
  statusNotIn: [AppDictItemSimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  dict edge predicates
  """
  hasDict: Boolean
  hasDictWith: [AppDictWhereInput!]
  """
  org edge predicates
  """
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
}
"""
Ordering options for AppDict connections
"""
input AppDictOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppDicts.
  """
  field: AppDictOrderField!
}
"""
Properties by which AppDict connections can be ordered.
"""
enum AppDictOrderField {
  createdAt
}
"""
AppDictWhereInput is used for filtering AppDict objects.
Input was generated by ent.
"""
input AppDictWhereInput {
  not: AppDictWhereInput
  and: [AppDictWhereInput!]
  or: [AppDictWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  app edge predicates
  """
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [AppDictItemWhereInput!]
}
"""
An edge in a connection.
"""
type AppEdge {
  """
  The item at the end of the edge.
  """
  node: App
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AppKind is enum for the field kind
"""
enum AppKind @goModel(model: "github.com/woocoos/knockout/ent/app.Kind") {
  web
  native
  server
}
type AppMenu implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  所属应用
  """
  appID: ID
  """
  父级ID
  """
  parentID: Int!
  """
  目录,菜单项
  """
  kind: AppMenuKind!
  """
  菜单名称
  """
  name: String!
  """
  菜单图标
  """
  icon: String
  """
  菜单路由
  """
  route: String
  """
  操作ID
  """
  actionID: ID
  """
  备注
  """
  comments: String
  displaySort: Int
  app: App
  """
  需要权限控制时对应的权限
  """
  action: AppAction
}
"""
A connection to a list of items.
"""
type AppMenuConnection {
  """
  A list of edges.
  """
  edges: [AppMenuEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AppMenuEdge {
  """
  The item at the end of the edge.
  """
  node: AppMenu
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AppMenuKind is enum for the field kind
"""
enum AppMenuKind @goModel(model: "github.com/woocoos/knockout/ent/appmenu.Kind") {
  dir
  menu
}
"""
Ordering options for AppMenu connections
"""
input AppMenuOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppMenus.
  """
  field: AppMenuOrderField!
}
"""
Properties by which AppMenu connections can be ordered.
"""
enum AppMenuOrderField {
  createdAt
  displaySort
}
"""
AppMenuWhereInput is used for filtering AppMenu objects.
Input was generated by ent.
"""
input AppMenuWhereInput {
  not: AppMenuWhereInput
  and: [AppMenuWhereInput!]
  or: [AppMenuWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  """
  parent_id field predicates
  """
  parentID: Int
  parentIDNEQ: Int
  parentIDIn: [Int!]
  parentIDNotIn: [Int!]
  parentIDGT: Int
  parentIDGTE: Int
  parentIDLT: Int
  parentIDLTE: Int
  """
  kind field predicates
  """
  kind: AppMenuKind
  kindNEQ: AppMenuKind
  kindIn: [AppMenuKind!]
  kindNotIn: [AppMenuKind!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  icon field predicates
  """
  icon: String
  iconNEQ: String
  iconIn: [String!]
  iconNotIn: [String!]
  iconGT: String
  iconGTE: String
  iconLT: String
  iconLTE: String
  iconContains: String
  iconHasPrefix: String
  iconHasSuffix: String
  iconIsNil: Boolean
  iconNotNil: Boolean
  iconEqualFold: String
  iconContainsFold: String
  """
  route field predicates
  """
  route: String
  routeNEQ: String
  routeIn: [String!]
  routeNotIn: [String!]
  routeGT: String
  routeGTE: String
  routeLT: String
  routeLTE: String
  routeContains: String
  routeHasPrefix: String
  routeHasSuffix: String
  routeIsNil: Boolean
  routeNotNil: Boolean
  routeEqualFold: String
  routeContainsFold: String
  """
  app edge predicates
  """
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """
  action edge predicates
  """
  hasAction: Boolean
  hasActionWith: [AppActionWhereInput!]
}
"""
Ordering options for App connections
"""
input AppOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Apps.
  """
  field: AppOrderField!
}
"""
Properties by which App connections can be ordered.
"""
enum AppOrderField {
  createdAt
}
type AppPolicy implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  所属应用
  """
  appID: ID
  """
  策略名称
  """
  name: String!
  """
  描述
  """
  comments: String
  """
  策略规则
  """
  rules: [PolicyRule]!
  """
  标识是否自动授予到账户
  """
  autoGrant: Boolean!
  """
  状态
  """
  status: AppPolicySimpleStatus
  app: App
  roles: [AppRole!]
}
"""
A connection to a list of items.
"""
type AppPolicyConnection {
  """
  A list of edges.
  """
  edges: [AppPolicyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AppPolicyEdge {
  """
  The item at the end of the edge.
  """
  node: AppPolicy
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for AppPolicy connections
"""
input AppPolicyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppPolicies.
  """
  field: AppPolicyOrderField!
}
"""
Properties by which AppPolicy connections can be ordered.
"""
enum AppPolicyOrderField {
  createdAt
}
"""
AppPolicySimpleStatus is enum for the field status
"""
enum AppPolicySimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
AppPolicyWhereInput is used for filtering AppPolicy objects.
Input was generated by ent.
"""
input AppPolicyWhereInput {
  not: AppPolicyWhereInput
  and: [AppPolicyWhereInput!]
  or: [AppPolicyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  comments field predicates
  """
  comments: String
  commentsNEQ: String
  commentsIn: [String!]
  commentsNotIn: [String!]
  commentsGT: String
  commentsGTE: String
  commentsLT: String
  commentsLTE: String
  commentsContains: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIsNil: Boolean
  commentsNotNil: Boolean
  commentsEqualFold: String
  commentsContainsFold: String
  """
  auto_grant field predicates
  """
  autoGrant: Boolean
  autoGrantNEQ: Boolean
  """
  status field predicates
  """
  status: AppPolicySimpleStatus
  statusNEQ: AppPolicySimpleStatus
  statusIn: [AppPolicySimpleStatus!]
  statusNotIn: [AppPolicySimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  app edge predicates
  """
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [AppRoleWhereInput!]
  """
  app_role_policy edge predicates
  """
  hasAppRolePolicy: Boolean
  hasAppRolePolicyWith: [AppRolePolicyWhereInput!]
}
type AppRes implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  所属应用
  """
  appID: ID
  """
  资源名称
  """
  name: String!
  """
  资源类型名称,如数据库表名
  """
  typeName: String!
  """
  应用资源表达式
  """
  arnPattern: String!
  app: App
}
"""
A connection to a list of items.
"""
type AppResConnection {
  """
  A list of edges.
  """
  edges: [AppResEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AppResEdge {
  """
  The item at the end of the edge.
  """
  node: AppRes
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for AppRes connections
"""
input AppResOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppResSlice.
  """
  field: AppResOrderField!
}
"""
Properties by which AppRes connections can be ordered.
"""
enum AppResOrderField {
  createdAt
}
"""
AppResWhereInput is used for filtering AppRes objects.
Input was generated by ent.
"""
input AppResWhereInput {
  not: AppResWhereInput
  and: [AppResWhereInput!]
  or: [AppResWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  type_name field predicates
  """
  typeName: String
  typeNameNEQ: String
  typeNameIn: [String!]
  typeNameNotIn: [String!]
  typeNameGT: String
  typeNameGTE: String
  typeNameLT: String
  typeNameLTE: String
  typeNameContains: String
  typeNameHasPrefix: String
  typeNameHasSuffix: String
  typeNameEqualFold: String
  typeNameContainsFold: String
  """
  arn_pattern field predicates
  """
  arnPattern: String
  arnPatternNEQ: String
  arnPatternIn: [String!]
  arnPatternNotIn: [String!]
  arnPatternGT: String
  arnPatternGTE: String
  arnPatternLT: String
  arnPatternLTE: String
  arnPatternContains: String
  arnPatternHasPrefix: String
  arnPatternHasSuffix: String
  arnPatternEqualFold: String
  arnPatternContainsFold: String
  """
  app edge predicates
  """
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
}
type AppRole implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  所属应用
  """
  appID: ID
  """
  角色名称
  """
  name: String!
  """
  备注
  """
  comments: String
  """
  标识是否自动授予到账户
  """
  autoGrant: Boolean!
  """
  授权后是否可编辑
  """
  editable: Boolean!
  app: App
  """
  权限授权策略
  """
  policies: [AppPolicy!]
}
"""
Ordering options for AppRole connections
"""
input AppRoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppRoles.
  """
  field: AppRoleOrderField!
}
"""
Properties by which AppRole connections can be ordered.
"""
enum AppRoleOrderField {
  createdAt
}
"""
Ordering options for AppRolePolicy connections
"""
input AppRolePolicyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order AppRolePolicies.
  """
  field: AppRolePolicyOrderField!
}
"""
Properties by which AppRolePolicy connections can be ordered.
"""
enum AppRolePolicyOrderField {
  createdAt
}
"""
AppRolePolicyWhereInput is used for filtering AppRolePolicy objects.
Input was generated by ent.
"""
input AppRolePolicyWhereInput {
  not: AppRolePolicyWhereInput
  and: [AppRolePolicyWhereInput!]
  or: [AppRolePolicyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: Int
  appIDNEQ: Int
  appIDIn: [Int!]
  appIDNotIn: [Int!]
  appIDGT: Int
  appIDGTE: Int
  appIDLT: Int
  appIDLTE: Int
}
"""
AppRoleWhereInput is used for filtering AppRole objects.
Input was generated by ent.
"""
input AppRoleWhereInput {
  not: AppRoleWhereInput
  and: [AppRoleWhereInput!]
  or: [AppRoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: ID
  appIDNEQ: ID
  appIDIn: [ID!]
  appIDNotIn: [ID!]
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  auto_grant field predicates
  """
  autoGrant: Boolean
  autoGrantNEQ: Boolean
  """
  editable field predicates
  """
  editable: Boolean
  editableNEQ: Boolean
  """
  app edge predicates
  """
  hasApp: Boolean
  hasAppWith: [AppWhereInput!]
  """
  policies edge predicates
  """
  hasPolicies: Boolean
  hasPoliciesWith: [AppPolicyWhereInput!]
  """
  app_role_policy edge predicates
  """
  hasAppRolePolicy: Boolean
  hasAppRolePolicyWith: [AppRolePolicyWhereInput!]
}
"""
AppSimpleStatus is enum for the field status
"""
enum AppSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
AppWhereInput is used for filtering App objects.
Input was generated by ent.
"""
input AppWhereInput {
  not: AppWhereInput
  and: [AppWhereInput!]
  or: [AppWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  kind field predicates
  """
  kind: AppKind
  kindNEQ: AppKind
  kindIn: [AppKind!]
  kindNotIn: [AppKind!]
  """
  redirect_uri field predicates
  """
  redirectURI: String
  redirectURINEQ: String
  redirectURIIn: [String!]
  redirectURINotIn: [String!]
  redirectURIGT: String
  redirectURIGTE: String
  redirectURILT: String
  redirectURILTE: String
  redirectURIContains: String
  redirectURIHasPrefix: String
  redirectURIHasSuffix: String
  redirectURIIsNil: Boolean
  redirectURINotNil: Boolean
  redirectURIEqualFold: String
  redirectURIContainsFold: String
  """
  app_key field predicates
  """
  appKey: String
  appKeyNEQ: String
  appKeyIn: [String!]
  appKeyNotIn: [String!]
  appKeyGT: String
  appKeyGTE: String
  appKeyLT: String
  appKeyLTE: String
  appKeyContains: String
  appKeyHasPrefix: String
  appKeyHasSuffix: String
  appKeyIsNil: Boolean
  appKeyNotNil: Boolean
  appKeyEqualFold: String
  appKeyContainsFold: String
  """
  app_secret field predicates
  """
  appSecret: String
  appSecretNEQ: String
  appSecretIn: [String!]
  appSecretNotIn: [String!]
  appSecretGT: String
  appSecretGTE: String
  appSecretLT: String
  appSecretLTE: String
  appSecretContains: String
  appSecretHasPrefix: String
  appSecretHasSuffix: String
  appSecretIsNil: Boolean
  appSecretNotNil: Boolean
  appSecretEqualFold: String
  appSecretContainsFold: String
  """
  scopes field predicates
  """
  scopes: String
  scopesNEQ: String
  scopesIn: [String!]
  scopesNotIn: [String!]
  scopesGT: String
  scopesGTE: String
  scopesLT: String
  scopesLTE: String
  scopesContains: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesIsNil: Boolean
  scopesNotNil: Boolean
  scopesEqualFold: String
  scopesContainsFold: String
  """
  token_validity field predicates
  """
  tokenValidity: Int
  tokenValidityNEQ: Int
  tokenValidityIn: [Int!]
  tokenValidityNotIn: [Int!]
  tokenValidityGT: Int
  tokenValidityGTE: Int
  tokenValidityLT: Int
  tokenValidityLTE: Int
  tokenValidityIsNil: Boolean
  tokenValidityNotNil: Boolean
  """
  refresh_token_validity field predicates
  """
  refreshTokenValidity: Int
  refreshTokenValidityNEQ: Int
  refreshTokenValidityIn: [Int!]
  refreshTokenValidityNotIn: [Int!]
  refreshTokenValidityGT: Int
  refreshTokenValidityGTE: Int
  refreshTokenValidityLT: Int
  refreshTokenValidityLTE: Int
  refreshTokenValidityIsNil: Boolean
  refreshTokenValidityNotNil: Boolean
  """
  comments field predicates
  """
  comments: String
  commentsNEQ: String
  commentsIn: [String!]
  commentsNotIn: [String!]
  commentsGT: String
  commentsGTE: String
  commentsLT: String
  commentsLTE: String
  commentsContains: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIsNil: Boolean
  commentsNotNil: Boolean
  commentsEqualFold: String
  commentsContainsFold: String
  """
  status field predicates
  """
  status: AppSimpleStatus
  statusNEQ: AppSimpleStatus
  statusIn: [AppSimpleStatus!]
  statusNotIn: [AppSimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  menus edge predicates
  """
  hasMenus: Boolean
  hasMenusWith: [AppMenuWhereInput!]
  """
  actions edge predicates
  """
  hasActions: Boolean
  hasActionsWith: [AppActionWhereInput!]
  """
  resources edge predicates
  """
  hasResources: Boolean
  hasResourcesWith: [AppResWhereInput!]
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [AppRoleWhereInput!]
  """
  policies edge predicates
  """
  hasPolicies: Boolean
  hasPoliciesWith: [AppPolicyWhereInput!]
  """
  orgs edge predicates
  """
  hasOrgs: Boolean
  hasOrgsWith: [OrgWhereInput!]
  """
  dicts edge predicates
  """
  hasDicts: Boolean
  hasDictsWith: [AppDictWhereInput!]
}
"""
CreateAppActionInput is used for create AppAction object.
Input was generated by ent.
"""
input CreateAppActionInput {
  """
  名称
  """
  name: String!
  """
  restful,graphql,rpc,function
  """
  kind: AppActionKind!
  """
  操作方法:读,写,列表
  """
  method: AppActionMethod!
  """
  备注
  """
  comments: String
  appID: ID
  menuIDs: [ID!]
}
"""
CreateAppDictInput is used for create AppDict object.
Input was generated by ent.
"""
input CreateAppDictInput {
  """
  用于标识应用资源的唯一代码,尽量简短
  """
  code: String!
  """
  名称
  """
  name: String!
  """
  备注
  """
  comments: String
  appID: ID
  itemIDs: [ID!]
}
"""
CreateAppDictItemInput is used for create AppDictItem object.
Input was generated by ent.
"""
input CreateAppDictItemInput {
  """
  字典值唯一编码,生效后不可修改.
  """
  code: String!
  """
  名称
  """
  name: String!
  """
  备注
  """
  comments: String
  """
  状态
  """
  status: AppDictItemSimpleStatus
  dictID: ID
  orgID: ID
}
"""
CreateAppInput is used for create App object.
Input was generated by ent.
"""
input CreateAppInput {
  """
  名称
  """
  name: String!
  """
  用于标识应用资源的唯一代码,尽量简短
  """
  code: String!
  """
  应用类型
  """
  kind: AppKind!
  """
  回调地址
  """
  redirectURI: String
  """
  应用ID
  """
  appKey: String
  """
  应用密钥
  """
  appSecret: String
  """
  权限范围
  """
  scopes: String
  """
  token有效期
  """
  tokenValidity: Int
  """
  refresh_token有效期
  """
  refreshTokenValidity: Int
  """
  应用图标地址
  """
  logo: String
  """
  备注
  """
  comments: String
  """
  状态
  """
  status: AppSimpleStatus
  menuIDs: [ID!]
  actionIDs: [ID!]
  resourceIDs: [ID!]
  roleIDs: [ID!]
  policyIDs: [ID!]
  dictIDs: [ID!]
}
"""
CreateAppMenuInput is used for create AppMenu object.
Input was generated by ent.
"""
input CreateAppMenuInput {
  """
  父级ID
  """
  parentID: Int!
  """
  目录,菜单项
  """
  kind: AppMenuKind!
  """
  菜单名称
  """
  name: String!
  """
  菜单图标
  """
  icon: String
  """
  菜单路由
  """
  route: String
  """
  备注
  """
  comments: String
  appID: ID
  actionID: ID
}
"""
CreateAppPolicyInput is used for create AppPolicy object.
Input was generated by ent.
"""
input CreateAppPolicyInput {
  """
  策略名称
  """
  name: String!
  """
  描述
  """
  comments: String
  """
  策略规则
  """
  rules: [PolicyRuleInput]!
  """
  标识是否自动授予到账户
  """
  autoGrant: Boolean
  """
  状态
  """
  status: AppPolicySimpleStatus
  appID: ID
  roleIDs: [ID!]
}
"""
CreateAppResInput is used for create AppRes object.
Input was generated by ent.
"""
input CreateAppResInput {
  """
  资源名称
  """
  name: String!
  """
  资源类型名称,如数据库表名
  """
  typeName: String!
  """
  应用资源表达式
  """
  arnPattern: String!
  appID: ID
}
"""
CreateAppRoleInput is used for create AppRole object.
Input was generated by ent.
"""
input CreateAppRoleInput {
  """
  角色名称
  """
  name: String!
  """
  备注
  """
  comments: String
  """
  标识是否自动授予到账户
  """
  autoGrant: Boolean
  """
  授权后是否可编辑
  """
  editable: Boolean
  appID: ID
}
"""
CreateFileIdentityInput is used for create FileIdentity object.
Input was generated by ent.
"""
input CreateFileIdentityInput {
  """
  accesskey id
  """
  accessKeyID: String!
  """
  accesskey secret
  """
  accessKeySecret: String!
  """
  角色的资源名称(ARN)，用于STS
  """
  roleArn: String!
  """
  指定返回的STS令牌的权限的策略
  """
  policy: String
  """
  STS令牌的有效期，默认3600s
  """
  durationSeconds: Int
  """
  备注
  """
  comments: String
  sourceID: ID!
  orgID: ID!
}
"""
CreateFileSourceInput is used for create FileSource object.
Input was generated by ent.
"""
input CreateFileSourceInput {
  """
  文件来源
  """
  kind: FileSourceKind!
  """
  备注
  """
  comments: String
  """
  对外服务的访问域名
  """
  endpoint: String!
  """
  是否禁止修改endpoint，如果是自定义域名设为true
  """
  endpointImmutable: Boolean
  """
  sts服务的访问域名
  """
  stsEndpoint: String!
  """
  地域，数据存储的物理位置
  """
  region: String!
  """
  文件存储空间
  """
  bucket: String!
  """
  文件存储空间地址，用于匹配url
  """
  bucketURL: String!
  identityIDs: [ID!]
}
"""
CreateOauthClientInput is used for create OauthClient object.
Input was generated by ent.
"""
input CreateOauthClientInput {
  """
  名称
  """
  name: String!
  """
  授权类型
  """
  grantTypes: OauthClientGrantTypes!
  userID: ID!
}
"""
CreateOrgInput is used for create Org object.
Input was generated by ent.
"""
input CreateOrgInput {
  """
  默认域名
  """
  domain: String
  """
  组织名称
  """
  name: String!
  """
  简介
  """
  profile: String
  """
  状态
  """
  status: OrgSimpleStatus
  """
  国家或地区2字码
  """
  countryCode: String
  """
  时区
  """
  timezone: String
  parentID: ID!
  childIDs: [ID!]
  ownerID: ID
  userIDs: [ID!]
  rolesAndGroupIDs: [ID!]
  permissionIDs: [ID!]
  policyIDs: [ID!]
  appIDs: [ID!]
  fileIdentityIDs: [ID!]
}
"""
CreateOrgPolicyInput is used for create OrgPolicy object.
Input was generated by ent.
"""
input CreateOrgPolicyInput {
  """
  所属应用策略,如果是自定义应用策略,则为空
  """
  appPolicyID: Int
  """
  策略名称
  """
  name: String!
  """
  描述
  """
  comments: String
  """
  策略规则
  """
  rules: [PolicyRuleInput]!
  orgID: ID
  permissionIDs: [ID!]
}
"""
CreateOrgRoleInput is used for create OrgRole object.
Input was generated by ent.
"""
input CreateOrgRoleInput {
  """
  类型,group:组,role:角色
  """
  kind: OrgRoleKind!
  """
  名称
  """
  name: String!
  """
  备注
  """
  comments: String
  orgID: ID
}
"""
CreateOrgUserInput is used for create OrgUser object.
Input was generated by ent.
"""
input CreateOrgUserInput {
  """
  加入时间
  """
  joinedAt: Time
  """
  在组织内的显示名称
  """
  displayName: String!
  orgID: ID!
  userID: ID!
}
"""
CreateOrgUserPreferenceInput is used for create OrgUserPreference object.
Input was generated by ent.
"""
input CreateOrgUserPreferenceInput {
  """
  用户收藏菜单
  """
  menuFavorite: [ID!]
  """
  用户最近访问菜单
  """
  menuRecent: [ID!]
}
"""
CreatePermissionInput is used for create Permission object.
Input was generated by ent.
"""
input CreatePermissionInput {
  """
  授权类型:角色,用户
  """
  principalKind: PermissionPrincipalKind!
  """
  生效开始时间
  """
  startAt: Time
  """
  生效结束时间
  """
  endAt: Time
  orgID: ID!
  userID: ID
  roleID: ID
  orgPolicyID: ID!
}
"""
CreateUserIdentityInput is used for create UserIdentity object.
Input was generated by ent.
"""
input CreateUserIdentityInput {
  """
  身份标识类型 手机、邮箱、用户名、微信、qq
  """
  kind: UserIdentityKind!
  """
  用户名、邮箱、手机、unionid、qq
  """
  code: String
  """
  扩展标识码,比如微信的openID
  """
  codeExtend: String
  """
  状态,部分登陆方式需要验证通过才可启用
  """
  status: UserIdentitySimpleStatus
  userID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """
  登陆名称
  """
  principalName: String!
  """
  显示名
  """
  displayName: String!
  """
  邮箱
  """
  email: String
  """
  手机
  """
  mobile: String
  """
  状态
  """
  status: UserSimpleStatus
  """
  备注
  """
  comments: String
  """
  头像地址
  """
  avatar: String
  identityIDs: [ID!]
  loginProfileID: ID
  passwordIDs: [ID!]
  deviceIDs: [ID!]
  oauthClientIDs: [ID!]
}
"""
CreateUserLoginProfileInput is used for create UserLoginProfile object.
Input was generated by ent.
"""
input CreateUserLoginProfileInput {
  """
  是否允许使用密码登陆控制台
  """
  canLogin: Boolean
  """
  设置密码:keep-保持不变,customer-客户自行设置,auto-自动生成
  """
  setKind: UserLoginProfileSetKind!
  """
  下次登陆时需要重置密码
  """
  passwordReset: Boolean
  """
  是否开启设备认证
  """
  verifyDevice: Boolean!
  userID: ID
}
"""
CreateUserPasswordInput is used for create UserPassword object.
Input was generated by ent.
"""
input CreateUserPasswordInput {
  """
  场景: login 普通登陆
  """
  scene: UserPasswordScene!
  """
  密码
  """
  password: String
  """
  生效状态,默认生效
  """
  status: UserPasswordSimpleStatus
  userID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type FileIdentity implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  tenantID: ID!
  """
  accesskey id
  """
  accessKeyID: String!
  """
  文件来源ID
  """
  fileSourceID: ID!
  """
  角色的资源名称(ARN)，用于STS
  """
  roleArn: String!
  """
  指定返回的STS令牌的权限的策略
  """
  policy: String
  """
  STS令牌的有效期，默认3600s
  """
  durationSeconds: Int
  """
  租户默认的凭证
  """
  isDefault: Boolean!
  """
  备注
  """
  comments: String
  source: FileSource!
  org: Org!
}
"""
A connection to a list of items.
"""
type FileIdentityConnection {
  """
  A list of edges.
  """
  edges: [FileIdentityEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileIdentityEdge {
  """
  The item at the end of the edge.
  """
  node: FileIdentity
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for FileIdentity connections
"""
input FileIdentityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order FileIdentities.
  """
  field: FileIdentityOrderField!
}
"""
Properties by which FileIdentity connections can be ordered.
"""
enum FileIdentityOrderField {
  createdAt
}
"""
FileIdentityWhereInput is used for filtering FileIdentity objects.
Input was generated by ent.
"""
input FileIdentityWhereInput {
  not: FileIdentityWhereInput
  and: [FileIdentityWhereInput!]
  or: [FileIdentityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  """
  access_key_id field predicates
  """
  accessKeyID: String
  accessKeyIDNEQ: String
  accessKeyIDIn: [String!]
  accessKeyIDNotIn: [String!]
  accessKeyIDGT: String
  accessKeyIDGTE: String
  accessKeyIDLT: String
  accessKeyIDLTE: String
  accessKeyIDContains: String
  accessKeyIDHasPrefix: String
  accessKeyIDHasSuffix: String
  accessKeyIDEqualFold: String
  accessKeyIDContainsFold: String
  """
  file_source_id field predicates
  """
  fileSourceID: ID
  fileSourceIDNEQ: ID
  fileSourceIDIn: [ID!]
  fileSourceIDNotIn: [ID!]
  """
  role_arn field predicates
  """
  roleArn: String
  roleArnNEQ: String
  roleArnIn: [String!]
  roleArnNotIn: [String!]
  roleArnGT: String
  roleArnGTE: String
  roleArnLT: String
  roleArnLTE: String
  roleArnContains: String
  roleArnHasPrefix: String
  roleArnHasSuffix: String
  roleArnEqualFold: String
  roleArnContainsFold: String
  """
  policy field predicates
  """
  policy: String
  policyNEQ: String
  policyIn: [String!]
  policyNotIn: [String!]
  policyGT: String
  policyGTE: String
  policyLT: String
  policyLTE: String
  policyContains: String
  policyHasPrefix: String
  policyHasSuffix: String
  policyIsNil: Boolean
  policyNotNil: Boolean
  policyEqualFold: String
  policyContainsFold: String
  """
  duration_seconds field predicates
  """
  durationSeconds: Int
  durationSecondsNEQ: Int
  durationSecondsIn: [Int!]
  durationSecondsNotIn: [Int!]
  durationSecondsGT: Int
  durationSecondsGTE: Int
  durationSecondsLT: Int
  durationSecondsLTE: Int
  durationSecondsIsNil: Boolean
  durationSecondsNotNil: Boolean
  """
  is_default field predicates
  """
  isDefault: Boolean
  isDefaultNEQ: Boolean
  """
  source edge predicates
  """
  hasSource: Boolean
  hasSourceWith: [FileSourceWhereInput!]
  """
  org edge predicates
  """
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
}
type FileSource implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  文件来源
  """
  kind: FileSourceKind!
  """
  备注
  """
  comments: String
  """
  对外服务的访问域名
  """
  endpoint: String!
  """
  是否禁止修改endpoint，如果是自定义域名设为true
  """
  endpointImmutable: Boolean!
  """
  sts服务的访问域名
  """
  stsEndpoint: String!
  """
  地域，数据存储的物理位置
  """
  region: String!
  """
  文件存储空间
  """
  bucket: String!
  """
  文件存储空间地址，用于匹配url
  """
  bucketURL: String!
}
"""
A connection to a list of items.
"""
type FileSourceConnection {
  """
  A list of edges.
  """
  edges: [FileSourceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileSourceEdge {
  """
  The item at the end of the edge.
  """
  node: FileSource
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
FileSourceKind is enum for the field kind
"""
enum FileSourceKind @goModel(model: "github.com/woocoos/knockout/ent/filesource.Kind") {
  minio
  aliOSS
  awsS3
}
"""
Ordering options for FileSource connections
"""
input FileSourceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order FileSources.
  """
  field: FileSourceOrderField!
}
"""
Properties by which FileSource connections can be ordered.
"""
enum FileSourceOrderField {
  createdAt
}
"""
FileSourceWhereInput is used for filtering FileSource objects.
Input was generated by ent.
"""
input FileSourceWhereInput {
  not: FileSourceWhereInput
  and: [FileSourceWhereInput!]
  or: [FileSourceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  kind field predicates
  """
  kind: FileSourceKind
  kindNEQ: FileSourceKind
  kindIn: [FileSourceKind!]
  kindNotIn: [FileSourceKind!]
  """
  endpoint field predicates
  """
  endpoint: String
  endpointNEQ: String
  endpointIn: [String!]
  endpointNotIn: [String!]
  endpointGT: String
  endpointGTE: String
  endpointLT: String
  endpointLTE: String
  endpointContains: String
  endpointHasPrefix: String
  endpointHasSuffix: String
  endpointEqualFold: String
  endpointContainsFold: String
  """
  endpoint_immutable field predicates
  """
  endpointImmutable: Boolean
  endpointImmutableNEQ: Boolean
  """
  sts_endpoint field predicates
  """
  stsEndpoint: String
  stsEndpointNEQ: String
  stsEndpointIn: [String!]
  stsEndpointNotIn: [String!]
  stsEndpointGT: String
  stsEndpointGTE: String
  stsEndpointLT: String
  stsEndpointLTE: String
  stsEndpointContains: String
  stsEndpointHasPrefix: String
  stsEndpointHasSuffix: String
  stsEndpointEqualFold: String
  stsEndpointContainsFold: String
  """
  region field predicates
  """
  region: String
  regionNEQ: String
  regionIn: [String!]
  regionNotIn: [String!]
  regionGT: String
  regionGTE: String
  regionLT: String
  regionLTE: String
  regionContains: String
  regionHasPrefix: String
  regionHasSuffix: String
  regionEqualFold: String
  regionContainsFold: String
  """
  bucket field predicates
  """
  bucket: String
  bucketNEQ: String
  bucketIn: [String!]
  bucketNotIn: [String!]
  bucketGT: String
  bucketGTE: String
  bucketLT: String
  bucketLTE: String
  bucketContains: String
  bucketHasPrefix: String
  bucketHasSuffix: String
  bucketEqualFold: String
  bucketContainsFold: String
  """
  bucket_url field predicates
  """
  bucketURL: String
  bucketURLNEQ: String
  bucketURLIn: [String!]
  bucketURLNotIn: [String!]
  bucketURLGT: String
  bucketURLGTE: String
  bucketURLLT: String
  bucketURLLTE: String
  bucketURLContains: String
  bucketURLHasPrefix: String
  bucketURLHasSuffix: String
  bucketURLEqualFold: String
  bucketURLContainsFold: String
  """
  identities edge predicates
  """
  hasIdentities: Boolean
  hasIdentitiesWith: [FileIdentityWhereInput!]
}
"""
An object with a Global ID,for using in Noder interface.
"""
scalar GID
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/woocoos/knockout/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type OauthClient implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  名称
  """
  name: String!
  """
  id
  """
  clientID: String!
  """
  密钥
  """
  clientSecret: String!
  """
  授权类型
  """
  grantTypes: OauthClientGrantTypes!
  """
  关联用户id
  """
  userID: ID!
  """
  最后认证时间
  """
  lastAuthAt: Time
  """
  状态
  """
  status: OauthClientSimpleStatus!
  user: User!
}
"""
OauthClientGrantTypes is enum for the field grant_types
"""
enum OauthClientGrantTypes @goModel(model: "github.com/woocoos/knockout/ent/oauthclient.GrantTypes") {
  client_credentials
}
"""
Ordering options for OauthClient connections
"""
input OauthClientOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OauthClients.
  """
  field: OauthClientOrderField!
}
"""
Properties by which OauthClient connections can be ordered.
"""
enum OauthClientOrderField {
  createdAt
}
"""
OauthClientSimpleStatus is enum for the field status
"""
enum OauthClientSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
OauthClientWhereInput is used for filtering OauthClient objects.
Input was generated by ent.
"""
input OauthClientWhereInput {
  not: OauthClientWhereInput
  and: [OauthClientWhereInput!]
  or: [OauthClientWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  grant_types field predicates
  """
  grantTypes: OauthClientGrantTypes
  grantTypesNEQ: OauthClientGrantTypes
  grantTypesIn: [OauthClientGrantTypes!]
  grantTypesNotIn: [OauthClientGrantTypes!]
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  status field predicates
  """
  status: OauthClientSimpleStatus
  statusNEQ: OauthClientSimpleStatus
  statusIn: [OauthClientSimpleStatus!]
  statusNotIn: [OauthClientSimpleStatus!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
type Org implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  """
  管理账户ID,如果设置则该组织将升级为根组织
  """
  ownerID: ID
  """
  分类: 根节点,组织节点
  """
  kind: OrgKind!
  """
  父级ID,0为根组织.
  """
  parentID: ID!
  """
  默认域名
  """
  domain: String
  """
  系统代码
  """
  code: String
  """
  组织名称
  """
  name: String!
  """
  简介
  """
  profile: String
  """
  状态
  """
  status: OrgSimpleStatus
  """
  路径编码
  """
  path: String
  displaySort: Int
  """
  国家或地区2字码
  """
  countryCode: String
  """
  时区
  """
  timezone: String
  parent: Org!
  children: [Org!]
  """
  管理账户
  """
  owner: User
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  permissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Permissions returned from the connection.
    """
    orderBy: PermissionOrder

    """
    Filtering options for Permissions returned from the connection.
    """
    where: PermissionWhereInput
  ): PermissionConnection!
  policies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OrgPolicies returned from the connection.
    """
    orderBy: OrgPolicyOrder

    """
    Filtering options for OrgPolicies returned from the connection.
    """
    where: OrgPolicyWhereInput
  ): OrgPolicyConnection!
  apps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Apps returned from the connection.
    """
    orderBy: AppOrder

    """
    Filtering options for Apps returned from the connection.
    """
    where: AppWhereInput
  ): AppConnection!
  """
  组织下文件凭证
  """
  fileIdentities: [FileIdentity!]
}
"""
A connection to a list of items.
"""
type OrgConnection {
  """
  A list of edges.
  """
  edges: [OrgEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgEdge {
  """
  The item at the end of the edge.
  """
  node: Org
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrgKind is enum for the field kind
"""
enum OrgKind @goModel(model: "github.com/woocoos/knockout/ent/org.Kind") {
  root
  org
}
"""
Ordering options for Org connections
"""
input OrgOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Orgs.
  """
  field: OrgOrderField!
}
"""
Properties by which Org connections can be ordered.
"""
enum OrgOrderField {
  createdAt
  displaySort
}
type OrgPolicy implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  组织ID
  """
  orgID: ID
  """
  所属应用策略,如果是自定义应用策略,则为空
  """
  appPolicyID: Int
  """
  策略名称
  """
  name: String!
  """
  描述
  """
  comments: String
  """
  策略规则
  """
  rules: [PolicyRule]!
  org: Org
  permissions: [Permission!]
}
"""
A connection to a list of items.
"""
type OrgPolicyConnection {
  """
  A list of edges.
  """
  edges: [OrgPolicyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgPolicyEdge {
  """
  The item at the end of the edge.
  """
  node: OrgPolicy
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for OrgPolicy connections
"""
input OrgPolicyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgPolicies.
  """
  field: OrgPolicyOrderField!
}
"""
Properties by which OrgPolicy connections can be ordered.
"""
enum OrgPolicyOrderField {
  createdAt
}
"""
OrgPolicyWhereInput is used for filtering OrgPolicy objects.
Input was generated by ent.
"""
input OrgPolicyWhereInput {
  not: OrgPolicyWhereInput
  and: [OrgPolicyWhereInput!]
  or: [OrgPolicyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  org_id field predicates
  """
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDIsNil: Boolean
  orgIDNotNil: Boolean
  """
  app_policy_id field predicates
  """
  appPolicyID: Int
  appPolicyIDNEQ: Int
  appPolicyIDIn: [Int!]
  appPolicyIDNotIn: [Int!]
  appPolicyIDGT: Int
  appPolicyIDGTE: Int
  appPolicyIDLT: Int
  appPolicyIDLTE: Int
  appPolicyIDIsNil: Boolean
  appPolicyIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  comments field predicates
  """
  comments: String
  commentsNEQ: String
  commentsIn: [String!]
  commentsNotIn: [String!]
  commentsGT: String
  commentsGTE: String
  commentsLT: String
  commentsLTE: String
  commentsContains: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIsNil: Boolean
  commentsNotNil: Boolean
  commentsEqualFold: String
  commentsContainsFold: String
  """
  org edge predicates
  """
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
}
type OrgRole implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  组织ID
  """
  orgID: ID
  """
  类型,group:组,role:角色
  """
  kind: OrgRoleKind!
  """
  名称
  """
  name: String!
  """
  备注
  """
  comments: String
}
"""
A connection to a list of items.
"""
type OrgRoleConnection {
  """
  A list of edges.
  """
  edges: [OrgRoleEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgRoleEdge {
  """
  The item at the end of the edge.
  """
  node: OrgRole
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrgRoleKind is enum for the field kind
"""
enum OrgRoleKind @goModel(model: "github.com/woocoos/knockout/ent/orgrole.Kind") {
  group
  role
}
"""
Ordering options for OrgRole connections
"""
input OrgRoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgRoles.
  """
  field: OrgRoleOrderField!
}
"""
Properties by which OrgRole connections can be ordered.
"""
enum OrgRoleOrderField {
  createdAt
}
"""
Ordering options for OrgRoleUser connections
"""
input OrgRoleUserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgRoleUsers.
  """
  field: OrgRoleUserOrderField!
}
"""
Properties by which OrgRoleUser connections can be ordered.
"""
enum OrgRoleUserOrderField {
  createdAt
}
"""
OrgRoleUserWhereInput is used for filtering OrgRoleUser objects.
Input was generated by ent.
"""
input OrgRoleUserWhereInput {
  not: OrgRoleUserWhereInput
  and: [OrgRoleUserWhereInput!]
  or: [OrgRoleUserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
}
"""
OrgRoleWhereInput is used for filtering OrgRole objects.
Input was generated by ent.
"""
input OrgRoleWhereInput {
  not: OrgRoleWhereInput
  and: [OrgRoleWhereInput!]
  or: [OrgRoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  org_id field predicates
  """
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  orgIDIsNil: Boolean
  orgIDNotNil: Boolean
  """
  kind field predicates
  """
  kind: OrgRoleKind
  kindNEQ: OrgRoleKind
  kindIn: [OrgRoleKind!]
  kindNotIn: [OrgRoleKind!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  comments field predicates
  """
  comments: String
  commentsNEQ: String
  commentsIn: [String!]
  commentsNotIn: [String!]
  commentsGT: String
  commentsGTE: String
  commentsLT: String
  commentsLTE: String
  commentsContains: String
  commentsHasPrefix: String
  commentsHasSuffix: String
  commentsIsNil: Boolean
  commentsNotNil: Boolean
  commentsEqualFold: String
  commentsContainsFold: String
  """
  org edge predicates
  """
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
}
"""
OrgSimpleStatus is enum for the field status
"""
enum OrgSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
Ordering options for OrgUser connections
"""
input OrgUserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgUsers.
  """
  field: OrgUserOrderField!
}
"""
Properties by which OrgUser connections can be ordered.
"""
enum OrgUserOrderField {
  createdAt
}
type OrgUserPreference implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  用户id
  """
  userID: ID!
  """
  组织ID
  """
  orgID: ID!
  """
  用户收藏菜单
  """
  menuFavorite: [ID!]
  """
  用户最近访问菜单
  """
  menuRecent: [ID!]
  user: User!
  org: Org!
}
"""
A connection to a list of items.
"""
type OrgUserPreferenceConnection {
  """
  A list of edges.
  """
  edges: [OrgUserPreferenceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrgUserPreferenceEdge {
  """
  The item at the end of the edge.
  """
  node: OrgUserPreference
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for OrgUserPreference connections
"""
input OrgUserPreferenceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OrgUserPreferences.
  """
  field: OrgUserPreferenceOrderField!
}
"""
Properties by which OrgUserPreference connections can be ordered.
"""
enum OrgUserPreferenceOrderField {
  createdAt
}
"""
OrgUserPreferenceWhereInput is used for filtering OrgUserPreference objects.
Input was generated by ent.
"""
input OrgUserPreferenceWhereInput {
  not: OrgUserPreferenceWhereInput
  and: [OrgUserPreferenceWhereInput!]
  or: [OrgUserPreferenceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  org_id field predicates
  """
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  org edge predicates
  """
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
}
"""
OrgUserWhereInput is used for filtering OrgUser objects.
Input was generated by ent.
"""
input OrgUserWhereInput {
  not: OrgUserWhereInput
  and: [OrgUserWhereInput!]
  or: [OrgUserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  joined_at field predicates
  """
  joinedAt: Time
  joinedAtNEQ: Time
  joinedAtIn: [Time!]
  joinedAtNotIn: [Time!]
  joinedAtGT: Time
  joinedAtGTE: Time
  joinedAtLT: Time
  joinedAtLTE: Time
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
}
"""
OrgWhereInput is used for filtering Org objects.
Input was generated by ent.
"""
input OrgWhereInput {
  not: OrgWhereInput
  and: [OrgWhereInput!]
  or: [OrgWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  """
  kind field predicates
  """
  kind: OrgKind
  kindNEQ: OrgKind
  kindIn: [OrgKind!]
  kindNotIn: [OrgKind!]
  """
  parent_id field predicates
  """
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  """
  domain field predicates
  """
  domain: String
  domainNEQ: String
  domainIn: [String!]
  domainNotIn: [String!]
  domainGT: String
  domainGTE: String
  domainLT: String
  domainLTE: String
  domainContains: String
  domainHasPrefix: String
  domainHasSuffix: String
  domainIsNil: Boolean
  domainNotNil: Boolean
  domainEqualFold: String
  domainContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIsNil: Boolean
  codeNotNil: Boolean
  codeEqualFold: String
  codeContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: OrgSimpleStatus
  statusNEQ: OrgSimpleStatus
  statusIn: [OrgSimpleStatus!]
  statusNotIn: [OrgSimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathIsNil: Boolean
  pathNotNil: Boolean
  pathEqualFold: String
  pathContainsFold: String
  """
  country_code field predicates
  """
  countryCode: String
  countryCodeNEQ: String
  countryCodeIn: [String!]
  countryCodeNotIn: [String!]
  countryCodeGT: String
  countryCodeGTE: String
  countryCodeLT: String
  countryCodeLTE: String
  countryCodeContains: String
  countryCodeHasPrefix: String
  countryCodeHasSuffix: String
  countryCodeIsNil: Boolean
  countryCodeNotNil: Boolean
  countryCodeEqualFold: String
  countryCodeContainsFold: String
  """
  timezone field predicates
  """
  timezone: String
  timezoneNEQ: String
  timezoneIn: [String!]
  timezoneNotIn: [String!]
  timezoneGT: String
  timezoneGTE: String
  timezoneLT: String
  timezoneLTE: String
  timezoneContains: String
  timezoneHasPrefix: String
  timezoneHasSuffix: String
  timezoneIsNil: Boolean
  timezoneNotNil: Boolean
  timezoneEqualFold: String
  timezoneContainsFold: String
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [OrgWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [OrgWhereInput!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  roles_and_groups edge predicates
  """
  hasRolesAndGroups: Boolean
  hasRolesAndGroupsWith: [OrgRoleWhereInput!]
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """
  policies edge predicates
  """
  hasPolicies: Boolean
  hasPoliciesWith: [OrgPolicyWhereInput!]
  """
  apps edge predicates
  """
  hasApps: Boolean
  hasAppsWith: [AppWhereInput!]
  """
  file_identities edge predicates
  """
  hasFileIdentities: Boolean
  hasFileIdentitiesWith: [FileIdentityWhereInput!]
  """
  org_user edge predicates
  """
  hasOrgUser: Boolean
  hasOrgUserWith: [OrgUserWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  """
  授权的域根组织
  """
  orgID: ID!
  """
  授权类型:角色,用户
  """
  principalKind: PermissionPrincipalKind!
  """
  授权类型为用户的ID
  """
  userID: ID
  """
  授权类型为角色或用户组的ID
  """
  roleID: ID
  """
  策略
  """
  orgPolicyID: ID!
  """
  生效开始时间
  """
  startAt: Time
  """
  生效结束时间
  """
  endAt: Time
  """
  状态
  """
  status: PermissionSimpleStatus
  org: Org!
  user: User
  role: OrgRole
  orgPolicy: OrgPolicy!
}
"""
A connection to a list of items.
"""
type PermissionConnection {
  """
  A list of edges.
  """
  edges: [PermissionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PermissionEdge {
  """
  The item at the end of the edge.
  """
  node: Permission
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Permission connections
"""
input PermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Permissions.
  """
  field: PermissionOrderField!
}
"""
Properties by which Permission connections can be ordered.
"""
enum PermissionOrderField {
  createdAt
}
"""
PermissionPrincipalKind is enum for the field principal_kind
"""
enum PermissionPrincipalKind @goModel(model: "github.com/woocoos/knockout/ent/permission.PrincipalKind") {
  user
  role
}
"""
PermissionSimpleStatus is enum for the field status
"""
enum PermissionSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  not: PermissionWhereInput
  and: [PermissionWhereInput!]
  or: [PermissionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  org_id field predicates
  """
  orgID: ID
  orgIDNEQ: ID
  orgIDIn: [ID!]
  orgIDNotIn: [ID!]
  """
  principal_kind field predicates
  """
  principalKind: PermissionPrincipalKind
  principalKindNEQ: PermissionPrincipalKind
  principalKindIn: [PermissionPrincipalKind!]
  principalKindNotIn: [PermissionPrincipalKind!]
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """
  role_id field predicates
  """
  roleID: ID
  roleIDNEQ: ID
  roleIDIn: [ID!]
  roleIDNotIn: [ID!]
  roleIDIsNil: Boolean
  roleIDNotNil: Boolean
  """
  org_policy_id field predicates
  """
  orgPolicyID: ID
  orgPolicyIDNEQ: ID
  orgPolicyIDIn: [ID!]
  orgPolicyIDNotIn: [ID!]
  """
  start_at field predicates
  """
  startAt: Time
  startAtNEQ: Time
  startAtIn: [Time!]
  startAtNotIn: [Time!]
  startAtGT: Time
  startAtGTE: Time
  startAtLT: Time
  startAtLTE: Time
  startAtIsNil: Boolean
  startAtNotNil: Boolean
  """
  end_at field predicates
  """
  endAt: Time
  endAtNEQ: Time
  endAtIn: [Time!]
  endAtNotIn: [Time!]
  endAtGT: Time
  endAtGTE: Time
  endAtLT: Time
  endAtLTE: Time
  endAtIsNil: Boolean
  endAtNotNil: Boolean
  """
  status field predicates
  """
  status: PermissionSimpleStatus
  statusNEQ: PermissionSimpleStatus
  statusIn: [PermissionSimpleStatus!]
  statusNotIn: [PermissionSimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  org edge predicates
  """
  hasOrg: Boolean
  hasOrgWith: [OrgWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  role edge predicates
  """
  hasRole: Boolean
  hasRoleWith: [OrgRoleWhereInput!]
  """
  org_policy edge predicates
  """
  hasOrgPolicy: Boolean
  hasOrgPolicyWith: [OrgPolicyWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: GID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [GID!]!
  ): [Node]!
  """
  公开应用查询
  """
  apps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Apps returned from the connection.
    """
    orderBy: AppOrder

    """
    Filtering options for Apps returned from the connection.
    """
    where: AppWhereInput
  ): AppConnection!
  """
  数据字典查询
  """
  appDicts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for AppDicts returned from the connection.
    """
    orderBy: AppDictOrder

    """
    Filtering options for AppDicts returned from the connection.
    """
    where: AppDictWhereInput
  ): AppDictConnection!
  """
  文件凭证
  """
  fileIdentities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for FileIdentities returned from the connection.
    """
    orderBy: FileIdentityOrder

    """
    Filtering options for FileIdentities returned from the connection.
    """
    where: FileIdentityWhereInput
  ): FileIdentityConnection!
  """
  文件来源
  """
  fileSources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for FileSources returned from the connection.
    """
    orderBy: FileSourceOrder

    """
    Filtering options for FileSources returned from the connection.
    """
    where: FileSourceWhereInput
  ): FileSourceConnection!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Orgs returned from the connection.
    """
    orderBy: OrgOrder

    """
    Filtering options for Orgs returned from the connection.
    """
    where: OrgWhereInput
  ): OrgConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateAppActionInput is used for update AppAction object.
Input was generated by ent.
"""
input UpdateAppActionInput {
  """
  名称
  """
  name: String
  """
  restful,graphql,rpc,function
  """
  kind: AppActionKind
  """
  操作方法:读,写,列表
  """
  method: AppActionMethod
  """
  备注
  """
  comments: String
  clearComments: Boolean
  addMenuIDs: [ID!]
  removeMenuIDs: [ID!]
  clearMenus: Boolean
}
"""
UpdateAppDictInput is used for update AppDict object.
Input was generated by ent.
"""
input UpdateAppDictInput {
  """
  名称
  """
  name: String
  """
  备注
  """
  comments: String
  clearComments: Boolean
  addItemIDs: [ID!]
  removeItemIDs: [ID!]
  clearItems: Boolean
}
"""
UpdateAppDictItemInput is used for update AppDictItem object.
Input was generated by ent.
"""
input UpdateAppDictItemInput {
  """
  名称
  """
  name: String
  """
  备注
  """
  comments: String
  clearComments: Boolean
  """
  状态
  """
  status: AppDictItemSimpleStatus
  clearStatus: Boolean
}
"""
UpdateAppInput is used for update App object.
Input was generated by ent.
"""
input UpdateAppInput {
  """
  名称
  """
  name: String
  """
  应用类型
  """
  kind: AppKind
  """
  回调地址
  """
  redirectURI: String
  clearRedirectURI: Boolean
  """
  应用ID
  """
  appKey: String
  clearAppKey: Boolean
  """
  应用密钥
  """
  appSecret: String
  clearAppSecret: Boolean
  """
  权限范围
  """
  scopes: String
  clearScopes: Boolean
  """
  token有效期
  """
  tokenValidity: Int
  clearTokenValidity: Boolean
  """
  refresh_token有效期
  """
  refreshTokenValidity: Int
  clearRefreshTokenValidity: Boolean
  """
  应用图标地址
  """
  logo: String
  clearLogo: Boolean
  """
  备注
  """
  comments: String
  clearComments: Boolean
  """
  状态
  """
  status: AppSimpleStatus
  clearStatus: Boolean
  addMenuIDs: [ID!]
  removeMenuIDs: [ID!]
  clearMenus: Boolean
  addActionIDs: [ID!]
  removeActionIDs: [ID!]
  clearActions: Boolean
  addResourceIDs: [ID!]
  removeResourceIDs: [ID!]
  clearResources: Boolean
  addRoleIDs: [ID!]
  removeRoleIDs: [ID!]
  clearRoles: Boolean
  addPolicyIDs: [ID!]
  removePolicyIDs: [ID!]
  clearPolicies: Boolean
  addDictIDs: [ID!]
  removeDictIDs: [ID!]
  clearDicts: Boolean
}
"""
UpdateAppMenuInput is used for update AppMenu object.
Input was generated by ent.
"""
input UpdateAppMenuInput {
  """
  父级ID
  """
  parentID: Int
  """
  目录,菜单项
  """
  kind: AppMenuKind
  """
  菜单名称
  """
  name: String
  """
  菜单图标
  """
  icon: String
  clearIcon: Boolean
  """
  菜单路由
  """
  route: String
  clearRoute: Boolean
  """
  备注
  """
  comments: String
  clearComments: Boolean
  actionID: ID
  clearAction: Boolean
}
"""
UpdateAppPolicyInput is used for update AppPolicy object.
Input was generated by ent.
"""
input UpdateAppPolicyInput {
  """
  策略名称
  """
  name: String
  """
  描述
  """
  comments: String
  clearComments: Boolean
  """
  策略规则
  """
  rules: [PolicyRuleInput]
  appendRules: [PolicyRuleInput]
  """
  标识是否自动授予到账户
  """
  autoGrant: Boolean
  """
  状态
  """
  status: AppPolicySimpleStatus
  clearStatus: Boolean
  addRoleIDs: [ID!]
  removeRoleIDs: [ID!]
  clearRoles: Boolean
}
"""
UpdateAppResInput is used for update AppRes object.
Input was generated by ent.
"""
input UpdateAppResInput {
  """
  资源名称
  """
  name: String
}
"""
UpdateAppRoleInput is used for update AppRole object.
Input was generated by ent.
"""
input UpdateAppRoleInput {
  """
  角色名称
  """
  name: String
  """
  备注
  """
  comments: String
  clearComments: Boolean
  """
  标识是否自动授予到账户
  """
  autoGrant: Boolean
  """
  授权后是否可编辑
  """
  editable: Boolean
}
"""
UpdateFileIdentityInput is used for update FileIdentity object.
Input was generated by ent.
"""
input UpdateFileIdentityInput {
  """
  accesskey id
  """
  accessKeyID: String
  """
  accesskey secret
  """
  accessKeySecret: String
  """
  角色的资源名称(ARN)，用于STS
  """
  roleArn: String
  """
  指定返回的STS令牌的权限的策略
  """
  policy: String
  clearPolicy: Boolean
  """
  STS令牌的有效期，默认3600s
  """
  durationSeconds: Int
  clearDurationSeconds: Boolean
  """
  备注
  """
  comments: String
  clearComments: Boolean
  sourceID: ID
}
"""
UpdateFileSourceInput is used for update FileSource object.
Input was generated by ent.
"""
input UpdateFileSourceInput {
  """
  文件来源
  """
  kind: FileSourceKind
  """
  备注
  """
  comments: String
  clearComments: Boolean
  """
  对外服务的访问域名
  """
  endpoint: String
  """
  是否禁止修改endpoint，如果是自定义域名设为true
  """
  endpointImmutable: Boolean
  """
  sts服务的访问域名
  """
  stsEndpoint: String
  """
  地域，数据存储的物理位置
  """
  region: String
  """
  文件存储空间
  """
  bucket: String
  """
  文件存储空间地址，用于匹配url
  """
  bucketURL: String
  addIdentityIDs: [ID!]
  removeIdentityIDs: [ID!]
  clearIdentities: Boolean
}
"""
UpdateOauthClientInput is used for update OauthClient object.
Input was generated by ent.
"""
input UpdateOauthClientInput {
  """
  名称
  """
  name: String
  """
  授权类型
  """
  grantTypes: OauthClientGrantTypes
  userID: ID
}
"""
UpdateOrgInput is used for update Org object.
Input was generated by ent.
"""
input UpdateOrgInput {
  """
  默认域名
  """
  domain: String
  clearDomain: Boolean
  """
  组织名称
  """
  name: String
  """
  简介
  """
  profile: String
  clearProfile: Boolean
  """
  状态
  """
  status: OrgSimpleStatus
  clearStatus: Boolean
  """
  国家或地区2字码
  """
  countryCode: String
  clearCountryCode: Boolean
  """
  时区
  """
  timezone: String
  clearTimezone: Boolean
  parentID: ID
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  ownerID: ID
  clearOwner: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addRolesAndGroupIDs: [ID!]
  removeRolesAndGroupIDs: [ID!]
  clearRolesAndGroups: Boolean
  addPermissionIDs: [ID!]
  removePermissionIDs: [ID!]
  clearPermissions: Boolean
  addPolicyIDs: [ID!]
  removePolicyIDs: [ID!]
  clearPolicies: Boolean
  addAppIDs: [ID!]
  removeAppIDs: [ID!]
  clearApps: Boolean
  addFileIdentityIDs: [ID!]
  removeFileIdentityIDs: [ID!]
  clearFileIdentities: Boolean
}
"""
UpdateOrgPolicyInput is used for update OrgPolicy object.
Input was generated by ent.
"""
input UpdateOrgPolicyInput {
  """
  所属应用策略,如果是自定义应用策略,则为空
  """
  appPolicyID: Int
  clearAppPolicyID: Boolean
  """
  策略名称
  """
  name: String
  """
  描述
  """
  comments: String
  clearComments: Boolean
  """
  策略规则
  """
  rules: [PolicyRuleInput]
  appendRules: [PolicyRuleInput]
  addPermissionIDs: [ID!]
  removePermissionIDs: [ID!]
  clearPermissions: Boolean
}
"""
UpdateOrgRoleInput is used for update OrgRole object.
Input was generated by ent.
"""
input UpdateOrgRoleInput {
  """
  类型,group:组,role:角色
  """
  kind: OrgRoleKind
  """
  名称
  """
  name: String
  """
  备注
  """
  comments: String
  clearComments: Boolean
}
"""
UpdateOrgUserInput is used for update OrgUser object.
Input was generated by ent.
"""
input UpdateOrgUserInput {
  """
  加入时间
  """
  joinedAt: Time
  """
  在组织内的显示名称
  """
  displayName: String
  orgID: ID
  userID: ID
}
"""
UpdateOrgUserPreferenceInput is used for update OrgUserPreference object.
Input was generated by ent.
"""
input UpdateOrgUserPreferenceInput {
  """
  用户收藏菜单
  """
  menuFavorite: [ID!]
  appendMenuFavorite: [ID!]
  clearMenuFavorite: Boolean
  """
  用户最近访问菜单
  """
  menuRecent: [ID!]
  appendMenuRecent: [ID!]
  clearMenuRecent: Boolean
}
"""
UpdatePermissionInput is used for update Permission object.
Input was generated by ent.
"""
input UpdatePermissionInput {
  """
  生效开始时间
  """
  startAt: Time
  clearStartAt: Boolean
  """
  生效结束时间
  """
  endAt: Time
  clearEndAt: Boolean
  """
  状态
  """
  status: PermissionSimpleStatus
  clearStatus: Boolean
}
"""
UpdateUserIdentityInput is used for update UserIdentity object.
Input was generated by ent.
"""
input UpdateUserIdentityInput {
  """
  身份标识类型 手机、邮箱、用户名、微信、qq
  """
  kind: UserIdentityKind
  """
  用户名、邮箱、手机、unionid、qq
  """
  code: String
  clearCode: Boolean
  """
  扩展标识码,比如微信的openID
  """
  codeExtend: String
  clearCodeExtend: Boolean
  """
  状态,部分登陆方式需要验证通过才可启用
  """
  status: UserIdentitySimpleStatus
  clearStatus: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """
  登陆名称
  """
  principalName: String
  """
  显示名
  """
  displayName: String
  """
  邮箱
  """
  email: String
  clearEmail: Boolean
  """
  手机
  """
  mobile: String
  clearMobile: Boolean
  """
  备注
  """
  comments: String
  clearComments: Boolean
  """
  头像地址
  """
  avatar: String
  clearAvatar: Boolean
}
"""
UpdateUserLoginProfileInput is used for update UserLoginProfile object.
Input was generated by ent.
"""
input UpdateUserLoginProfileInput {
  """
  是否允许使用密码登陆控制台
  """
  canLogin: Boolean
  clearCanLogin: Boolean
  """
  设置密码:keep-保持不变,customer-客户自行设置,auto-自动生成
  """
  setKind: UserLoginProfileSetKind
  """
  下次登陆时需要重置密码
  """
  passwordReset: Boolean
  clearPasswordReset: Boolean
  """
  是否开启设备认证
  """
  verifyDevice: Boolean
}
"""
UpdateUserPasswordInput is used for update UserPassword object.
Input was generated by ent.
"""
input UpdateUserPasswordInput {
  """
  场景: login 普通登陆
  """
  scene: UserPasswordScene
  """
  密码
  """
  password: String
  clearPassword: Boolean
  """
  生效状态,默认生效
  """
  status: UserPasswordSimpleStatus
  clearStatus: Boolean
}
type User implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  deletedAt: Time
  """
  登陆名称
  """
  principalName: String!
  """
  显示名
  """
  displayName: String!
  """
  邮箱
  """
  email: String
  """
  手机
  """
  mobile: String
  """
  用户类型
  """
  userType: UserUserType!
  """
  创建类型,邀请，注册,手工创建
  """
  creationType: UserCreationType!
  """
  注册时IP
  """
  registerIP: String!
  """
  状态
  """
  status: UserSimpleStatus
  """
  备注
  """
  comments: String
  """
  头像地址
  """
  avatar: String
  """
  用户身份标识
  """
  identities: [UserIdentity!]
  """
  登陆设置
  """
  loginProfile: UserLoginProfile
  """
  用户设备
  """
  devices: [UserDevice!]
  permissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Permissions returned from the connection.
    """
    orderBy: PermissionOrder

    """
    Filtering options for Permissions returned from the connection.
    """
    where: PermissionWhereInput
  ): PermissionConnection!
  """
  用户AccessKey
  """
  oauthClients: [OauthClient!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
UserCreationType is enum for the field creation_type
"""
enum UserCreationType @goModel(model: "github.com/woocoos/knockout/ent/user.CreationType") {
  invitation
  register
  manual
}
type UserDevice implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  """
  设备唯一ID
  """
  deviceUID: String!
  deviceName: String
  systemName: String
  systemVersion: String
  appVersion: String
  deviceModel: String
  """
  状态,可用或不可用及其他待确认状态
  """
  status: UserDeviceSimpleStatus
  """
  备注
  """
  comments: String
  user: User
}
"""
Ordering options for UserDevice connections
"""
input UserDeviceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserDevices.
  """
  field: UserDeviceOrderField!
}
"""
Properties by which UserDevice connections can be ordered.
"""
enum UserDeviceOrderField {
  createdAt
}
"""
UserDeviceSimpleStatus is enum for the field status
"""
enum UserDeviceSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
UserDeviceWhereInput is used for filtering UserDevice objects.
Input was generated by ent.
"""
input UserDeviceWhereInput {
  not: UserDeviceWhereInput
  and: [UserDeviceWhereInput!]
  or: [UserDeviceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """
  device_uid field predicates
  """
  deviceUID: String
  deviceUIDNEQ: String
  deviceUIDIn: [String!]
  deviceUIDNotIn: [String!]
  deviceUIDGT: String
  deviceUIDGTE: String
  deviceUIDLT: String
  deviceUIDLTE: String
  deviceUIDContains: String
  deviceUIDHasPrefix: String
  deviceUIDHasSuffix: String
  deviceUIDEqualFold: String
  deviceUIDContainsFold: String
  """
  device_name field predicates
  """
  deviceName: String
  deviceNameNEQ: String
  deviceNameIn: [String!]
  deviceNameNotIn: [String!]
  deviceNameGT: String
  deviceNameGTE: String
  deviceNameLT: String
  deviceNameLTE: String
  deviceNameContains: String
  deviceNameHasPrefix: String
  deviceNameHasSuffix: String
  deviceNameIsNil: Boolean
  deviceNameNotNil: Boolean
  deviceNameEqualFold: String
  deviceNameContainsFold: String
  """
  system_name field predicates
  """
  systemName: String
  systemNameNEQ: String
  systemNameIn: [String!]
  systemNameNotIn: [String!]
  systemNameGT: String
  systemNameGTE: String
  systemNameLT: String
  systemNameLTE: String
  systemNameContains: String
  systemNameHasPrefix: String
  systemNameHasSuffix: String
  systemNameIsNil: Boolean
  systemNameNotNil: Boolean
  systemNameEqualFold: String
  systemNameContainsFold: String
  """
  system_version field predicates
  """
  systemVersion: String
  systemVersionNEQ: String
  systemVersionIn: [String!]
  systemVersionNotIn: [String!]
  systemVersionGT: String
  systemVersionGTE: String
  systemVersionLT: String
  systemVersionLTE: String
  systemVersionContains: String
  systemVersionHasPrefix: String
  systemVersionHasSuffix: String
  systemVersionIsNil: Boolean
  systemVersionNotNil: Boolean
  systemVersionEqualFold: String
  systemVersionContainsFold: String
  """
  app_version field predicates
  """
  appVersion: String
  appVersionNEQ: String
  appVersionIn: [String!]
  appVersionNotIn: [String!]
  appVersionGT: String
  appVersionGTE: String
  appVersionLT: String
  appVersionLTE: String
  appVersionContains: String
  appVersionHasPrefix: String
  appVersionHasSuffix: String
  appVersionIsNil: Boolean
  appVersionNotNil: Boolean
  appVersionEqualFold: String
  appVersionContainsFold: String
  """
  device_model field predicates
  """
  deviceModel: String
  deviceModelNEQ: String
  deviceModelIn: [String!]
  deviceModelNotIn: [String!]
  deviceModelGT: String
  deviceModelGTE: String
  deviceModelLT: String
  deviceModelLTE: String
  deviceModelContains: String
  deviceModelHasPrefix: String
  deviceModelHasSuffix: String
  deviceModelIsNil: Boolean
  deviceModelNotNil: Boolean
  deviceModelEqualFold: String
  deviceModelContainsFold: String
  """
  status field predicates
  """
  status: UserDeviceSimpleStatus
  statusNEQ: UserDeviceSimpleStatus
  statusIn: [UserDeviceSimpleStatus!]
  statusNotIn: [UserDeviceSimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type UserIdentity implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  """
  身份标识类型 手机、邮箱、用户名、微信、qq
  """
  kind: UserIdentityKind!
  """
  用户名、邮箱、手机、unionid、qq
  """
  code: String
  """
  扩展标识码,比如微信的openID
  """
  codeExtend: String
  """
  状态,部分登陆方式需要验证通过才可启用
  """
  status: UserIdentitySimpleStatus
  user: User
}
"""
UserIdentityKind is enum for the field kind
"""
enum UserIdentityKind @goModel(model: "github.com/woocoos/knockout/ent/useridentity.Kind") {
  name
  email
  phone
  wechat
  qq
}
"""
Ordering options for UserIdentity connections
"""
input UserIdentityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserIdentities.
  """
  field: UserIdentityOrderField!
}
"""
Properties by which UserIdentity connections can be ordered.
"""
enum UserIdentityOrderField {
  createdAt
}
"""
UserIdentitySimpleStatus is enum for the field status
"""
enum UserIdentitySimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
UserIdentityWhereInput is used for filtering UserIdentity objects.
Input was generated by ent.
"""
input UserIdentityWhereInput {
  not: UserIdentityWhereInput
  and: [UserIdentityWhereInput!]
  or: [UserIdentityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """
  kind field predicates
  """
  kind: UserIdentityKind
  kindNEQ: UserIdentityKind
  kindIn: [UserIdentityKind!]
  kindNotIn: [UserIdentityKind!]
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIsNil: Boolean
  codeNotNil: Boolean
  codeEqualFold: String
  codeContainsFold: String
  """
  code_extend field predicates
  """
  codeExtend: String
  codeExtendNEQ: String
  codeExtendIn: [String!]
  codeExtendNotIn: [String!]
  codeExtendGT: String
  codeExtendGTE: String
  codeExtendLT: String
  codeExtendLTE: String
  codeExtendContains: String
  codeExtendHasPrefix: String
  codeExtendHasSuffix: String
  codeExtendIsNil: Boolean
  codeExtendNotNil: Boolean
  codeExtendEqualFold: String
  codeExtendContainsFold: String
  """
  status field predicates
  """
  status: UserIdentitySimpleStatus
  statusNEQ: UserIdentitySimpleStatus
  statusIn: [UserIdentitySimpleStatus!]
  statusNotIn: [UserIdentitySimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type UserLoginProfile implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  lastLoginIP: String
  """
  最后登陆时间
  """
  lastLoginAt: Time
  """
  是否允许使用密码登陆控制台
  """
  canLogin: Boolean
  """
  设置密码:keep-保持不变,customer-客户自行设置,auto-自动生成
  """
  setKind: UserLoginProfileSetKind!
  """
  下次登陆时需要重置密码
  """
  passwordReset: Boolean
  """
  是否开启设备认证
  """
  verifyDevice: Boolean!
  """
  是否开启多因素验证
  """
  mfaEnabled: Boolean
  """
  多因素验证状态
  """
  mfaStatus: UserLoginProfileSimpleStatus
  user: User
}
"""
Ordering options for UserLoginProfile connections
"""
input UserLoginProfileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserLoginProfiles.
  """
  field: UserLoginProfileOrderField!
}
"""
Properties by which UserLoginProfile connections can be ordered.
"""
enum UserLoginProfileOrderField {
  createdAt
}
"""
UserLoginProfileSetKind is enum for the field set_kind
"""
enum UserLoginProfileSetKind @goModel(model: "github.com/woocoos/knockout/ent/userloginprofile.SetKind") {
  keep
  customer
  auto
}
"""
UserLoginProfileSimpleStatus is enum for the field mfa_status
"""
enum UserLoginProfileSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
UserLoginProfileWhereInput is used for filtering UserLoginProfile objects.
Input was generated by ent.
"""
input UserLoginProfileWhereInput {
  not: UserLoginProfileWhereInput
  and: [UserLoginProfileWhereInput!]
  or: [UserLoginProfileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """
  can_login field predicates
  """
  canLogin: Boolean
  canLoginNEQ: Boolean
  canLoginIsNil: Boolean
  canLoginNotNil: Boolean
  """
  set_kind field predicates
  """
  setKind: UserLoginProfileSetKind
  setKindNEQ: UserLoginProfileSetKind
  setKindIn: [UserLoginProfileSetKind!]
  setKindNotIn: [UserLoginProfileSetKind!]
  """
  password_reset field predicates
  """
  passwordReset: Boolean
  passwordResetNEQ: Boolean
  passwordResetIsNil: Boolean
  passwordResetNotNil: Boolean
  """
  verify_device field predicates
  """
  verifyDevice: Boolean
  verifyDeviceNEQ: Boolean
  """
  mfa_enabled field predicates
  """
  mfaEnabled: Boolean
  mfaEnabledNEQ: Boolean
  mfaEnabledIsNil: Boolean
  mfaEnabledNotNil: Boolean
  """
  mfa_status field predicates
  """
  mfaStatus: UserLoginProfileSimpleStatus
  mfaStatusNEQ: UserLoginProfileSimpleStatus
  mfaStatusIn: [UserLoginProfileSimpleStatus!]
  mfaStatusNotIn: [UserLoginProfileSimpleStatus!]
  mfaStatusIsNil: Boolean
  mfaStatusNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  createdAt
}
type UserPassword implements Node {
  id: ID!
  createdBy: Int!
  createdAt: Time!
  updatedBy: Int
  updatedAt: Time
  userID: ID
  """
  场景: login 普通登陆
  """
  scene: UserPasswordScene!
  """
  生效状态,默认生效
  """
  status: UserPasswordSimpleStatus
  user: User
}
"""
Ordering options for UserPassword connections
"""
input UserPasswordOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserPasswords.
  """
  field: UserPasswordOrderField!
}
"""
Properties by which UserPassword connections can be ordered.
"""
enum UserPasswordOrderField {
  createdAt
}
"""
UserPasswordScene is enum for the field scene
"""
enum UserPasswordScene @goModel(model: "github.com/woocoos/knockout/ent/userpassword.Scene") {
  login
}
"""
UserPasswordSimpleStatus is enum for the field status
"""
enum UserPasswordSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
UserPasswordWhereInput is used for filtering UserPassword objects.
Input was generated by ent.
"""
input UserPasswordWhereInput {
  not: UserPasswordWhereInput
  and: [UserPasswordWhereInput!]
  or: [UserPasswordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  """
  scene field predicates
  """
  scene: UserPasswordScene
  sceneNEQ: UserPasswordScene
  sceneIn: [UserPasswordScene!]
  sceneNotIn: [UserPasswordScene!]
  """
  status field predicates
  """
  status: UserPasswordSimpleStatus
  statusNEQ: UserPasswordSimpleStatus
  statusIn: [UserPasswordSimpleStatus!]
  statusNotIn: [UserPasswordSimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
UserSimpleStatus is enum for the field status
"""
enum UserSimpleStatus @goModel(model: "github.com/woocoos/knockout-go/ent/schemax/typex.SimpleStatus") {
  active
  inactive
  processing
  disabled
}
"""
UserUserType is enum for the field user_type
"""
enum UserUserType @goModel(model: "github.com/woocoos/knockout/ent/user.UserType") {
  account
  member
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  deleted_at field predicates
  """
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """
  principal_name field predicates
  """
  principalName: String
  principalNameNEQ: String
  principalNameIn: [String!]
  principalNameNotIn: [String!]
  principalNameGT: String
  principalNameGTE: String
  principalNameLT: String
  principalNameLTE: String
  principalNameContains: String
  principalNameHasPrefix: String
  principalNameHasSuffix: String
  principalNameEqualFold: String
  principalNameContainsFold: String
  """
  display_name field predicates
  """
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  mobile field predicates
  """
  mobile: String
  mobileNEQ: String
  mobileIn: [String!]
  mobileNotIn: [String!]
  mobileGT: String
  mobileGTE: String
  mobileLT: String
  mobileLTE: String
  mobileContains: String
  mobileHasPrefix: String
  mobileHasSuffix: String
  mobileIsNil: Boolean
  mobileNotNil: Boolean
  mobileEqualFold: String
  mobileContainsFold: String
  """
  user_type field predicates
  """
  userType: UserUserType
  userTypeNEQ: UserUserType
  userTypeIn: [UserUserType!]
  userTypeNotIn: [UserUserType!]
  """
  creation_type field predicates
  """
  creationType: UserCreationType
  creationTypeNEQ: UserCreationType
  creationTypeIn: [UserCreationType!]
  creationTypeNotIn: [UserCreationType!]
  """
  register_ip field predicates
  """
  registerIP: String
  registerIPNEQ: String
  registerIPIn: [String!]
  registerIPNotIn: [String!]
  registerIPGT: String
  registerIPGTE: String
  registerIPLT: String
  registerIPLTE: String
  registerIPContains: String
  registerIPHasPrefix: String
  registerIPHasSuffix: String
  registerIPEqualFold: String
  registerIPContainsFold: String
  """
  status field predicates
  """
  status: UserSimpleStatus
  statusNEQ: UserSimpleStatus
  statusIn: [UserSimpleStatus!]
  statusNotIn: [UserSimpleStatus!]
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  identities edge predicates
  """
  hasIdentities: Boolean
  hasIdentitiesWith: [UserIdentityWhereInput!]
  """
  login_profile edge predicates
  """
  hasLoginProfile: Boolean
  hasLoginProfileWith: [UserLoginProfileWhereInput!]
  """
  passwords edge predicates
  """
  hasPasswords: Boolean
  hasPasswordsWith: [UserPasswordWhereInput!]
  """
  devices edge predicates
  """
  hasDevices: Boolean
  hasDevicesWith: [UserDeviceWhereInput!]
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
  """
  oauth_clients edge predicates
  """
  hasOauthClients: Boolean
  hasOauthClientsWith: [OauthClientWhereInput!]
}
`, BuiltIn: false},
	{Name: "../types.graphql", Input: `input EnableDirectoryInput {
    """域名"""
    domain: String!
    name: String!
}

extend input CreateUserInput {
    loginProfile: CreateUserLoginProfileInput
    """如指定密码则填入,否则由系统自动生成密码"""
    password: CreateUserPasswordInput
}

input AssignRoleUserInput {
    """授权类型为角色或用户组的ID"""
    orgRoleID: ID!
    userID: ID!
    """生效开始时间"""
    startAt: Time
    """生效结束时间"""
    endAt: Time
}

"""树操作类型"""
enum TreeAction {
    """作为子节点"""
    child
    """上移"""
    up
    """下移"""
    down
}

enum PolicyEffect {
    allow
    deny
}
type PolicyRule {
    effect: PolicyEffect!
    actions: [String!]
    resources: [String!]
    conditions: [String!]
}

input PolicyRuleInput {
    effect: PolicyEffect!
    actions: [String!]
    resources: [String!]
    conditions: [String!]
}

input GrantInput {
    principal: GID!
    orgScope: ID!
    policyID: ID!
}

type Mfa{
    secret: String!
    account: String!
}

extend type OrgRole {
    """是否系统角色"""
    isAppRole: Boolean!
}

extend type OrgPolicy {
    """是否授权role"""
    isGrantRole(roleID:ID!): Boolean!
    """是否授权user"""
    isGrantUser(userID:ID!): Boolean!
}

extend type User {
    """是否分配role"""
    isAssignOrgRole(orgRoleID:ID!): Boolean!
    """是否允许解除角色授权"""
    isAllowRevokeRole(orgRoleID:ID!):Boolean!
}

extend type Org {
    """是否允许解除应用策略"""
    isAllowRevokeAppPolicy(appPolicyID:ID!):Boolean!
}

extend type OrgRole {
    """是否分配给user"""
    isGrantUser(userID:ID!): Boolean!
}

extend type AppPolicy {
    """是否授权role"""
    isGrantAppRole(appRoleID:ID!): Boolean!
}

extend type Permission {
    """是否允许撤销：根用户授权及系统角色授权不允许撤销"""
    isAllowRevoke:Boolean!
}

input OrgUserPreferenceInput {
    """用户收藏菜单"""
    menuFavorite: [ID!]
    """用户最近访问菜单"""
    menuRecent: [ID!]
}

"""业务调用的fileIdentity"""
type OrgFileIdentity {
    id: ID!
    createdBy: Int!
    createdAt: Time!
    updatedBy: Int
    updatedAt: Time
    """
    组织ID
    """
    tenantID: ID!
    """
    文件来源ID
    """
    fileSourceID: ID!
    """
    租户默认的凭证
    """
    isDefault: Boolean!
    """
    备注
    """
    comments: String
    source: FileSource!
}

"""内部调用fileIdentity"""
type FileIdentityForApp implements Node{
    id: ID!
    tenantID: ID!
    accessKeyID: String!
    accessKeySecret: String!
    """
    角色的资源名称(ARN)，用于STS
    """
    roleArn: String!
    """
    指定返回的STS令牌的权限的策略
    """
    policy: String
    """
    STS令牌的有效期，默认3600s
    """
    durationSeconds: Int
    """
    租户默认的凭证
    """
    isDefault: Boolean!
    source: FileSource!
}`, BuiltIn: false},
	{Name: "../query.graphql", Input: `extend type Query {
    """获取全局ID,开发用途"""
    globalID(type: String!, id: ID!): GID
    """用户组"""
    orgGroups(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: OrgRoleOrder
        where: OrgRoleWhereInput
    ): OrgRoleConnection!
    """用户组组成员"""
    orgRoleUsers(
        roleID: ID!
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: UserOrder
        where: UserWhereInput
    ): UserConnection!
    """角色"""
    orgRoles(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: OrgRoleOrder
        where: OrgRoleWhereInput
    ): OrgRoleConnection!
    """应用角色授权的组织列表"""
    appRoleAssignedToOrgs(roleID:ID!,where:OrgWhereInput):[Org!]!
    """应用策略授权的组织列表"""
    appPolicyAssignedToOrgs(policyID:ID!,where:OrgWhereInput):[Org!]!
    """权限策略引用列表"""
    orgPolicyReferences(
        policyID:ID!
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: PermissionOrder
        where: PermissionWhereInput
    ):PermissionConnection!
    """获取应用资源模板"""
    appResources(
        appID:ID!
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: AppResOrder
        where: AppResWhereInput
    ):AppResConnection!
    """获取组织应用资源模板"""
    orgAppResources(
        appID:ID!
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: AppResOrder
        where: AppResWhereInput
    ):AppResConnection!
    """用户加入的用户组"""
    userGroups(
        userID:ID!
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: OrgRoleOrder
        where: OrgRoleWhereInput
    ):OrgRoleConnection!
    """用户继承用户组的权限策略"""
    userExtendGroupPolicies(
        userID:ID!
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: PermissionOrder
        where: PermissionWhereInput
    ):PermissionConnection!
    """用户菜单"""
    userMenus(appCode:String!):[AppMenu!]!
    """获取用户所有权限"""
    userPermissions(where: AppActionWhereInput):[AppAction!]!
    """检测权限"""
    checkPermission(
        """appCode + ":" + action"""
        permission:String!
    ):Boolean!
    """组织策略可授权的appActions"""
    orgAppActions(appCode:String!):[AppAction!]!
    """用户加入的root组织"""
    userRootOrgs:[Org!]!
    """组织回收站列表"""
    orgRecycleUsers(
        after: Cursor
        first: Int
        before: Cursor
        last: Int
        orderBy: UserOrder
        where: UserWhereInput
    ):UserConnection!
    """获取组织用户偏好"""
    orgUserPreference: OrgUserPreference
    """用户授权的应用列表"""
    userApps: [App!]!
    """根据ref_code获取数据字典,用于批量获取"""
    appDictByRefCode(
        """ref_code规则：<appCode:appDictCode>"""
        refCodes: [String!]!
    ): [AppDict!]!
    """根据ref_code获取数据字典值"""
    appDictItemByRefCode(
        """ref_code规则：<appCode:appDictCode>"""
        refCode: String!
    ):[AppDictItem!]!
    """检测应用登录授权"""
    appAccess(appCode:String!):Boolean!
    """获取当前组织的文件凭证"""
    fileIdentitiesForOrg: [OrgFileIdentity!]!
    """获取文件凭证"""
    fileIdentitiesForApp(where: FileIdentityWhereInput): [FileIdentityForApp!]!
    """获取凭证AccessKeySecret"""
    fileIdentityAccessKeySecret(id: ID!): String!
}`, BuiltIn: false},
	{Name: "../mutation.graphql", Input: `type Mutation {
    """启用目录管理,返回根节点组织信息"""
    enableDirectory(input: EnableDirectoryInput!):Org
    """创建组织根节点(管理端使用)"""
    createRoot(input: CreateOrgInput!): Org
    """创建组织目录"""
    createOrganization(input: CreateOrgInput!): Org
    """更新组织目录"""
    updateOrganization(orgID:ID!,input: UpdateOrgInput!): Org
    """删除组织目录"""
    deleteOrganization(orgID:ID!): Boolean!
    """组织位置调整，action: child, up, down"""
    moveOrganization(
        """要移动的节点组织ID"""
        sourceID:ID!,
        """目标节点组织ID"""
        targetId:ID!,
        action:TreeAction!): Boolean!
    """创建组织成员(管理账户)"""
    createOrganizationAccount(
        """根组织ID"""
        rootOrgID:ID!,
        input: CreateUserInput!): User
    """创建组织用户"""
    createOrganizationUser(
        """根组织ID"""
        rootOrgID:ID!,
        input: CreateUserInput!): User
    """将用户分配到组织下"""
    allotOrganizationUser(input: CreateOrgUserInput!): Boolean!
    """从组织目录中移除用户"""
    removeOrganizationUser(
        """目标组织ID,可为根组织ID"""
        orgID:ID!,
        """用户ID"""
        userID:ID!): Boolean!
    """更新用户"""
    updateUser(userID:ID!,input: UpdateUserInput!): User
    """用户登陆配置"""
    updateLoginProfile(userID:ID!,input: UpdateUserLoginProfileInput!): UserLoginProfile
    """删除用户"""
    deleteUser(userID:ID!): Boolean!
    """绑定用户凭证(管理端使用)"""
    bindUserIdentity(input: CreateUserIdentityInput!): UserIdentity
    """删除用户凭证"""
    deleteUserIdentity(id:ID!): Boolean!
    """用户修改自己的登录密码"""
    changePassword(oldPwd:String!,newPwd:String!): Boolean!
    """重置用户密码并发送邮件"""
    resetUserPasswordByEmail(userId:ID!): Boolean!
    """创建应用"""
    createApp(input: CreateAppInput!): App
    """更新应用"""
    updateApp(appID:ID!,input: UpdateAppInput!): App
    """删除应用"""
    deleteApp(appID:ID!): Boolean!
    """创建应用操作"""
    createAppActions(appID:ID!,input: [CreateAppActionInput!]): [AppAction]!
    """更新应用操作"""
    updateAppAction(actionID:ID!, input: UpdateAppActionInput!): AppAction
    """删除应用操作"""
    deleteAppAction(actionID:ID!): Boolean!
    """创建应用策略模板"""
    createAppPolicy(appID:ID!,input: CreateAppPolicyInput!): AppPolicy
    """更新应用策略模板"""
    updateAppPolicy(policyID:ID!,input: UpdateAppPolicyInput!): AppPolicy
    """删除应用策略模板"""
    deleteAppPolicy(policyID:ID!): Boolean!
    """创建应用菜单"""
    createAppMenus(appID:ID!,input: [CreateAppMenuInput!]): [AppMenu]!
    """更新应用菜单"""
    updateAppMenu(menuID:ID!,input: UpdateAppMenuInput!): AppMenu
    """应用菜单位置调整，targetLocation: child, up, down"""
    moveAppMenu(sourceID:ID!,targetID:ID!,action:TreeAction!): Boolean!
    """删除应用菜单"""
    deleteAppMenu(menuID:ID!): Boolean!
    """创建应用角色"""
    createAppRole(appID:ID!,input: CreateAppRoleInput!): AppRole
    """更新应用角色"""
    updateAppRole(roleID:ID!,input: UpdateAppRoleInput!): AppRole
    """删除应用角色"""
    deleteAppRole(roleID:ID!): Boolean!
    """创建应用数据字典"""
    createAppDict(appID:ID!,input: CreateAppDictInput!): AppDict
    """更新应用数据字典"""
    updateAppDict(dictID:ID!,input: UpdateAppDictInput!): AppDict
    """删除应用数据字典"""
    deleteAppDict(dictID:ID!): Boolean!
    """创建应用数据字典项"""
    createAppDictItem(dictID:ID!,input: CreateAppDictItemInput!): AppDictItem
    """更新应用数据字典项"""
    updateAppDictItem(itemID:ID!,input: UpdateAppDictItemInput!): AppDictItem
    """删除应用数据字典项"""
    deleteAppDictItem(itemID:ID!): Boolean!
    """移动节点"""
    moveAppDictItem(sourceID:ID!,targetID:ID!,action:TreeAction!): Boolean!
    """分配应用角色到组织"""
    assignOrganizationAppRole(orgID:ID!,appRoleID:ID!): Boolean!
    """取消分配到组织应用角色"""
    revokeOrganizationAppRole(orgID:ID!,appRoleID:ID!): Boolean!
    """角色添加策略"""
    assignAppRolePolicy(appID:ID!,roleID:ID!,policyIDs:[ID!]): Boolean!
    """角色移除策略"""
    revokeAppRolePolicy(appID:ID!,roleID:ID!,policyIDs:[ID!]): Boolean!
    """分配应用,将自动分配应用下的所有资源"""
    assignOrganizationApp(orgID:ID!,appID:ID!): Boolean!
    """取消分配应用"""
    revokeOrganizationApp(orgID:ID!,appID:ID!): Boolean!
    """分配应用策略到组织"""
    assignOrganizationAppPolicy(orgID:ID!,appPolicyID:ID!): Boolean!
    """取消分配到组织应用策略"""
    revokeOrganizationAppPolicy(orgID:ID!,appPolicyID:ID!): Boolean!
    """创建组织策略"""
    createOrganizationPolicy(input: CreateOrgPolicyInput!): OrgPolicy
    """更新组织策略"""
    updateOrganizationPolicy(orgPolicyID:ID!,input: UpdateOrgPolicyInput!): OrgPolicy
    """删除组织策略"""
    deleteOrganizationPolicy(orgPolicyID:ID!): Boolean!
    """创建角色或组"""
    createRole(input: CreateOrgRoleInput!): OrgRole
    """更新角色或组"""
    updateRole(roleID:ID!,input: UpdateOrgRoleInput!): OrgRole
    """删除角色或组"""
    deleteRole(roleID:ID!): Boolean!
    """分配组用户"""
    assignRoleUser(input:AssignRoleUserInput!): Boolean!
    """取消分配组用户"""
    revokeRoleUser(roleID:ID!,userID:ID!): Boolean!
    """授权"""
    grant(input: CreatePermissionInput!): Permission
    """更新授权"""
    updatePermission(permissionID:ID!,input: UpdatePermissionInput!): Permission
    """取消授权"""
    revoke(
        orgID:ID!
        """组织内的授权ID"""
        permissionID:ID!
    ): Boolean!
    """启用MFA"""
    enableMFA(userID:ID!):Mfa!
    """禁用MFA"""
    disableMFA(userID:ID!):Boolean!
    """发送MFA至用户邮箱"""
    sendMFAToUserByEmail(userID:ID!):Boolean!
    """修改资源名称"""
    updateAppRes(appResID:ID!,input:UpdateAppResInput!):AppRes
    """恢复用户"""
    recoverOrgUser(userID:ID!,userInput:UpdateUserInput!,pwdKind:UserLoginProfileSetKind!,pwdInput:CreateUserPasswordInput):User!
    """创建文件来源"""
    createFileSource(input: CreateFileSourceInput!): FileSource!
    """更新文件来源"""
    updateFileSource(fsID: ID!,input: UpdateFileSourceInput!): FileSource!
    """删除文件来源"""
    deleteFileSource(fsID: ID!): Boolean!
    """创建文件凭证"""
    createFileIdentity(input: CreateFileIdentityInput!): FileIdentity!
    """更新文件凭证"""
    updateFileIdentity(id: ID!,input: UpdateFileIdentityInput!): FileIdentity!
    """删除文件凭证"""
    deleteFileIdentity(id: ID!): Boolean!
    """设置默认凭证"""
    setDefaultFileIdentity(identityID: ID!,orgID: ID!): Boolean!
    """创建用户 AccessKey"""
    createOauthClient(input: CreateOauthClientInput!): OauthClient!
    """启用OauthClient"""
    enableOauthClient(id: ID!): OauthClient!
    """禁用OauthClient"""
    disableOauthClient(id: ID!): OauthClient!
    """删除OauthClient"""
    deleteOauthClient(id: ID!): Boolean!
    """保存组织用户偏好"""
    saveOrgUserPreference(input: OrgUserPreferenceInput!): OrgUserPreference!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
