package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	generated1 "github.com/woocoos/knockout/api/graphql/generated"
	"github.com/woocoos/knockout/api/graphql/model"
	"github.com/woocoos/knockout/ent"
	"github.com/woocoos/knockout/ent/user"
)

// EnableDirectory is the resolver for the enableDirectory field.
func (r *mutationResolver) EnableDirectory(ctx context.Context, input model.EnableDirectoryInput) (*ent.Org, error) {
	return r.Resource.EnableOrganization(ctx, input)
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input ent.CreateOrgInput) (*ent.Org, error) {
	return r.Resource.CreateOrganization(ctx, input)
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, orgID int, input ent.UpdateOrgInput) (*ent.Org, error) {
	return r.Resource.UpdateOrganization(ctx, orgID, input)
}

// DeleteOrganization is the resolver for the deleteOrganization field.
func (r *mutationResolver) DeleteOrganization(ctx context.Context, orgID int) (bool, error) {
	err := r.Resource.DeleteOrganization(ctx, orgID)
	if err != nil {
		return false, err
	}
	return true, nil
}

// MoveOrganization is the resolver for the moveOrganization field.
func (r *mutationResolver) MoveOrganization(ctx context.Context, sourceID int, targetID int, action model.TreeAction) (bool, error) {
	err := r.Resource.MoveOrganization(ctx, sourceID, targetID, action)
	return err == nil, err
}

// CreateOrganizationAccount is the resolver for the createOrganizationAccount field.
func (r *mutationResolver) CreateOrganizationAccount(ctx context.Context, orgID int, input ent.CreateUserInput) (*ent.User, error) {
	return r.Resource.CreateOrganizationAccount(ctx, orgID, input)
}

// CreateOrganizationUser is the resolver for the createOrganizationUser field.
func (r *mutationResolver) CreateOrganizationUser(ctx context.Context, orgID int, input ent.CreateUserInput) (*ent.User, error) {
	return r.Resource.CreateOrganizationUser(ctx, orgID, input, user.UserTypeMember)
}

// AddOrganizationUser is the resolver for the addOrganizationUser field.
func (r *mutationResolver) AddOrganizationUser(ctx context.Context, orgID int, userID int, displayName *string) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: AddOrganizationUser - addOrganizationUser"))
}

// RemoveOrganizationUser is the resolver for the removeOrganizationUser field.
func (r *mutationResolver) RemoveOrganizationUser(ctx context.Context, orgID int, userID int) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveOrganizationUser - removeOrganizationUser"))
}

// DeleteOrganizationUser is the resolver for the deleteOrganizationUser field.
func (r *mutationResolver) DeleteOrganizationUser(ctx context.Context, orgID int, userID int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteOrganizationUser - deleteOrganizationUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID int, input ent.UpdateUserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// BindUserIdentity is the resolver for the bindUserIdentity field.
func (r *mutationResolver) BindUserIdentity(ctx context.Context, input ent.CreateUserIdentityInput) (*ent.UserIdentity, error) {
	panic(fmt.Errorf("not implemented: BindUserIdentity - bindUserIdentity"))
}

// DeleteUserIdentity is the resolver for the deleteUserIdentity field.
func (r *mutationResolver) DeleteUserIdentity(ctx context.Context, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUserIdentity - deleteUserIdentity"))
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, oldPwd string, newPwd string) (bool, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// ResetUserPasswordByEmail is the resolver for the resetUserPasswordByEmail field.
func (r *mutationResolver) ResetUserPasswordByEmail(ctx context.Context, userID int) (bool, error) {
	panic(fmt.Errorf("not implemented: ResetUserPasswordByEmail - resetUserPasswordByEmail"))
}

// CreateUserMfa is the resolver for the createUserMFA field.
func (r *mutationResolver) CreateUserMfa(ctx context.Context, userID int) (bool, error) {
	panic(fmt.Errorf("not implemented: CreateUserMfa - createUserMFA"))
}

// EnableUserMfa is the resolver for the enableUserMFA field.
func (r *mutationResolver) EnableUserMfa(ctx context.Context, userID int, enable *bool) (bool, error) {
	panic(fmt.Errorf("not implemented: EnableUserMfa - enableUserMFA"))
}

// DeleteUserMfa is the resolver for the deleteUserMFA field.
func (r *mutationResolver) DeleteUserMfa(ctx context.Context, userID int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUserMfa - deleteUserMFA"))
}

// SendUserMFAByEmail is the resolver for the sendUserMFAByEmail field.
func (r *mutationResolver) SendUserMFAByEmail(ctx context.Context, userID int) (bool, error) {
	panic(fmt.Errorf("not implemented: SendUserMFAByEmail - sendUserMFAByEmail"))
}

// CreateApp is the resolver for the createApp field.
func (r *mutationResolver) CreateApp(ctx context.Context, input ent.CreateAppInput) (*ent.App, error) {
	return r.Client.App.Create().SetInput(input).Save(ctx)
}

// UpdateApp is the resolver for the updateApp field.
func (r *mutationResolver) UpdateApp(ctx context.Context, appID int, input ent.UpdateAppInput) (*ent.App, error) {
	c := ent.FromContext(ctx)
	return c.App.UpdateOneID(appID).SetInput(input).Save(ctx)
}

// DeleteApp is the resolver for the deleteApp field.
func (r *mutationResolver) DeleteApp(ctx context.Context, appID int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteApp - deleteApp"))
}

// CreateAppActions is the resolver for the createAppActions field.
func (r *mutationResolver) CreateAppActions(ctx context.Context, input []*ent.CreateAppActionInput) (bool, error) {
	c := ent.FromContext(ctx)
	builders := make([]*ent.AppActionCreate, len(input))
	for i := range input {
		builders[i] = c.AppAction.Create().SetInput(*input[i])
	}
	err := c.AppAction.CreateBulk(builders...).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateAppMenus is the resolver for the createAppMenus field.
func (r *mutationResolver) CreateAppMenus(ctx context.Context, input []*ent.CreateAppMenuInput) (bool, error) {
	c := ent.FromContext(ctx)
	builders := make([]*ent.AppMenuCreate, len(input))
	for i := range input {
		builders[i] = c.AppMenu.Create().SetInput(*input[i])
	}
	err := c.AppMenu.CreateBulk(builders...).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateAppPolicies is the resolver for the createAppPolicies field.
func (r *mutationResolver) CreateAppPolicies(ctx context.Context, input []*ent.CreateAppPolicyInput) (bool, error) {
	err := r.Resource.CreateAppPolicies(ctx, input)
	if err != nil {
		return false, err
	}
	return true, nil
}

// UpdateAppMenu is the resolver for the updateAppMenu field.
func (r *mutationResolver) UpdateAppMenu(ctx context.Context, input ent.UpdateAppMenuInput) (*ent.AppMenu, error) {
	panic(fmt.Errorf("not implemented: UpdateAppMenu - updateAppMenu"))
}

// ChangeAppMenuTree is the resolver for the changeAppMenuTree field.
func (r *mutationResolver) ChangeAppMenuTree(ctx context.Context, sourceID int, targetID int, targetLocation *string) (*bool, error) {
	panic(fmt.Errorf("not implemented: ChangeAppMenuTree - changeAppMenuTree"))
}

// CreateAppRole is the resolver for the createAppRole field.
func (r *mutationResolver) CreateAppRole(ctx context.Context, input ent.CreateAppRoleInput) (*ent.AppRole, error) {
	panic(fmt.Errorf("not implemented: CreateAppRole - createAppRole"))
}

// UpdateAppRole is the resolver for the updateAppRole field.
func (r *mutationResolver) UpdateAppRole(ctx context.Context, input ent.UpdateAppRoleInput) (*ent.AppRole, error) {
	panic(fmt.Errorf("not implemented: UpdateAppRole - updateAppRole"))
}

// AssignOrganizationApp is the resolver for the assignOrganizationApp field.
func (r *mutationResolver) AssignOrganizationApp(ctx context.Context, orgID int, appID int) (bool, error) {
	panic(fmt.Errorf("not implemented: AssignOrganizationApp - assignOrganizationApp"))
}

// RevokeOrganizationApp is the resolver for the revokeOrganizationApp field.
func (r *mutationResolver) RevokeOrganizationApp(ctx context.Context, orgID int, appID int) (bool, error) {
	panic(fmt.Errorf("not implemented: RevokeOrganizationApp - revokeOrganizationApp"))
}

// AssignOrganizationAppPolicy is the resolver for the assignOrganizationAppPolicy field.
func (r *mutationResolver) AssignOrganizationAppPolicy(ctx context.Context, orgID int, policyID int) (bool, error) {
	panic(fmt.Errorf("not implemented: AssignOrganizationAppPolicy - assignOrganizationAppPolicy"))
}

// RevokeOrganizationAppPolicy is the resolver for the revokeOrganizationAppPolicy field.
func (r *mutationResolver) RevokeOrganizationAppPolicy(ctx context.Context, orgID int, policyID int) (bool, error) {
	panic(fmt.Errorf("not implemented: RevokeOrganizationAppPolicy - revokeOrganizationAppPolicy"))
}

// Grant is the resolver for the grant field.
func (r *mutationResolver) Grant(ctx context.Context, input ent.CreatePermissionInput) (*ent.Permission, error) {
	return r.Resource.Grant(ctx, input)
}

// LoginProfile is the resolver for the loginProfile field.
func (r *createUserInputResolver) LoginProfile(ctx context.Context, obj *ent.CreateUserInput, data *ent.CreateUserLoginProfileInput) error {
	if data != nil {
		row, err := ent.FromContext(ctx).UserLoginProfile.Create().SetInput(*data).Save(ctx)
		if err != nil {
			return err
		}
		obj.LoginProfileID = &row.ID
	}
	return nil
}

// Password is the resolver for the password field.
func (r *createUserInputResolver) Password(ctx context.Context, obj *ent.CreateUserInput, data *ent.CreateUserPasswordInput) error {
	if data != nil {
		row, err := r.Resource.CreateUserPassword(ctx, data)
		if err != nil {
			return err
		}
		obj.PasswordIDs = append(obj.PasswordIDs, row.ID)
	}
	return nil
}

// Mutation returns generated1.MutationResolver implementation.
func (r *Resolver) Mutation() generated1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
