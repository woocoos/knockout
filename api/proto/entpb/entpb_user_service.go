// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	ent "github.com/woocoos/knockout/ent"
	user "github.com/woocoos/knockout/ent/user"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strings "strings"
)

// UserService implements UserServiceServer
type UserService struct {
	client *ent.Client
	UnimplementedUserServiceServer
}

// NewUserService returns a new UserService
func NewUserService(client *ent.Client) *UserService {
	return &UserService{
		client: client,
	}
}

func toProtoUser_CreationType(e user.CreationType) User_CreationType {
	if v, ok := User_CreationType_value[strings.ToUpper("CREATION_TYPE_"+string(e))]; ok {
		return User_CreationType(v)
	}
	return User_CreationType(0)
}

func toEntUser_CreationType(e User_CreationType) user.CreationType {
	if v, ok := User_CreationType_name[int32(e)]; ok {
		entVal := map[string]string{
			"CREATION_TYPE_INVITATION": "invitation",
			"CREATION_TYPE_REGISTER":   "register",
			"CREATION_TYPE_MANUAL":     "manual",
		}[v]
		return user.CreationType(entVal)
	}
	return ""
}

func toProtoUser_UserType(e user.UserType) User_UserType {
	if v, ok := User_UserType_value[strings.ToUpper("USER_TYPE_"+string(e))]; ok {
		return User_UserType(v)
	}
	return User_UserType(0)
}

func toEntUser_UserType(e User_UserType) user.UserType {
	if v, ok := User_UserType_name[int32(e)]; ok {
		entVal := map[string]string{
			"USER_TYPE_ACCOUNT": "account",
			"USER_TYPE_MEMBER":  "member",
		}[v]
		return user.UserType(entVal)
	}
	return ""
}

// toProtoUser transforms the ent type to the pb type
func toProtoUser(e *ent.User) (*User, error) {
	v := &User{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	created_by := int64(e.CreatedBy)
	v.CreatedBy = created_by
	creation_type := toProtoUser_CreationType(e.CreationType)
	v.CreationType = creation_type
	display_name := e.DisplayName
	v.DisplayName = display_name
	email := wrapperspb.String(e.Email)
	v.Email = email
	id := int64(e.ID)
	v.Id = id
	mobile := wrapperspb.String(e.Mobile)
	v.Mobile = mobile
	principal_name := e.PrincipalName
	v.PrincipalName = principal_name
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	updated_by := wrapperspb.Int64(int64(e.UpdatedBy))
	v.UpdatedBy = updated_by
	user_type := toProtoUser_UserType(e.UserType)
	v.UserType = user_type
	return v, nil
}

// Get implements UserServiceServer.Get
func (svc *UserService) Get(ctx context.Context, req *GetUserRequest) (*User, error) {
	var (
		err error
		get *ent.User
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetUserRequest_VIEW_UNSPECIFIED, GetUserRequest_BASIC:
		get, err = svc.client.User.Get(ctx, id)
	case GetUserRequest_WITH_EDGE_IDS:
		get, err = svc.client.User.Query().
			Where(user.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoUser(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
