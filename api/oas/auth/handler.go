// Code generated by woco, DO NOT EDIT.

package auth

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/tsingsun/woocoo/pkg/gds"
	"github.com/tsingsun/woocoo/web/handler"
)

// RegisterAuthHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterAuthHandlers(router *gin.RouterGroup, si AuthServer) {
	router.POST("/mfa/bind", wrapBindMfa(si))
	router.POST("/mfa/bind-prepare", wrapBindMfaPrepare(si))
	router.GET("/captcha", wrapCaptcha(si))
	router.POST("/spm/create", wrapCreateSpm(si))
	router.POST("/forget-pwd/begin", wrapForgetPwdBegin(si))
	router.POST("/forget-pwd/reset", wrapForgetPwdReset(si))
	router.POST("/forget-pwd/send-email", wrapForgetPwdSendEmail(si))
	router.POST("/forget-pwd/verify-email", wrapForgetPwdVerifyEmail(si))
	router.POST("/forget-pwd/verify-mfa", wrapForgetPwdVerifyMfa(si))
	router.POST("/oss/presignurl", wrapGetPreSignUrl(si))
	router.POST("/oss/sts", wrapGetSTS(si))
	router.POST("/spm/auth", wrapGetSpmAuth(si))
	router.POST("/login/auth", wrapLogin(si))
	router.POST("/logout", wrapLogout(si))
	router.POST("/login/refresh-token", wrapRefreshToken(si))
	router.POST("/login/reset-password", wrapResetPassword(si))
	router.POST("/token", wrapToken(si))
	router.POST("/mfa/unbind", wrapUnBindMfa(si))
	router.POST("/login/verify-factor", wrapVerifyFactor(si))
}

func wrapBindMfa(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req BindMfaRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.BindMfa(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapBindMfaPrepare(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		resp, err := si.BindMfaPrepare(c)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapCaptcha(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		req := CaptchaRequest{
			W: gds.Ptr(int(200)),
			H: gds.Ptr(int(100)),
		}
		if err := c.ShouldBindQuery(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.Captcha(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapCreateSpm(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		resp, err := si.CreateSpm(c)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapForgetPwdBegin(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req ForgetPwdBeginRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.ForgetPwdBegin(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapForgetPwdReset(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req ForgetPwdResetRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.ForgetPwdReset(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapForgetPwdSendEmail(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req ForgetPwdSendEmailRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.ForgetPwdSendEmail(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapForgetPwdVerifyEmail(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req ForgetPwdVerifyEmailRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.ForgetPwdVerifyEmail(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapForgetPwdVerifyMfa(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req ForgetPwdVerifyMfaRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.ForgetPwdVerifyMfa(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapGetPreSignUrl(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req GetPreSignUrlRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.GetPreSignUrl(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapGetSTS(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req GetSTSRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.GetSTS(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapGetSpmAuth(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req GetSpmAuthRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.GetSpmAuth(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapLogin(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req LoginRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.Login(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapLogout(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		err := si.Logout(c)
		if err != nil {
			c.Error(err)
			return
		}
	}
}

func wrapRefreshToken(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req RefreshTokenRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.RefreshToken(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapResetPassword(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req ResetPasswordRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.ResetPassword(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapToken(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req TokenRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.Token(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapUnBindMfa(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req UnBindMfaRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.UnBindMfa(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}

func wrapVerifyFactor(si AuthServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var req VerifyFactorRequest
		if err := c.ShouldBind(&req); err != nil {
			handler.AbortWithError(c, http.StatusBadRequest, err)
			return
		}
		resp, err := si.VerifyFactor(c, &req)
		if err != nil {
			c.Error(err)
			return
		}
		handler.NegotiateResponse(c, http.StatusOK, resp, []string{"application/json"})
	}
}
