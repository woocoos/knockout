// Code generated by woco, DO NOT EDIT.

package auth

import (
	"fmt"
)

// Captcha captcha info
type Captcha struct {
	CaptchaId    string `json:"captchaId,omitempty"`
	CaptchaImage string `json:"captchaImage,omitempty"`
}

type Domain struct {
	ID   int    `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
}

type Error struct {
	Code    int    `json:"code,omitempty"`
	Details string `json:"details,omitempty"`
	Message string `json:"message,omitempty"`
}

type ErrorResponse struct {
	Errors []*Error `json:"errors,omitempty"`
}

type ForgetPwdBeginResponse struct {
	StateToken    string             `json:"stateToken,omitempty"`
	StateTokenTTL float64            `json:"stateTokenTTL,omitempty"`
	Verifies      []*ForgetPwdVerify `json:"verifies,omitempty"`
}

type ForgetPwdVerify struct {
	Kind  ForgetPwdVerifyKind `binding:"omitempty,oneof=email mfa" json:"kind,omitempty"`
	Value string              `json:"value,omitempty"`
}

// ForgetPwdVerifyKind defines the type for the ForgetPwdVerify.kind enum field.
type ForgetPwdVerifyKind string

// ForgetPwdVerifyKind values.
const (
	ForgetPwdVerifyKindEmail ForgetPwdVerifyKind = "email"
	ForgetPwdVerifyKindMfa   ForgetPwdVerifyKind = "mfa"
)

func (k ForgetPwdVerifyKind) String() string {
	return string(k)
}

// ForgetPwdVerifyKindValidator is a validator for the ForgetPwdVerifyKind field enum values.
func ForgetPwdVerifyKindValidator(k ForgetPwdVerifyKind) error {
	switch k {
	case ForgetPwdVerifyKindEmail, ForgetPwdVerifyKindMfa:
		return nil
	default:
		return fmt.Errorf("ForgetPwdVerifyKind does not allow the value '%s'", k)
	}
}

// LoginResponse when complete login accessToken,expiresAt,refreshToken will be filled
type LoginResponse struct {
	AccessToken  string `json:"accessToken,omitempty"`
	CallbackUrl  string `json:"callbackUrl,omitempty"`
	ExpiresIn    int    `json:"expiresIn,omitempty"`
	RefreshToken string `json:"refreshToken,omitempty"`
	// StateToken when need MFA or Change PWD. use the state token to request callback_url
	StateToken string `json:"stateToken,omitempty"`
	User       *User  `json:"user,omitempty"`
}

// Mfa mfa info
type Mfa struct {
	PrincipalName string `json:"principalName,omitempty"`
	QrCodeUri     string `json:"qrCodeUri,omitempty"`
	Secret        string `json:"secret,omitempty"`
	// StateToken when need MFA or Change PWD. use the state token to request callback_url
	StateToken    string  `json:"stateToken,omitempty"`
	StateTokenTTL float64 `json:"stateTokenTTL,omitempty"`
}

type User struct {
	AvatarFileId int       `json:"avatarFileId,omitempty"`
	DisplayName  string    `json:"displayName,omitempty"`
	Domains      []*Domain `json:"domains,omitempty"`
	ID           int       `json:"id,omitempty"`
}
