openapi: 3.0.0
info:
  title: Auth API
  version: 0.0.1
  description: |
    This API is used to authenticate users and get a JWT token.
    The token is used to access other APIs.
  contact:
    name: API Support
    email: 21997272@qq.com

servers:
  - url: http://localhost:10070
    description: Local server
tags:
  - name: auth
    description: Authentication API
  - name: file
    description: File API
paths:
  /login/auth:
    post:
      summary: Use this API to Login
      description: Use this API to Login
      tags:
        - auth
      operationId: login
      requestBody:
        description: Login with username and password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: username or email
                password:
                  type: string
                  description: hashed password
                captcha:
                  type: string
                  description: captcha code,if login fail 3 times, the login profile will demand captcha.
                captchaId:
                  type: string
                  description: captcha id,if login fail 3 times, the login profile will demand captcha.
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login/refresh-token:
    post:
      summary: Use this API to refresh token
      description: Use this API to refresh token
      tags:
        - auth
      operationId: refreshToken
      requestBody:
        description: refresh token with refreshToken
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: the refreshToken
              required:
                - refreshToken
      responses:
        '200':
          description: refresh token successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login/verify-factor:
    post:
      description: Verify a one-time password (OTP) value, provided for a second factor, when multi-factor authentication (MFA) is required.
      tags:
        - auth
      operationId: verifyFactor
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  description: provide the MFA deviceId. the deviceId is register by MFA setting.
                stateToken:
                  type: string
                otpToken:
                  type: string
              required:
                - deviceId
                - stateToken
                - otpToken
      responses:
        '200':
          description: complete the login flow. return token info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /login/reset-password:
    post:
      description: if login profile demand change password. use this API to reset password.
      tags:
        - auth
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stateToken:
                  type: string
                newPassword:
                  type: string
              required:
                - stateToken
                - newPassword
      responses:
        '200':
          description: complete the login flow. return token info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /logout:
    post:
      description: log out a user
      tags:
        - auth
      operationId: logout
      responses:
        default:
          description: successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: [ ]
  /token:
    post:
      tags:
        - auth
      operationId: token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [ "client_credentials" ]
                client_id:
                  type: string
                client_secret:
                  type: string
              required:
                - grant_type
                - client_id
                - client_secret
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    type: string
                  expires_in:
                    type: integer
  /captcha:
    get:
      summary: Use this API to get captcha
      description: Use this API to get captcha
      tags:
        - auth
      operationId: captcha
      parameters:
        - name: w
          in: query
          description: width of captcha
          schema:
              type: integer
              default: 200
        - name: h
          in: query
          description: height of captcha
          schema:
              type: integer
              default: 100
      responses:
        '200':
          description: get captcha successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Captcha'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /mfa/bind-prepare:
    post:
      description: Use this api to get the temporary MFA secret key.
      tags:
        - auth
      operationId: bindMfaPrepare
      responses:
        '200':
          description: complete the mfa bind flow. return mfa info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mfa'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /mfa/bind:
    post:
      description: Verify a one-time password (OTP) value to binding MFA.
      tags:
        - auth
      operationId: bindMfa
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stateToken:
                  type: string
                otpToken:
                  type: string
              required:
                - stateToken
                - otpToken
      responses:
        '200':
          description: complete the mfa bind flow
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /mfa/unbind:
    post:
      description: Verify a one-time password (OTP) value to unBind MFA.
      tags:
        - auth
      operationId: unBindMfa
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                otpToken:
                  type: string
              required:
                - otpToken
      responses:
        '200':
          description: complete the mfa bind flow
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /forget-pwd/begin:
    post:
      description: start the process of forgetting your password by verifying your account.
      tags:
        - auth
      operationId: forgetPwdBegin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                captcha:
                  type: string
                captchaId:
                  type: string
              required:
                - username
                - captcha
                - captchaId
      responses:
        '200':
          description: return the verify info and stateToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgetPwdBeginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /forget-pwd/verify-email:
    post:
      description: verify the email to reset-password.
      tags:
        - auth
      operationId: forgetPwdVerifyEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stateToken:
                  type: string
                  description: form begin
                captcha:
                  description: the email verify code
                  type: string
                captchaId:
                  description: the email verify code
                  type: string
              required:
                - stateToken
                - captcha
                - captchaId
      responses:
        '200':
          description: return the verify info and stateToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgetPwdBeginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /forget-pwd/send-email:
    post:
      description: send an email to get the verify code.
      tags:
        - auth
      operationId: forgetPwdSendEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stateToken:
                  type: string
                  description: form begin
              required:
                - stateToken
      responses:
        '200':
          description: whether the email is successfully to sent
          content:
            application/json:
              schema:
                type: string
                description: return captchaId on success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /forget-pwd/verify-mfa:
    post:
      description: verify the email to reset-password.
      tags:
        - auth
      operationId: forgetPwdVerifyMfa
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stateToken:
                  type: string
                  description: form begin
                otpToken:
                  description: the email verify code
                  type: string
              required:
                - stateToken
                - otpToken
      responses:
        '200':
          description: return the verify info and stateToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgetPwdBeginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /forget-pwd/reset:
    post:
      description: reset-password.
      tags:
        - auth
      operationId: forgetPwdReset
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stateToken:
                  type: string
                  description: from verify-mfa or verify-email
                newPassword:
                  type: string
              required:
                - stateToken
                - newPassword
      responses:
        '200':
          description: complete the forgetpwd flow
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /spm/create:
    post:
      description: create spm key.
      tags:
        - auth
      operationId: createSpm
      responses:
        '200':
          description: retrun the spm key
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /spm/auth:
    post:
      description: get auth data by spm.
      tags:
        - auth
      operationId: getSpmAuth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                spm:
                  type: string
                  description: the spm key to get auth data
              required:
                - spm
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /files:
    post:
      description: upload file
      tags:
        - file
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bucket:
                  type: string
                  description: the name of bucket，value is local
                key:
                  type: string
                  description: the path of file in the bucket
      responses:
        '200':
          description: upload success
          content:
            application/json:
              schema:
                type: string
                description: id of the file
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /files/report-ref-count:
    post:
      description: number of times that the file is referenced by business
      tags:
        - file
      operationId: reportRefCount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                inputs:
                  type: array
                  items:
                    $ref: '#/components/schemas/FileRefInput'
              required:
                - inputs
      responses:
        '200':
          description: report reference count success
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /files/upload-info:
    post:
      description: upload the file info for oss
      tags:
        - file
      operationId: uploadFileInfo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  $ref: '#/components/schemas/FileInput'
                fileSource:
                  $ref: '#/components/schemas/FileSourceInput'
              required:
                - file
                - fileSource
      responses:
        '200':
          description: upload file info success
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /files/{fileId}:
    get:
      description: get file info
      tags:
        - file
      operationId: getFile
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 文件信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      description: delete file
      tags:
        - file
      operationId: deleteFile
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: delete success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /files/{fileId}/raw:
    get:
      description: get file
      tags:
        - file
      operationId: getFileRaw
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get file raw data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginResponse:
      type: object
      description: when complete login accessToken,expiresAt,refreshToken will be filled
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
        refreshToken:
          type: string
        stateToken:
          type: string
          description: when need MFA or Change PWD. use the state token to request callback_url
        callbackUrl:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Captcha:
      type: object
      description: captcha info
      properties:
        captchaId:
          type: string
        captchaImage:
          type: string
    Mfa:
      type: object
      description: mfa info
      properties:
        principalName:
          type: string
        secret:
          type: string
        qrCodeUri:
            type: string
        stateToken:
          type: string
          description: when need MFA or Change PWD. use the state token to request callback_url
        stateTokenTTL:
          type: number
    User:
      type: object
      properties:
        id:
          type: integer
        displayName:
          type: string
        avatarFileId:
          type: integer
        domains:
          type: array
          items:
            $ref: "#/components/schemas/Domain"
    Domain:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        details:
          type: string
    ForgetPwdBeginResponse:
      type: object
      properties:
        stateToken:
          type: string
        stateTokenTTL:
          type: number
        verifies:
          type: array
          items:
            $ref: '#/components/schemas/ForgetPwdVerify'
    ForgetPwdVerify:
      type: object
      properties:
        kind:
          type: string
          enum: ["email","mfa"]
        value:
          type: string
    FileInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        size:
          type: integer
        createdAt:
          type: string
          format: date-time
    FileInput:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        size:
          type: integer
        mine_type:
          type: string
      required:
        - name
        - path
        - size
        - mine_type
    FileSourceInput:
      type: object
      properties:
        kind:
          type: string
          enum: [ "local","alioss" ]
        endpoint:
          type: string
        region:
          type: string
        bucket:
          type: string
      required:
        - kind
        - endpoint
        - region
        - bucket
    FileRefInput:
      type: object
      properties:
        fileId:
          type: integer
        opType:
          type: string
          description: plus or minus the reference count
          enum: [ "plus","minus" ]
      required:
        - fileId
        - opType