// Code generated by ent, DO NOT EDIT.

package orgroleuser

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the orgroleuser type in the database.
	Label = "org_role_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrgRoleID holds the string denoting the org_role_id field in the database.
	FieldOrgRoleID = "org_role_id"
	// FieldOrgUserID holds the string denoting the org_user_id field in the database.
	FieldOrgUserID = "org_user_id"
	// EdgeOrgRole holds the string denoting the org_role edge name in mutations.
	EdgeOrgRole = "org_role"
	// EdgeOrgUser holds the string denoting the org_user edge name in mutations.
	EdgeOrgUser = "org_user"
	// Table holds the table name of the orgroleuser in the database.
	Table = "org_role_user"
	// OrgRoleTable is the table that holds the org_role relation/edge.
	OrgRoleTable = "org_role_user"
	// OrgRoleInverseTable is the table name for the OrgRole entity.
	// It exists in this package in order to avoid circular dependency with the "orgrole" package.
	OrgRoleInverseTable = "org_role"
	// OrgRoleColumn is the table column denoting the org_role relation/edge.
	OrgRoleColumn = "org_role_id"
	// OrgUserTable is the table that holds the org_user relation/edge.
	OrgUserTable = "org_role_user"
	// OrgUserInverseTable is the table name for the OrgUser entity.
	// It exists in this package in order to avoid circular dependency with the "orguser" package.
	OrgUserInverseTable = "org_user"
	// OrgUserColumn is the table column denoting the org_user relation/edge.
	OrgUserColumn = "org_user_id"
)

// Columns holds all SQL columns for orgroleuser fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldOrgRoleID,
	FieldOrgUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/knockout/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
