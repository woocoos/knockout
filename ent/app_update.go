// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appdict"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/appres"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgapp"
	"github.com/woocoos/knockout/ent/predicate"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AppUpdate) SetUpdatedBy(i int) *AppUpdate {
	au.mutation.ResetUpdatedBy()
	au.mutation.SetUpdatedBy(i)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AppUpdate) SetNillableUpdatedBy(i *int) *AppUpdate {
	if i != nil {
		au.SetUpdatedBy(*i)
	}
	return au
}

// AddUpdatedBy adds i to the "updated_by" field.
func (au *AppUpdate) AddUpdatedBy(i int) *AppUpdate {
	au.mutation.AddUpdatedBy(i)
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *AppUpdate) ClearUpdatedBy() *AppUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppUpdate) SetUpdatedAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AppUpdate) SetNillableUpdatedAt(t *time.Time) *AppUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AppUpdate) ClearUpdatedAt() *AppUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetName sets the "name" field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AppUpdate) SetNillableName(s *string) *AppUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetKind sets the "kind" field.
func (au *AppUpdate) SetKind(a app.Kind) *AppUpdate {
	au.mutation.SetKind(a)
	return au
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (au *AppUpdate) SetNillableKind(a *app.Kind) *AppUpdate {
	if a != nil {
		au.SetKind(*a)
	}
	return au
}

// SetRedirectURI sets the "redirect_uri" field.
func (au *AppUpdate) SetRedirectURI(s string) *AppUpdate {
	au.mutation.SetRedirectURI(s)
	return au
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (au *AppUpdate) SetNillableRedirectURI(s *string) *AppUpdate {
	if s != nil {
		au.SetRedirectURI(*s)
	}
	return au
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (au *AppUpdate) ClearRedirectURI() *AppUpdate {
	au.mutation.ClearRedirectURI()
	return au
}

// SetAppKey sets the "app_key" field.
func (au *AppUpdate) SetAppKey(s string) *AppUpdate {
	au.mutation.SetAppKey(s)
	return au
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppKey(s *string) *AppUpdate {
	if s != nil {
		au.SetAppKey(*s)
	}
	return au
}

// ClearAppKey clears the value of the "app_key" field.
func (au *AppUpdate) ClearAppKey() *AppUpdate {
	au.mutation.ClearAppKey()
	return au
}

// SetAppSecret sets the "app_secret" field.
func (au *AppUpdate) SetAppSecret(s string) *AppUpdate {
	au.mutation.SetAppSecret(s)
	return au
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppSecret(s *string) *AppUpdate {
	if s != nil {
		au.SetAppSecret(*s)
	}
	return au
}

// ClearAppSecret clears the value of the "app_secret" field.
func (au *AppUpdate) ClearAppSecret() *AppUpdate {
	au.mutation.ClearAppSecret()
	return au
}

// SetScopes sets the "scopes" field.
func (au *AppUpdate) SetScopes(s string) *AppUpdate {
	au.mutation.SetScopes(s)
	return au
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (au *AppUpdate) SetNillableScopes(s *string) *AppUpdate {
	if s != nil {
		au.SetScopes(*s)
	}
	return au
}

// ClearScopes clears the value of the "scopes" field.
func (au *AppUpdate) ClearScopes() *AppUpdate {
	au.mutation.ClearScopes()
	return au
}

// SetTokenValidity sets the "token_validity" field.
func (au *AppUpdate) SetTokenValidity(i int32) *AppUpdate {
	au.mutation.ResetTokenValidity()
	au.mutation.SetTokenValidity(i)
	return au
}

// SetNillableTokenValidity sets the "token_validity" field if the given value is not nil.
func (au *AppUpdate) SetNillableTokenValidity(i *int32) *AppUpdate {
	if i != nil {
		au.SetTokenValidity(*i)
	}
	return au
}

// AddTokenValidity adds i to the "token_validity" field.
func (au *AppUpdate) AddTokenValidity(i int32) *AppUpdate {
	au.mutation.AddTokenValidity(i)
	return au
}

// ClearTokenValidity clears the value of the "token_validity" field.
func (au *AppUpdate) ClearTokenValidity() *AppUpdate {
	au.mutation.ClearTokenValidity()
	return au
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (au *AppUpdate) SetRefreshTokenValidity(i int32) *AppUpdate {
	au.mutation.ResetRefreshTokenValidity()
	au.mutation.SetRefreshTokenValidity(i)
	return au
}

// SetNillableRefreshTokenValidity sets the "refresh_token_validity" field if the given value is not nil.
func (au *AppUpdate) SetNillableRefreshTokenValidity(i *int32) *AppUpdate {
	if i != nil {
		au.SetRefreshTokenValidity(*i)
	}
	return au
}

// AddRefreshTokenValidity adds i to the "refresh_token_validity" field.
func (au *AppUpdate) AddRefreshTokenValidity(i int32) *AppUpdate {
	au.mutation.AddRefreshTokenValidity(i)
	return au
}

// ClearRefreshTokenValidity clears the value of the "refresh_token_validity" field.
func (au *AppUpdate) ClearRefreshTokenValidity() *AppUpdate {
	au.mutation.ClearRefreshTokenValidity()
	return au
}

// SetLogo sets the "logo" field.
func (au *AppUpdate) SetLogo(s string) *AppUpdate {
	au.mutation.SetLogo(s)
	return au
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (au *AppUpdate) SetNillableLogo(s *string) *AppUpdate {
	if s != nil {
		au.SetLogo(*s)
	}
	return au
}

// ClearLogo clears the value of the "logo" field.
func (au *AppUpdate) ClearLogo() *AppUpdate {
	au.mutation.ClearLogo()
	return au
}

// SetLogoFileID sets the "logo_file_id" field.
func (au *AppUpdate) SetLogoFileID(i int) *AppUpdate {
	au.mutation.ResetLogoFileID()
	au.mutation.SetLogoFileID(i)
	return au
}

// SetNillableLogoFileID sets the "logo_file_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableLogoFileID(i *int) *AppUpdate {
	if i != nil {
		au.SetLogoFileID(*i)
	}
	return au
}

// AddLogoFileID adds i to the "logo_file_id" field.
func (au *AppUpdate) AddLogoFileID(i int) *AppUpdate {
	au.mutation.AddLogoFileID(i)
	return au
}

// ClearLogoFileID clears the value of the "logo_file_id" field.
func (au *AppUpdate) ClearLogoFileID() *AppUpdate {
	au.mutation.ClearLogoFileID()
	return au
}

// SetComments sets the "comments" field.
func (au *AppUpdate) SetComments(s string) *AppUpdate {
	au.mutation.SetComments(s)
	return au
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (au *AppUpdate) SetNillableComments(s *string) *AppUpdate {
	if s != nil {
		au.SetComments(*s)
	}
	return au
}

// ClearComments clears the value of the "comments" field.
func (au *AppUpdate) ClearComments() *AppUpdate {
	au.mutation.ClearComments()
	return au
}

// SetStatus sets the "status" field.
func (au *AppUpdate) SetStatus(ts typex.SimpleStatus) *AppUpdate {
	au.mutation.SetStatus(ts)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AppUpdate) SetNillableStatus(ts *typex.SimpleStatus) *AppUpdate {
	if ts != nil {
		au.SetStatus(*ts)
	}
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AppUpdate) ClearStatus() *AppUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetPrivate sets the "private" field.
func (au *AppUpdate) SetPrivate(b bool) *AppUpdate {
	au.mutation.SetPrivate(b)
	return au
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (au *AppUpdate) SetNillablePrivate(b *bool) *AppUpdate {
	if b != nil {
		au.SetPrivate(*b)
	}
	return au
}

// ClearPrivate clears the value of the "private" field.
func (au *AppUpdate) ClearPrivate() *AppUpdate {
	au.mutation.ClearPrivate()
	return au
}

// SetOwnerOrgID sets the "owner_org_id" field.
func (au *AppUpdate) SetOwnerOrgID(i int) *AppUpdate {
	au.mutation.ResetOwnerOrgID()
	au.mutation.SetOwnerOrgID(i)
	return au
}

// SetNillableOwnerOrgID sets the "owner_org_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableOwnerOrgID(i *int) *AppUpdate {
	if i != nil {
		au.SetOwnerOrgID(*i)
	}
	return au
}

// AddOwnerOrgID adds i to the "owner_org_id" field.
func (au *AppUpdate) AddOwnerOrgID(i int) *AppUpdate {
	au.mutation.AddOwnerOrgID(i)
	return au
}

// ClearOwnerOrgID clears the value of the "owner_org_id" field.
func (au *AppUpdate) ClearOwnerOrgID() *AppUpdate {
	au.mutation.ClearOwnerOrgID()
	return au
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (au *AppUpdate) AddMenuIDs(ids ...int) *AppUpdate {
	au.mutation.AddMenuIDs(ids...)
	return au
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (au *AppUpdate) AddMenus(a ...*AppMenu) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddMenuIDs(ids...)
}

// AddActionIDs adds the "actions" edge to the AppAction entity by IDs.
func (au *AppUpdate) AddActionIDs(ids ...int) *AppUpdate {
	au.mutation.AddActionIDs(ids...)
	return au
}

// AddActions adds the "actions" edges to the AppAction entity.
func (au *AppUpdate) AddActions(a ...*AppAction) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddActionIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the AppRes entity by IDs.
func (au *AppUpdate) AddResourceIDs(ids ...int) *AppUpdate {
	au.mutation.AddResourceIDs(ids...)
	return au
}

// AddResources adds the "resources" edges to the AppRes entity.
func (au *AppUpdate) AddResources(a ...*AppRes) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddResourceIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AppRole entity by IDs.
func (au *AppUpdate) AddRoleIDs(ids ...int) *AppUpdate {
	au.mutation.AddRoleIDs(ids...)
	return au
}

// AddRoles adds the "roles" edges to the AppRole entity.
func (au *AppUpdate) AddRoles(a ...*AppRole) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddRoleIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the AppPolicy entity by IDs.
func (au *AppUpdate) AddPolicyIDs(ids ...int) *AppUpdate {
	au.mutation.AddPolicyIDs(ids...)
	return au
}

// AddPolicies adds the "policies" edges to the AppPolicy entity.
func (au *AppUpdate) AddPolicies(a ...*AppPolicy) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddPolicyIDs(ids...)
}

// AddOrgIDs adds the "orgs" edge to the Org entity by IDs.
func (au *AppUpdate) AddOrgIDs(ids ...int) *AppUpdate {
	au.mutation.AddOrgIDs(ids...)
	return au
}

// AddOrgs adds the "orgs" edges to the Org entity.
func (au *AppUpdate) AddOrgs(o ...*Org) *AppUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOrgIDs(ids...)
}

// AddDictIDs adds the "dicts" edge to the AppDict entity by IDs.
func (au *AppUpdate) AddDictIDs(ids ...int) *AppUpdate {
	au.mutation.AddDictIDs(ids...)
	return au
}

// AddDicts adds the "dicts" edges to the AppDict entity.
func (au *AppUpdate) AddDicts(a ...*AppDict) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddDictIDs(ids...)
}

// AddOrgAppIDs adds the "org_app" edge to the OrgApp entity by IDs.
func (au *AppUpdate) AddOrgAppIDs(ids ...int) *AppUpdate {
	au.mutation.AddOrgAppIDs(ids...)
	return au
}

// AddOrgApp adds the "org_app" edges to the OrgApp entity.
func (au *AppUpdate) AddOrgApp(o ...*OrgApp) *AppUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOrgAppIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// ClearMenus clears all "menus" edges to the AppMenu entity.
func (au *AppUpdate) ClearMenus() *AppUpdate {
	au.mutation.ClearMenus()
	return au
}

// RemoveMenuIDs removes the "menus" edge to AppMenu entities by IDs.
func (au *AppUpdate) RemoveMenuIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveMenuIDs(ids...)
	return au
}

// RemoveMenus removes "menus" edges to AppMenu entities.
func (au *AppUpdate) RemoveMenus(a ...*AppMenu) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveMenuIDs(ids...)
}

// ClearActions clears all "actions" edges to the AppAction entity.
func (au *AppUpdate) ClearActions() *AppUpdate {
	au.mutation.ClearActions()
	return au
}

// RemoveActionIDs removes the "actions" edge to AppAction entities by IDs.
func (au *AppUpdate) RemoveActionIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveActionIDs(ids...)
	return au
}

// RemoveActions removes "actions" edges to AppAction entities.
func (au *AppUpdate) RemoveActions(a ...*AppAction) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveActionIDs(ids...)
}

// ClearResources clears all "resources" edges to the AppRes entity.
func (au *AppUpdate) ClearResources() *AppUpdate {
	au.mutation.ClearResources()
	return au
}

// RemoveResourceIDs removes the "resources" edge to AppRes entities by IDs.
func (au *AppUpdate) RemoveResourceIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveResourceIDs(ids...)
	return au
}

// RemoveResources removes "resources" edges to AppRes entities.
func (au *AppUpdate) RemoveResources(a ...*AppRes) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveResourceIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AppRole entity.
func (au *AppUpdate) ClearRoles() *AppUpdate {
	au.mutation.ClearRoles()
	return au
}

// RemoveRoleIDs removes the "roles" edge to AppRole entities by IDs.
func (au *AppUpdate) RemoveRoleIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveRoleIDs(ids...)
	return au
}

// RemoveRoles removes "roles" edges to AppRole entities.
func (au *AppUpdate) RemoveRoles(a ...*AppRole) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveRoleIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the AppPolicy entity.
func (au *AppUpdate) ClearPolicies() *AppUpdate {
	au.mutation.ClearPolicies()
	return au
}

// RemovePolicyIDs removes the "policies" edge to AppPolicy entities by IDs.
func (au *AppUpdate) RemovePolicyIDs(ids ...int) *AppUpdate {
	au.mutation.RemovePolicyIDs(ids...)
	return au
}

// RemovePolicies removes "policies" edges to AppPolicy entities.
func (au *AppUpdate) RemovePolicies(a ...*AppPolicy) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemovePolicyIDs(ids...)
}

// ClearOrgs clears all "orgs" edges to the Org entity.
func (au *AppUpdate) ClearOrgs() *AppUpdate {
	au.mutation.ClearOrgs()
	return au
}

// RemoveOrgIDs removes the "orgs" edge to Org entities by IDs.
func (au *AppUpdate) RemoveOrgIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveOrgIDs(ids...)
	return au
}

// RemoveOrgs removes "orgs" edges to Org entities.
func (au *AppUpdate) RemoveOrgs(o ...*Org) *AppUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOrgIDs(ids...)
}

// ClearDicts clears all "dicts" edges to the AppDict entity.
func (au *AppUpdate) ClearDicts() *AppUpdate {
	au.mutation.ClearDicts()
	return au
}

// RemoveDictIDs removes the "dicts" edge to AppDict entities by IDs.
func (au *AppUpdate) RemoveDictIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveDictIDs(ids...)
	return au
}

// RemoveDicts removes "dicts" edges to AppDict entities.
func (au *AppUpdate) RemoveDicts(a ...*AppDict) *AppUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveDictIDs(ids...)
}

// ClearOrgApp clears all "org_app" edges to the OrgApp entity.
func (au *AppUpdate) ClearOrgApp() *AppUpdate {
	au.mutation.ClearOrgApp()
	return au
}

// RemoveOrgAppIDs removes the "org_app" edge to OrgApp entities by IDs.
func (au *AppUpdate) RemoveOrgAppIDs(ids ...int) *AppUpdate {
	au.mutation.RemoveOrgAppIDs(ids...)
	return au
}

// RemoveOrgApp removes "org_app" edges to OrgApp entities.
func (au *AppUpdate) RemoveOrgApp(o ...*OrgApp) *AppUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOrgAppIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := app.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "App.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Kind(); ok {
		if err := app.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "App.kind": %w`, err)}
		}
	}
	if v, ok := au.mutation.RedirectURI(); ok {
		if err := app.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "App.redirect_uri": %w`, err)}
		}
	}
	if v, ok := au.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf(`ent: validator failed for field "App.app_secret": %w`, err)}
		}
	}
	if v, ok := au.mutation.Scopes(); ok {
		if err := app.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "App.scopes": %w`, err)}
		}
	}
	if v, ok := au.mutation.Logo(); ok {
		if err := app.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`ent: validator failed for field "App.logo": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "App.status": %w`, err)}
		}
	}
	return nil
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(app.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(app.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Kind(); ok {
		_spec.SetField(app.FieldKind, field.TypeEnum, value)
	}
	if value, ok := au.mutation.RedirectURI(); ok {
		_spec.SetField(app.FieldRedirectURI, field.TypeString, value)
	}
	if au.mutation.RedirectURICleared() {
		_spec.ClearField(app.FieldRedirectURI, field.TypeString)
	}
	if value, ok := au.mutation.AppKey(); ok {
		_spec.SetField(app.FieldAppKey, field.TypeString, value)
	}
	if au.mutation.AppKeyCleared() {
		_spec.ClearField(app.FieldAppKey, field.TypeString)
	}
	if value, ok := au.mutation.AppSecret(); ok {
		_spec.SetField(app.FieldAppSecret, field.TypeString, value)
	}
	if au.mutation.AppSecretCleared() {
		_spec.ClearField(app.FieldAppSecret, field.TypeString)
	}
	if value, ok := au.mutation.Scopes(); ok {
		_spec.SetField(app.FieldScopes, field.TypeString, value)
	}
	if au.mutation.ScopesCleared() {
		_spec.ClearField(app.FieldScopes, field.TypeString)
	}
	if value, ok := au.mutation.TokenValidity(); ok {
		_spec.SetField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedTokenValidity(); ok {
		_spec.AddField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if au.mutation.TokenValidityCleared() {
		_spec.ClearField(app.FieldTokenValidity, field.TypeInt32)
	}
	if value, ok := au.mutation.RefreshTokenValidity(); ok {
		_spec.SetField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedRefreshTokenValidity(); ok {
		_spec.AddField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if au.mutation.RefreshTokenValidityCleared() {
		_spec.ClearField(app.FieldRefreshTokenValidity, field.TypeInt32)
	}
	if value, ok := au.mutation.Logo(); ok {
		_spec.SetField(app.FieldLogo, field.TypeString, value)
	}
	if au.mutation.LogoCleared() {
		_spec.ClearField(app.FieldLogo, field.TypeString)
	}
	if value, ok := au.mutation.LogoFileID(); ok {
		_spec.SetField(app.FieldLogoFileID, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedLogoFileID(); ok {
		_spec.AddField(app.FieldLogoFileID, field.TypeInt, value)
	}
	if au.mutation.LogoFileIDCleared() {
		_spec.ClearField(app.FieldLogoFileID, field.TypeInt)
	}
	if value, ok := au.mutation.Comments(); ok {
		_spec.SetField(app.FieldComments, field.TypeString, value)
	}
	if au.mutation.CommentsCleared() {
		_spec.ClearField(app.FieldComments, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeEnum, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(app.FieldStatus, field.TypeEnum)
	}
	if value, ok := au.mutation.Private(); ok {
		_spec.SetField(app.FieldPrivate, field.TypeBool, value)
	}
	if au.mutation.PrivateCleared() {
		_spec.ClearField(app.FieldPrivate, field.TypeBool)
	}
	if value, ok := au.mutation.OwnerOrgID(); ok {
		_spec.SetField(app.FieldOwnerOrgID, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedOwnerOrgID(); ok {
		_spec.AddField(app.FieldOwnerOrgID, field.TypeInt, value)
	}
	if au.mutation.OwnerOrgIDCleared() {
		_spec.ClearField(app.FieldOwnerOrgID, field.TypeInt)
	}
	if au.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMenusIDs(); len(nodes) > 0 && !au.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ActionsTable,
			Columns: []string{app.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedActionsIDs(); len(nodes) > 0 && !au.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ActionsTable,
			Columns: []string{app.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ActionsTable,
			Columns: []string{app.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ResourcesTable,
			Columns: []string{app.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !au.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ResourcesTable,
			Columns: []string{app.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ResourcesTable,
			Columns: []string{app.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.RolesTable,
			Columns: []string{app.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRolesIDs(); len(nodes) > 0 && !au.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.RolesTable,
			Columns: []string{app.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.RolesTable,
			Columns: []string{app.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PoliciesTable,
			Columns: []string{app.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !au.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PoliciesTable,
			Columns: []string{app.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PoliciesTable,
			Columns: []string{app.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   app.OrgsTable,
			Columns: app.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		createE := &OrgAppCreate{config: au.config, mutation: newOrgAppMutation(au.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOrgsIDs(); len(nodes) > 0 && !au.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   app.OrgsTable,
			Columns: app.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: au.config, mutation: newOrgAppMutation(au.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   app.OrgsTable,
			Columns: app.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: au.config, mutation: newOrgAppMutation(au.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.DictsTable,
			Columns: []string{app.DictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDictsIDs(); len(nodes) > 0 && !au.mutation.DictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.DictsTable,
			Columns: []string{app.DictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.DictsTable,
			Columns: []string{app.DictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrgAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.OrgAppTable,
			Columns: []string{app.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOrgAppIDs(); len(nodes) > 0 && !au.mutation.OrgAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.OrgAppTable,
			Columns: []string{app.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrgAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.OrgAppTable,
			Columns: []string{app.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AppUpdateOne) SetUpdatedBy(i int) *AppUpdateOne {
	auo.mutation.ResetUpdatedBy()
	auo.mutation.SetUpdatedBy(i)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableUpdatedBy(i *int) *AppUpdateOne {
	if i != nil {
		auo.SetUpdatedBy(*i)
	}
	return auo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (auo *AppUpdateOne) AddUpdatedBy(i int) *AppUpdateOne {
	auo.mutation.AddUpdatedBy(i)
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *AppUpdateOne) ClearUpdatedBy() *AppUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppUpdateOne) SetUpdatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableUpdatedAt(t *time.Time) *AppUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AppUpdateOne) ClearUpdatedAt() *AppUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetName sets the "name" field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableName(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetKind sets the "kind" field.
func (auo *AppUpdateOne) SetKind(a app.Kind) *AppUpdateOne {
	auo.mutation.SetKind(a)
	return auo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableKind(a *app.Kind) *AppUpdateOne {
	if a != nil {
		auo.SetKind(*a)
	}
	return auo
}

// SetRedirectURI sets the "redirect_uri" field.
func (auo *AppUpdateOne) SetRedirectURI(s string) *AppUpdateOne {
	auo.mutation.SetRedirectURI(s)
	return auo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableRedirectURI(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetRedirectURI(*s)
	}
	return auo
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (auo *AppUpdateOne) ClearRedirectURI() *AppUpdateOne {
	auo.mutation.ClearRedirectURI()
	return auo
}

// SetAppKey sets the "app_key" field.
func (auo *AppUpdateOne) SetAppKey(s string) *AppUpdateOne {
	auo.mutation.SetAppKey(s)
	return auo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppKey(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppKey(*s)
	}
	return auo
}

// ClearAppKey clears the value of the "app_key" field.
func (auo *AppUpdateOne) ClearAppKey() *AppUpdateOne {
	auo.mutation.ClearAppKey()
	return auo
}

// SetAppSecret sets the "app_secret" field.
func (auo *AppUpdateOne) SetAppSecret(s string) *AppUpdateOne {
	auo.mutation.SetAppSecret(s)
	return auo
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppSecret(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetAppSecret(*s)
	}
	return auo
}

// ClearAppSecret clears the value of the "app_secret" field.
func (auo *AppUpdateOne) ClearAppSecret() *AppUpdateOne {
	auo.mutation.ClearAppSecret()
	return auo
}

// SetScopes sets the "scopes" field.
func (auo *AppUpdateOne) SetScopes(s string) *AppUpdateOne {
	auo.mutation.SetScopes(s)
	return auo
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableScopes(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetScopes(*s)
	}
	return auo
}

// ClearScopes clears the value of the "scopes" field.
func (auo *AppUpdateOne) ClearScopes() *AppUpdateOne {
	auo.mutation.ClearScopes()
	return auo
}

// SetTokenValidity sets the "token_validity" field.
func (auo *AppUpdateOne) SetTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.ResetTokenValidity()
	auo.mutation.SetTokenValidity(i)
	return auo
}

// SetNillableTokenValidity sets the "token_validity" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableTokenValidity(i *int32) *AppUpdateOne {
	if i != nil {
		auo.SetTokenValidity(*i)
	}
	return auo
}

// AddTokenValidity adds i to the "token_validity" field.
func (auo *AppUpdateOne) AddTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.AddTokenValidity(i)
	return auo
}

// ClearTokenValidity clears the value of the "token_validity" field.
func (auo *AppUpdateOne) ClearTokenValidity() *AppUpdateOne {
	auo.mutation.ClearTokenValidity()
	return auo
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (auo *AppUpdateOne) SetRefreshTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.ResetRefreshTokenValidity()
	auo.mutation.SetRefreshTokenValidity(i)
	return auo
}

// SetNillableRefreshTokenValidity sets the "refresh_token_validity" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableRefreshTokenValidity(i *int32) *AppUpdateOne {
	if i != nil {
		auo.SetRefreshTokenValidity(*i)
	}
	return auo
}

// AddRefreshTokenValidity adds i to the "refresh_token_validity" field.
func (auo *AppUpdateOne) AddRefreshTokenValidity(i int32) *AppUpdateOne {
	auo.mutation.AddRefreshTokenValidity(i)
	return auo
}

// ClearRefreshTokenValidity clears the value of the "refresh_token_validity" field.
func (auo *AppUpdateOne) ClearRefreshTokenValidity() *AppUpdateOne {
	auo.mutation.ClearRefreshTokenValidity()
	return auo
}

// SetLogo sets the "logo" field.
func (auo *AppUpdateOne) SetLogo(s string) *AppUpdateOne {
	auo.mutation.SetLogo(s)
	return auo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableLogo(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetLogo(*s)
	}
	return auo
}

// ClearLogo clears the value of the "logo" field.
func (auo *AppUpdateOne) ClearLogo() *AppUpdateOne {
	auo.mutation.ClearLogo()
	return auo
}

// SetLogoFileID sets the "logo_file_id" field.
func (auo *AppUpdateOne) SetLogoFileID(i int) *AppUpdateOne {
	auo.mutation.ResetLogoFileID()
	auo.mutation.SetLogoFileID(i)
	return auo
}

// SetNillableLogoFileID sets the "logo_file_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableLogoFileID(i *int) *AppUpdateOne {
	if i != nil {
		auo.SetLogoFileID(*i)
	}
	return auo
}

// AddLogoFileID adds i to the "logo_file_id" field.
func (auo *AppUpdateOne) AddLogoFileID(i int) *AppUpdateOne {
	auo.mutation.AddLogoFileID(i)
	return auo
}

// ClearLogoFileID clears the value of the "logo_file_id" field.
func (auo *AppUpdateOne) ClearLogoFileID() *AppUpdateOne {
	auo.mutation.ClearLogoFileID()
	return auo
}

// SetComments sets the "comments" field.
func (auo *AppUpdateOne) SetComments(s string) *AppUpdateOne {
	auo.mutation.SetComments(s)
	return auo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableComments(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetComments(*s)
	}
	return auo
}

// ClearComments clears the value of the "comments" field.
func (auo *AppUpdateOne) ClearComments() *AppUpdateOne {
	auo.mutation.ClearComments()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppUpdateOne) SetStatus(ts typex.SimpleStatus) *AppUpdateOne {
	auo.mutation.SetStatus(ts)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *AppUpdateOne {
	if ts != nil {
		auo.SetStatus(*ts)
	}
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AppUpdateOne) ClearStatus() *AppUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetPrivate sets the "private" field.
func (auo *AppUpdateOne) SetPrivate(b bool) *AppUpdateOne {
	auo.mutation.SetPrivate(b)
	return auo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillablePrivate(b *bool) *AppUpdateOne {
	if b != nil {
		auo.SetPrivate(*b)
	}
	return auo
}

// ClearPrivate clears the value of the "private" field.
func (auo *AppUpdateOne) ClearPrivate() *AppUpdateOne {
	auo.mutation.ClearPrivate()
	return auo
}

// SetOwnerOrgID sets the "owner_org_id" field.
func (auo *AppUpdateOne) SetOwnerOrgID(i int) *AppUpdateOne {
	auo.mutation.ResetOwnerOrgID()
	auo.mutation.SetOwnerOrgID(i)
	return auo
}

// SetNillableOwnerOrgID sets the "owner_org_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableOwnerOrgID(i *int) *AppUpdateOne {
	if i != nil {
		auo.SetOwnerOrgID(*i)
	}
	return auo
}

// AddOwnerOrgID adds i to the "owner_org_id" field.
func (auo *AppUpdateOne) AddOwnerOrgID(i int) *AppUpdateOne {
	auo.mutation.AddOwnerOrgID(i)
	return auo
}

// ClearOwnerOrgID clears the value of the "owner_org_id" field.
func (auo *AppUpdateOne) ClearOwnerOrgID() *AppUpdateOne {
	auo.mutation.ClearOwnerOrgID()
	return auo
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (auo *AppUpdateOne) AddMenuIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddMenuIDs(ids...)
	return auo
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (auo *AppUpdateOne) AddMenus(a ...*AppMenu) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddMenuIDs(ids...)
}

// AddActionIDs adds the "actions" edge to the AppAction entity by IDs.
func (auo *AppUpdateOne) AddActionIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddActionIDs(ids...)
	return auo
}

// AddActions adds the "actions" edges to the AppAction entity.
func (auo *AppUpdateOne) AddActions(a ...*AppAction) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddActionIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the AppRes entity by IDs.
func (auo *AppUpdateOne) AddResourceIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddResourceIDs(ids...)
	return auo
}

// AddResources adds the "resources" edges to the AppRes entity.
func (auo *AppUpdateOne) AddResources(a ...*AppRes) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddResourceIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AppRole entity by IDs.
func (auo *AppUpdateOne) AddRoleIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddRoleIDs(ids...)
	return auo
}

// AddRoles adds the "roles" edges to the AppRole entity.
func (auo *AppUpdateOne) AddRoles(a ...*AppRole) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddRoleIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the AppPolicy entity by IDs.
func (auo *AppUpdateOne) AddPolicyIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddPolicyIDs(ids...)
	return auo
}

// AddPolicies adds the "policies" edges to the AppPolicy entity.
func (auo *AppUpdateOne) AddPolicies(a ...*AppPolicy) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddPolicyIDs(ids...)
}

// AddOrgIDs adds the "orgs" edge to the Org entity by IDs.
func (auo *AppUpdateOne) AddOrgIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddOrgIDs(ids...)
	return auo
}

// AddOrgs adds the "orgs" edges to the Org entity.
func (auo *AppUpdateOne) AddOrgs(o ...*Org) *AppUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOrgIDs(ids...)
}

// AddDictIDs adds the "dicts" edge to the AppDict entity by IDs.
func (auo *AppUpdateOne) AddDictIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddDictIDs(ids...)
	return auo
}

// AddDicts adds the "dicts" edges to the AppDict entity.
func (auo *AppUpdateOne) AddDicts(a ...*AppDict) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddDictIDs(ids...)
}

// AddOrgAppIDs adds the "org_app" edge to the OrgApp entity by IDs.
func (auo *AppUpdateOne) AddOrgAppIDs(ids ...int) *AppUpdateOne {
	auo.mutation.AddOrgAppIDs(ids...)
	return auo
}

// AddOrgApp adds the "org_app" edges to the OrgApp entity.
func (auo *AppUpdateOne) AddOrgApp(o ...*OrgApp) *AppUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOrgAppIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// ClearMenus clears all "menus" edges to the AppMenu entity.
func (auo *AppUpdateOne) ClearMenus() *AppUpdateOne {
	auo.mutation.ClearMenus()
	return auo
}

// RemoveMenuIDs removes the "menus" edge to AppMenu entities by IDs.
func (auo *AppUpdateOne) RemoveMenuIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveMenuIDs(ids...)
	return auo
}

// RemoveMenus removes "menus" edges to AppMenu entities.
func (auo *AppUpdateOne) RemoveMenus(a ...*AppMenu) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveMenuIDs(ids...)
}

// ClearActions clears all "actions" edges to the AppAction entity.
func (auo *AppUpdateOne) ClearActions() *AppUpdateOne {
	auo.mutation.ClearActions()
	return auo
}

// RemoveActionIDs removes the "actions" edge to AppAction entities by IDs.
func (auo *AppUpdateOne) RemoveActionIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveActionIDs(ids...)
	return auo
}

// RemoveActions removes "actions" edges to AppAction entities.
func (auo *AppUpdateOne) RemoveActions(a ...*AppAction) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveActionIDs(ids...)
}

// ClearResources clears all "resources" edges to the AppRes entity.
func (auo *AppUpdateOne) ClearResources() *AppUpdateOne {
	auo.mutation.ClearResources()
	return auo
}

// RemoveResourceIDs removes the "resources" edge to AppRes entities by IDs.
func (auo *AppUpdateOne) RemoveResourceIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveResourceIDs(ids...)
	return auo
}

// RemoveResources removes "resources" edges to AppRes entities.
func (auo *AppUpdateOne) RemoveResources(a ...*AppRes) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveResourceIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AppRole entity.
func (auo *AppUpdateOne) ClearRoles() *AppUpdateOne {
	auo.mutation.ClearRoles()
	return auo
}

// RemoveRoleIDs removes the "roles" edge to AppRole entities by IDs.
func (auo *AppUpdateOne) RemoveRoleIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveRoleIDs(ids...)
	return auo
}

// RemoveRoles removes "roles" edges to AppRole entities.
func (auo *AppUpdateOne) RemoveRoles(a ...*AppRole) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveRoleIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the AppPolicy entity.
func (auo *AppUpdateOne) ClearPolicies() *AppUpdateOne {
	auo.mutation.ClearPolicies()
	return auo
}

// RemovePolicyIDs removes the "policies" edge to AppPolicy entities by IDs.
func (auo *AppUpdateOne) RemovePolicyIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemovePolicyIDs(ids...)
	return auo
}

// RemovePolicies removes "policies" edges to AppPolicy entities.
func (auo *AppUpdateOne) RemovePolicies(a ...*AppPolicy) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemovePolicyIDs(ids...)
}

// ClearOrgs clears all "orgs" edges to the Org entity.
func (auo *AppUpdateOne) ClearOrgs() *AppUpdateOne {
	auo.mutation.ClearOrgs()
	return auo
}

// RemoveOrgIDs removes the "orgs" edge to Org entities by IDs.
func (auo *AppUpdateOne) RemoveOrgIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveOrgIDs(ids...)
	return auo
}

// RemoveOrgs removes "orgs" edges to Org entities.
func (auo *AppUpdateOne) RemoveOrgs(o ...*Org) *AppUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOrgIDs(ids...)
}

// ClearDicts clears all "dicts" edges to the AppDict entity.
func (auo *AppUpdateOne) ClearDicts() *AppUpdateOne {
	auo.mutation.ClearDicts()
	return auo
}

// RemoveDictIDs removes the "dicts" edge to AppDict entities by IDs.
func (auo *AppUpdateOne) RemoveDictIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveDictIDs(ids...)
	return auo
}

// RemoveDicts removes "dicts" edges to AppDict entities.
func (auo *AppUpdateOne) RemoveDicts(a ...*AppDict) *AppUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveDictIDs(ids...)
}

// ClearOrgApp clears all "org_app" edges to the OrgApp entity.
func (auo *AppUpdateOne) ClearOrgApp() *AppUpdateOne {
	auo.mutation.ClearOrgApp()
	return auo
}

// RemoveOrgAppIDs removes the "org_app" edge to OrgApp entities by IDs.
func (auo *AppUpdateOne) RemoveOrgAppIDs(ids ...int) *AppUpdateOne {
	auo.mutation.RemoveOrgAppIDs(ids...)
	return auo
}

// RemoveOrgApp removes "org_app" edges to OrgApp entities.
func (auo *AppUpdateOne) RemoveOrgApp(o ...*OrgApp) *AppUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOrgAppIDs(ids...)
}

// Where appends a list predicates to the AppUpdate builder.
func (auo *AppUpdateOne) Where(ps ...predicate.App) *AppUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := app.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "App.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Kind(); ok {
		if err := app.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "App.kind": %w`, err)}
		}
	}
	if v, ok := auo.mutation.RedirectURI(); ok {
		if err := app.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "App.redirect_uri": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf(`ent: validator failed for field "App.app_secret": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Scopes(); ok {
		if err := app.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "App.scopes": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Logo(); ok {
		if err := app.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`ent: validator failed for field "App.logo": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "App.status": %w`, err)}
		}
	}
	return nil
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "App.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(app.FieldUpdatedBy, field.TypeInt, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(app.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(app.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Kind(); ok {
		_spec.SetField(app.FieldKind, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.RedirectURI(); ok {
		_spec.SetField(app.FieldRedirectURI, field.TypeString, value)
	}
	if auo.mutation.RedirectURICleared() {
		_spec.ClearField(app.FieldRedirectURI, field.TypeString)
	}
	if value, ok := auo.mutation.AppKey(); ok {
		_spec.SetField(app.FieldAppKey, field.TypeString, value)
	}
	if auo.mutation.AppKeyCleared() {
		_spec.ClearField(app.FieldAppKey, field.TypeString)
	}
	if value, ok := auo.mutation.AppSecret(); ok {
		_spec.SetField(app.FieldAppSecret, field.TypeString, value)
	}
	if auo.mutation.AppSecretCleared() {
		_spec.ClearField(app.FieldAppSecret, field.TypeString)
	}
	if value, ok := auo.mutation.Scopes(); ok {
		_spec.SetField(app.FieldScopes, field.TypeString, value)
	}
	if auo.mutation.ScopesCleared() {
		_spec.ClearField(app.FieldScopes, field.TypeString)
	}
	if value, ok := auo.mutation.TokenValidity(); ok {
		_spec.SetField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedTokenValidity(); ok {
		_spec.AddField(app.FieldTokenValidity, field.TypeInt32, value)
	}
	if auo.mutation.TokenValidityCleared() {
		_spec.ClearField(app.FieldTokenValidity, field.TypeInt32)
	}
	if value, ok := auo.mutation.RefreshTokenValidity(); ok {
		_spec.SetField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedRefreshTokenValidity(); ok {
		_spec.AddField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
	}
	if auo.mutation.RefreshTokenValidityCleared() {
		_spec.ClearField(app.FieldRefreshTokenValidity, field.TypeInt32)
	}
	if value, ok := auo.mutation.Logo(); ok {
		_spec.SetField(app.FieldLogo, field.TypeString, value)
	}
	if auo.mutation.LogoCleared() {
		_spec.ClearField(app.FieldLogo, field.TypeString)
	}
	if value, ok := auo.mutation.LogoFileID(); ok {
		_spec.SetField(app.FieldLogoFileID, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedLogoFileID(); ok {
		_spec.AddField(app.FieldLogoFileID, field.TypeInt, value)
	}
	if auo.mutation.LogoFileIDCleared() {
		_spec.ClearField(app.FieldLogoFileID, field.TypeInt)
	}
	if value, ok := auo.mutation.Comments(); ok {
		_spec.SetField(app.FieldComments, field.TypeString, value)
	}
	if auo.mutation.CommentsCleared() {
		_spec.ClearField(app.FieldComments, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeEnum, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(app.FieldStatus, field.TypeEnum)
	}
	if value, ok := auo.mutation.Private(); ok {
		_spec.SetField(app.FieldPrivate, field.TypeBool, value)
	}
	if auo.mutation.PrivateCleared() {
		_spec.ClearField(app.FieldPrivate, field.TypeBool)
	}
	if value, ok := auo.mutation.OwnerOrgID(); ok {
		_spec.SetField(app.FieldOwnerOrgID, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedOwnerOrgID(); ok {
		_spec.AddField(app.FieldOwnerOrgID, field.TypeInt, value)
	}
	if auo.mutation.OwnerOrgIDCleared() {
		_spec.ClearField(app.FieldOwnerOrgID, field.TypeInt)
	}
	if auo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !auo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ActionsTable,
			Columns: []string{app.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedActionsIDs(); len(nodes) > 0 && !auo.mutation.ActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ActionsTable,
			Columns: []string{app.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ActionsTable,
			Columns: []string{app.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ResourcesTable,
			Columns: []string{app.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !auo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ResourcesTable,
			Columns: []string{app.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ResourcesTable,
			Columns: []string{app.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.RolesTable,
			Columns: []string{app.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.RolesTable,
			Columns: []string{app.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.RolesTable,
			Columns: []string{app.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PoliciesTable,
			Columns: []string{app.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !auo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PoliciesTable,
			Columns: []string{app.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PoliciesTable,
			Columns: []string{app.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   app.OrgsTable,
			Columns: app.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		createE := &OrgAppCreate{config: auo.config, mutation: newOrgAppMutation(auo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOrgsIDs(); len(nodes) > 0 && !auo.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   app.OrgsTable,
			Columns: app.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: auo.config, mutation: newOrgAppMutation(auo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   app.OrgsTable,
			Columns: app.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: auo.config, mutation: newOrgAppMutation(auo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.DictsTable,
			Columns: []string{app.DictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDictsIDs(); len(nodes) > 0 && !auo.mutation.DictsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.DictsTable,
			Columns: []string{app.DictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DictsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.DictsTable,
			Columns: []string{app.DictsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrgAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.OrgAppTable,
			Columns: []string{app.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOrgAppIDs(); len(nodes) > 0 && !auo.mutation.OrgAppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.OrgAppTable,
			Columns: []string{app.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrgAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.OrgAppTable,
			Columns: []string{app.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
