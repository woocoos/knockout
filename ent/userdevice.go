// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userdevice"
)

// UserDevice is the model entity for the UserDevice schema.
type UserDevice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// 设备唯一ID
	DeviceUID string `json:"device_uid,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// SystemName holds the value of the "system_name" field.
	SystemName string `json:"system_name,omitempty"`
	// SystemVersion holds the value of the "system_version" field.
	SystemVersion string `json:"system_version,omitempty"`
	// AppVersion holds the value of the "app_version" field.
	AppVersion string `json:"app_version,omitempty"`
	// DeviceModel holds the value of the "device_model" field.
	DeviceModel string `json:"device_model,omitempty"`
	// 状态,可用或不可用及其他待确认状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserDeviceQuery when eager-loading is set.
	Edges        UserDeviceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserDeviceEdges holds the relations/edges for other nodes in the graph.
type UserDeviceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDeviceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdevice.FieldID, userdevice.FieldCreatedBy, userdevice.FieldUpdatedBy, userdevice.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userdevice.FieldDeviceUID, userdevice.FieldDeviceName, userdevice.FieldSystemName, userdevice.FieldSystemVersion, userdevice.FieldAppVersion, userdevice.FieldDeviceModel, userdevice.FieldStatus, userdevice.FieldComments:
			values[i] = new(sql.NullString)
		case userdevice.FieldCreatedAt, userdevice.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDevice fields.
func (ud *UserDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdevice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ud.ID = int(value.Int64)
		case userdevice.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ud.CreatedBy = int(value.Int64)
			}
		case userdevice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ud.CreatedAt = value.Time
			}
		case userdevice.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ud.UpdatedBy = int(value.Int64)
			}
		case userdevice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ud.UpdatedAt = value.Time
			}
		case userdevice.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ud.UserID = int(value.Int64)
			}
		case userdevice.FieldDeviceUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_uid", values[i])
			} else if value.Valid {
				ud.DeviceUID = value.String
			}
		case userdevice.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				ud.DeviceName = value.String
			}
		case userdevice.FieldSystemName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_name", values[i])
			} else if value.Valid {
				ud.SystemName = value.String
			}
		case userdevice.FieldSystemVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_version", values[i])
			} else if value.Valid {
				ud.SystemVersion = value.String
			}
		case userdevice.FieldAppVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_version", values[i])
			} else if value.Valid {
				ud.AppVersion = value.String
			}
		case userdevice.FieldDeviceModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_model", values[i])
			} else if value.Valid {
				ud.DeviceModel = value.String
			}
		case userdevice.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ud.Status = typex.SimpleStatus(value.String)
			}
		case userdevice.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				ud.Comments = value.String
			}
		default:
			ud.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserDevice.
// This includes values selected through modifiers, order, etc.
func (ud *UserDevice) Value(name string) (ent.Value, error) {
	return ud.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserDevice entity.
func (ud *UserDevice) QueryUser() *UserQuery {
	return NewUserDeviceClient(ud.config).QueryUser(ud)
}

// Update returns a builder for updating this UserDevice.
// Note that you need to call UserDevice.Unwrap() before calling this method if this UserDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (ud *UserDevice) Update() *UserDeviceUpdateOne {
	return NewUserDeviceClient(ud.config).UpdateOne(ud)
}

// Unwrap unwraps the UserDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ud *UserDevice) Unwrap() *UserDevice {
	_tx, ok := ud.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserDevice is not a transactional entity")
	}
	ud.config.driver = _tx.drv
	return ud
}

// String implements the fmt.Stringer.
func (ud *UserDevice) String() string {
	var builder strings.Builder
	builder.WriteString("UserDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ud.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ud.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ud.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ud.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ud.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ud.UserID))
	builder.WriteString(", ")
	builder.WriteString("device_uid=")
	builder.WriteString(ud.DeviceUID)
	builder.WriteString(", ")
	builder.WriteString("device_name=")
	builder.WriteString(ud.DeviceName)
	builder.WriteString(", ")
	builder.WriteString("system_name=")
	builder.WriteString(ud.SystemName)
	builder.WriteString(", ")
	builder.WriteString("system_version=")
	builder.WriteString(ud.SystemVersion)
	builder.WriteString(", ")
	builder.WriteString("app_version=")
	builder.WriteString(ud.AppVersion)
	builder.WriteString(", ")
	builder.WriteString("device_model=")
	builder.WriteString(ud.DeviceModel)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ud.Status))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(ud.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// UserDevices is a parsable slice of UserDevice.
type UserDevices []*UserDevice
