// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
)

// AppMenu is the model entity for the AppMenu schema.
type AppMenu struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 所属应用
	AppID int `json:"app_id,omitempty"`
	// 父级ID
	ParentID int `json:"parent_id,omitempty"`
	// 目录,菜单项
	Kind appmenu.Kind `json:"kind,omitempty"`
	// 菜单名称
	Name string `json:"name,omitempty"`
	// 操作ID
	ActionID *int `json:"action_id,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// DisplaySort holds the value of the "display_sort" field.
	DisplaySort int32 `json:"display_sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppMenuQuery when eager-loading is set.
	Edges        AppMenuEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppMenuEdges holds the relations/edges for other nodes in the graph.
type AppMenuEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// 需要权限控制时对应的权限
	Action *AppAction `json:"action,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppMenuEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// ActionOrErr returns the Action value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppMenuEdges) ActionOrErr() (*AppAction, error) {
	if e.loadedTypes[1] {
		if e.Action == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: appaction.Label}
		}
		return e.Action, nil
	}
	return nil, &NotLoadedError{edge: "action"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppMenu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appmenu.FieldID, appmenu.FieldCreatedBy, appmenu.FieldUpdatedBy, appmenu.FieldAppID, appmenu.FieldParentID, appmenu.FieldActionID, appmenu.FieldDisplaySort:
			values[i] = new(sql.NullInt64)
		case appmenu.FieldKind, appmenu.FieldName, appmenu.FieldComments:
			values[i] = new(sql.NullString)
		case appmenu.FieldCreatedAt, appmenu.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppMenu fields.
func (am *AppMenu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appmenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int(value.Int64)
		case appmenu.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				am.CreatedBy = int(value.Int64)
			}
		case appmenu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				am.CreatedAt = value.Time
			}
		case appmenu.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				am.UpdatedBy = int(value.Int64)
			}
		case appmenu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				am.UpdatedAt = value.Time
			}
		case appmenu.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				am.AppID = int(value.Int64)
			}
		case appmenu.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				am.ParentID = int(value.Int64)
			}
		case appmenu.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				am.Kind = appmenu.Kind(value.String)
			}
		case appmenu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				am.Name = value.String
			}
		case appmenu.FieldActionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field action_id", values[i])
			} else if value.Valid {
				am.ActionID = new(int)
				*am.ActionID = int(value.Int64)
			}
		case appmenu.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				am.Comments = value.String
			}
		case appmenu.FieldDisplaySort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_sort", values[i])
			} else if value.Valid {
				am.DisplaySort = int32(value.Int64)
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppMenu.
// This includes values selected through modifiers, order, etc.
func (am *AppMenu) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// QueryApp queries the "app" edge of the AppMenu entity.
func (am *AppMenu) QueryApp() *AppQuery {
	return NewAppMenuClient(am.config).QueryApp(am)
}

// QueryAction queries the "action" edge of the AppMenu entity.
func (am *AppMenu) QueryAction() *AppActionQuery {
	return NewAppMenuClient(am.config).QueryAction(am)
}

// Update returns a builder for updating this AppMenu.
// Note that you need to call AppMenu.Unwrap() before calling this method if this AppMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AppMenu) Update() *AppMenuUpdateOne {
	return NewAppMenuClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AppMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AppMenu) Unwrap() *AppMenu {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppMenu is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AppMenu) String() string {
	var builder strings.Builder
	builder.WriteString("AppMenu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", am.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(am.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", am.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(am.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", am.AppID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", am.ParentID))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", am.Kind))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(am.Name)
	builder.WriteString(", ")
	if v := am.ActionID; v != nil {
		builder.WriteString("action_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(am.Comments)
	builder.WriteString(", ")
	builder.WriteString("display_sort=")
	builder.WriteString(fmt.Sprintf("%v", am.DisplaySort))
	builder.WriteByte(')')
	return builder.String()
}

// AppMenus is a parsable slice of AppMenu.
type AppMenus []*AppMenu
