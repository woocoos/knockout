// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/appdict"
	"github.com/woocoos/knockout/ent/appdictitem"
	"github.com/woocoos/knockout/ent/predicate"
)

// AppDictItemQuery is the builder for querying AppDictItem entities.
type AppDictItemQuery struct {
	config
	ctx        *QueryContext
	order      []appdictitem.OrderOption
	inters     []Interceptor
	predicates []predicate.AppDictItem
	withDict   *AppDictQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*AppDictItem) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppDictItemQuery builder.
func (adiq *AppDictItemQuery) Where(ps ...predicate.AppDictItem) *AppDictItemQuery {
	adiq.predicates = append(adiq.predicates, ps...)
	return adiq
}

// Limit the number of records to be returned by this query.
func (adiq *AppDictItemQuery) Limit(limit int) *AppDictItemQuery {
	adiq.ctx.Limit = &limit
	return adiq
}

// Offset to start from.
func (adiq *AppDictItemQuery) Offset(offset int) *AppDictItemQuery {
	adiq.ctx.Offset = &offset
	return adiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (adiq *AppDictItemQuery) Unique(unique bool) *AppDictItemQuery {
	adiq.ctx.Unique = &unique
	return adiq
}

// Order specifies how the records should be ordered.
func (adiq *AppDictItemQuery) Order(o ...appdictitem.OrderOption) *AppDictItemQuery {
	adiq.order = append(adiq.order, o...)
	return adiq
}

// QueryDict chains the current query on the "dict" edge.
func (adiq *AppDictItemQuery) QueryDict() *AppDictQuery {
	query := (&AppDictClient{config: adiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appdictitem.Table, appdictitem.FieldID, selector),
			sqlgraph.To(appdict.Table, appdict.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appdictitem.DictTable, appdictitem.DictColumn),
		)
		fromU = sqlgraph.SetNeighbors(adiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppDictItem entity from the query.
// Returns a *NotFoundError when no AppDictItem was found.
func (adiq *AppDictItemQuery) First(ctx context.Context) (*AppDictItem, error) {
	nodes, err := adiq.Limit(1).All(setContextOp(ctx, adiq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appdictitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (adiq *AppDictItemQuery) FirstX(ctx context.Context) *AppDictItem {
	node, err := adiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppDictItem ID from the query.
// Returns a *NotFoundError when no AppDictItem ID was found.
func (adiq *AppDictItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adiq.Limit(1).IDs(setContextOp(ctx, adiq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appdictitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (adiq *AppDictItemQuery) FirstIDX(ctx context.Context) int {
	id, err := adiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppDictItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AppDictItem entity is found.
// Returns a *NotFoundError when no AppDictItem entities are found.
func (adiq *AppDictItemQuery) Only(ctx context.Context) (*AppDictItem, error) {
	nodes, err := adiq.Limit(2).All(setContextOp(ctx, adiq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appdictitem.Label}
	default:
		return nil, &NotSingularError{appdictitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (adiq *AppDictItemQuery) OnlyX(ctx context.Context) *AppDictItem {
	node, err := adiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppDictItem ID in the query.
// Returns a *NotSingularError when more than one AppDictItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (adiq *AppDictItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adiq.Limit(2).IDs(setContextOp(ctx, adiq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appdictitem.Label}
	default:
		err = &NotSingularError{appdictitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (adiq *AppDictItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := adiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppDictItems.
func (adiq *AppDictItemQuery) All(ctx context.Context) ([]*AppDictItem, error) {
	ctx = setContextOp(ctx, adiq.ctx, "All")
	if err := adiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AppDictItem, *AppDictItemQuery]()
	return withInterceptors[[]*AppDictItem](ctx, adiq, qr, adiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (adiq *AppDictItemQuery) AllX(ctx context.Context) []*AppDictItem {
	nodes, err := adiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppDictItem IDs.
func (adiq *AppDictItemQuery) IDs(ctx context.Context) (ids []int, err error) {
	if adiq.ctx.Unique == nil && adiq.path != nil {
		adiq.Unique(true)
	}
	ctx = setContextOp(ctx, adiq.ctx, "IDs")
	if err = adiq.Select(appdictitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (adiq *AppDictItemQuery) IDsX(ctx context.Context) []int {
	ids, err := adiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (adiq *AppDictItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, adiq.ctx, "Count")
	if err := adiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, adiq, querierCount[*AppDictItemQuery](), adiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (adiq *AppDictItemQuery) CountX(ctx context.Context) int {
	count, err := adiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (adiq *AppDictItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, adiq.ctx, "Exist")
	switch _, err := adiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (adiq *AppDictItemQuery) ExistX(ctx context.Context) bool {
	exist, err := adiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppDictItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (adiq *AppDictItemQuery) Clone() *AppDictItemQuery {
	if adiq == nil {
		return nil
	}
	return &AppDictItemQuery{
		config:     adiq.config,
		ctx:        adiq.ctx.Clone(),
		order:      append([]appdictitem.OrderOption{}, adiq.order...),
		inters:     append([]Interceptor{}, adiq.inters...),
		predicates: append([]predicate.AppDictItem{}, adiq.predicates...),
		withDict:   adiq.withDict.Clone(),
		// clone intermediate query.
		sql:  adiq.sql.Clone(),
		path: adiq.path,
	}
}

// WithDict tells the query-builder to eager-load the nodes that are connected to
// the "dict" edge. The optional arguments are used to configure the query builder of the edge.
func (adiq *AppDictItemQuery) WithDict(opts ...func(*AppDictQuery)) *AppDictItemQuery {
	query := (&AppDictClient{config: adiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adiq.withDict = query
	return adiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppDictItem.Query().
//		GroupBy(appdictitem.FieldCreatedBy).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (adiq *AppDictItemQuery) GroupBy(field string, fields ...string) *AppDictItemGroupBy {
	adiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppDictItemGroupBy{build: adiq}
	grbuild.flds = &adiq.ctx.Fields
	grbuild.label = appdictitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//	}
//
//	client.AppDictItem.Query().
//		Select(appdictitem.FieldCreatedBy).
//		Scan(ctx, &v)
func (adiq *AppDictItemQuery) Select(fields ...string) *AppDictItemSelect {
	adiq.ctx.Fields = append(adiq.ctx.Fields, fields...)
	sbuild := &AppDictItemSelect{AppDictItemQuery: adiq}
	sbuild.label = appdictitem.Label
	sbuild.flds, sbuild.scan = &adiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppDictItemSelect configured with the given aggregations.
func (adiq *AppDictItemQuery) Aggregate(fns ...AggregateFunc) *AppDictItemSelect {
	return adiq.Select().Aggregate(fns...)
}

func (adiq *AppDictItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range adiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, adiq); err != nil {
				return err
			}
		}
	}
	for _, f := range adiq.ctx.Fields {
		if !appdictitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if adiq.path != nil {
		prev, err := adiq.path(ctx)
		if err != nil {
			return err
		}
		adiq.sql = prev
	}
	return nil
}

func (adiq *AppDictItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AppDictItem, error) {
	var (
		nodes       = []*AppDictItem{}
		_spec       = adiq.querySpec()
		loadedTypes = [1]bool{
			adiq.withDict != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AppDictItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AppDictItem{config: adiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(adiq.modifiers) > 0 {
		_spec.Modifiers = adiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, adiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := adiq.withDict; query != nil {
		if err := adiq.loadDict(ctx, query, nodes, nil,
			func(n *AppDictItem, e *AppDict) { n.Edges.Dict = e }); err != nil {
			return nil, err
		}
	}
	for i := range adiq.loadTotal {
		if err := adiq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (adiq *AppDictItemQuery) loadDict(ctx context.Context, query *AppDictQuery, nodes []*AppDictItem, init func(*AppDictItem), assign func(*AppDictItem, *AppDict)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AppDictItem)
	for i := range nodes {
		fk := nodes[i].DictID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(appdict.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "dict_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (adiq *AppDictItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := adiq.querySpec()
	if len(adiq.modifiers) > 0 {
		_spec.Modifiers = adiq.modifiers
	}
	_spec.Node.Columns = adiq.ctx.Fields
	if len(adiq.ctx.Fields) > 0 {
		_spec.Unique = adiq.ctx.Unique != nil && *adiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, adiq.driver, _spec)
}

func (adiq *AppDictItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(appdictitem.Table, appdictitem.Columns, sqlgraph.NewFieldSpec(appdictitem.FieldID, field.TypeInt))
	_spec.From = adiq.sql
	if unique := adiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if adiq.path != nil {
		_spec.Unique = true
	}
	if fields := adiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appdictitem.FieldID)
		for i := range fields {
			if fields[i] != appdictitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if adiq.withDict != nil {
			_spec.Node.AddColumnOnce(appdictitem.FieldDictID)
		}
	}
	if ps := adiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := adiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := adiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := adiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (adiq *AppDictItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(adiq.driver.Dialect())
	t1 := builder.Table(appdictitem.Table)
	columns := adiq.ctx.Fields
	if len(columns) == 0 {
		columns = appdictitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if adiq.sql != nil {
		selector = adiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if adiq.ctx.Unique != nil && *adiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range adiq.predicates {
		p(selector)
	}
	for _, p := range adiq.order {
		p(selector)
	}
	if offset := adiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := adiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppDictItemGroupBy is the group-by builder for AppDictItem entities.
type AppDictItemGroupBy struct {
	selector
	build *AppDictItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (adigb *AppDictItemGroupBy) Aggregate(fns ...AggregateFunc) *AppDictItemGroupBy {
	adigb.fns = append(adigb.fns, fns...)
	return adigb
}

// Scan applies the selector query and scans the result into the given value.
func (adigb *AppDictItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, adigb.build.ctx, "GroupBy")
	if err := adigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppDictItemQuery, *AppDictItemGroupBy](ctx, adigb.build, adigb, adigb.build.inters, v)
}

func (adigb *AppDictItemGroupBy) sqlScan(ctx context.Context, root *AppDictItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(adigb.fns))
	for _, fn := range adigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*adigb.flds)+len(adigb.fns))
		for _, f := range *adigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*adigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := adigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppDictItemSelect is the builder for selecting fields of AppDictItem entities.
type AppDictItemSelect struct {
	*AppDictItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (adis *AppDictItemSelect) Aggregate(fns ...AggregateFunc) *AppDictItemSelect {
	adis.fns = append(adis.fns, fns...)
	return adis
}

// Scan applies the selector query and scans the result into the given value.
func (adis *AppDictItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, adis.ctx, "Select")
	if err := adis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppDictItemQuery, *AppDictItemSelect](ctx, adis.AppDictItemQuery, adis, adis.inters, v)
}

func (adis *AppDictItemSelect) sqlScan(ctx context.Context, root *AppDictItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(adis.fns))
	for _, fn := range adis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*adis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := adis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
