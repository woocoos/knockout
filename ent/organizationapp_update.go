// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationapp"
	"github.com/woocoos/knockout/ent/predicate"
)

// OrganizationAppUpdate is the builder for updating OrganizationApp entities.
type OrganizationAppUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationAppMutation
}

// Where appends a list predicates to the OrganizationAppUpdate builder.
func (oau *OrganizationAppUpdate) Where(ps ...predicate.OrganizationApp) *OrganizationAppUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetUpdatedBy sets the "updated_by" field.
func (oau *OrganizationAppUpdate) SetUpdatedBy(i int) *OrganizationAppUpdate {
	oau.mutation.ResetUpdatedBy()
	oau.mutation.SetUpdatedBy(i)
	return oau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oau *OrganizationAppUpdate) SetNillableUpdatedBy(i *int) *OrganizationAppUpdate {
	if i != nil {
		oau.SetUpdatedBy(*i)
	}
	return oau
}

// AddUpdatedBy adds i to the "updated_by" field.
func (oau *OrganizationAppUpdate) AddUpdatedBy(i int) *OrganizationAppUpdate {
	oau.mutation.AddUpdatedBy(i)
	return oau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oau *OrganizationAppUpdate) ClearUpdatedBy() *OrganizationAppUpdate {
	oau.mutation.ClearUpdatedBy()
	return oau
}

// SetUpdatedAt sets the "updated_at" field.
func (oau *OrganizationAppUpdate) SetUpdatedAt(t time.Time) *OrganizationAppUpdate {
	oau.mutation.SetUpdatedAt(t)
	return oau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oau *OrganizationAppUpdate) SetNillableUpdatedAt(t *time.Time) *OrganizationAppUpdate {
	if t != nil {
		oau.SetUpdatedAt(*t)
	}
	return oau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oau *OrganizationAppUpdate) ClearUpdatedAt() *OrganizationAppUpdate {
	oau.mutation.ClearUpdatedAt()
	return oau
}

// SetOrgID sets the "org_id" field.
func (oau *OrganizationAppUpdate) SetOrgID(i int) *OrganizationAppUpdate {
	oau.mutation.SetOrgID(i)
	return oau
}

// SetAppID sets the "app_id" field.
func (oau *OrganizationAppUpdate) SetAppID(i int) *OrganizationAppUpdate {
	oau.mutation.SetAppID(i)
	return oau
}

// SetApp sets the "app" edge to the App entity.
func (oau *OrganizationAppUpdate) SetApp(a *App) *OrganizationAppUpdate {
	return oau.SetAppID(a.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oau *OrganizationAppUpdate) SetOrganizationID(id int) *OrganizationAppUpdate {
	oau.mutation.SetOrganizationID(id)
	return oau
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oau *OrganizationAppUpdate) SetOrganization(o *Organization) *OrganizationAppUpdate {
	return oau.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationAppMutation object of the builder.
func (oau *OrganizationAppUpdate) Mutation() *OrganizationAppMutation {
	return oau.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (oau *OrganizationAppUpdate) ClearApp() *OrganizationAppUpdate {
	oau.mutation.ClearApp()
	return oau
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oau *OrganizationAppUpdate) ClearOrganization() *OrganizationAppUpdate {
	oau.mutation.ClearOrganization()
	return oau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrganizationAppUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrganizationAppMutation](ctx, oau.sqlSave, oau.mutation, oau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrganizationAppUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrganizationAppUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrganizationAppUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oau *OrganizationAppUpdate) check() error {
	if _, ok := oau.mutation.AppID(); oau.mutation.AppCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationApp.app"`)
	}
	if _, ok := oau.mutation.OrganizationID(); oau.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationApp.organization"`)
	}
	return nil
}

func (oau *OrganizationAppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationapp.Table, organizationapp.Columns, sqlgraph.NewFieldSpec(organizationapp.FieldOrgID, field.TypeInt), sqlgraph.NewFieldSpec(organizationapp.FieldAppID, field.TypeInt))
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationapp.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := oau.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(organizationapp.FieldUpdatedBy, field.TypeInt, value)
	}
	if oau.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationapp.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := oau.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationapp.FieldUpdatedAt, field.TypeTime, value)
	}
	if oau.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationapp.FieldUpdatedAt, field.TypeTime)
	}
	if oau.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.AppTable,
			Columns: []string{organizationapp.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.AppTable,
			Columns: []string{organizationapp.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.OrganizationTable,
			Columns: []string{organizationapp.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.OrganizationTable,
			Columns: []string{organizationapp.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oau.mutation.done = true
	return n, nil
}

// OrganizationAppUpdateOne is the builder for updating a single OrganizationApp entity.
type OrganizationAppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationAppMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (oauo *OrganizationAppUpdateOne) SetUpdatedBy(i int) *OrganizationAppUpdateOne {
	oauo.mutation.ResetUpdatedBy()
	oauo.mutation.SetUpdatedBy(i)
	return oauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oauo *OrganizationAppUpdateOne) SetNillableUpdatedBy(i *int) *OrganizationAppUpdateOne {
	if i != nil {
		oauo.SetUpdatedBy(*i)
	}
	return oauo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (oauo *OrganizationAppUpdateOne) AddUpdatedBy(i int) *OrganizationAppUpdateOne {
	oauo.mutation.AddUpdatedBy(i)
	return oauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oauo *OrganizationAppUpdateOne) ClearUpdatedBy() *OrganizationAppUpdateOne {
	oauo.mutation.ClearUpdatedBy()
	return oauo
}

// SetUpdatedAt sets the "updated_at" field.
func (oauo *OrganizationAppUpdateOne) SetUpdatedAt(t time.Time) *OrganizationAppUpdateOne {
	oauo.mutation.SetUpdatedAt(t)
	return oauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oauo *OrganizationAppUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrganizationAppUpdateOne {
	if t != nil {
		oauo.SetUpdatedAt(*t)
	}
	return oauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oauo *OrganizationAppUpdateOne) ClearUpdatedAt() *OrganizationAppUpdateOne {
	oauo.mutation.ClearUpdatedAt()
	return oauo
}

// SetOrgID sets the "org_id" field.
func (oauo *OrganizationAppUpdateOne) SetOrgID(i int) *OrganizationAppUpdateOne {
	oauo.mutation.SetOrgID(i)
	return oauo
}

// SetAppID sets the "app_id" field.
func (oauo *OrganizationAppUpdateOne) SetAppID(i int) *OrganizationAppUpdateOne {
	oauo.mutation.SetAppID(i)
	return oauo
}

// SetApp sets the "app" edge to the App entity.
func (oauo *OrganizationAppUpdateOne) SetApp(a *App) *OrganizationAppUpdateOne {
	return oauo.SetAppID(a.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oauo *OrganizationAppUpdateOne) SetOrganizationID(id int) *OrganizationAppUpdateOne {
	oauo.mutation.SetOrganizationID(id)
	return oauo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oauo *OrganizationAppUpdateOne) SetOrganization(o *Organization) *OrganizationAppUpdateOne {
	return oauo.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationAppMutation object of the builder.
func (oauo *OrganizationAppUpdateOne) Mutation() *OrganizationAppMutation {
	return oauo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (oauo *OrganizationAppUpdateOne) ClearApp() *OrganizationAppUpdateOne {
	oauo.mutation.ClearApp()
	return oauo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oauo *OrganizationAppUpdateOne) ClearOrganization() *OrganizationAppUpdateOne {
	oauo.mutation.ClearOrganization()
	return oauo
}

// Where appends a list predicates to the OrganizationAppUpdate builder.
func (oauo *OrganizationAppUpdateOne) Where(ps ...predicate.OrganizationApp) *OrganizationAppUpdateOne {
	oauo.mutation.Where(ps...)
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrganizationAppUpdateOne) Select(field string, fields ...string) *OrganizationAppUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrganizationApp entity.
func (oauo *OrganizationAppUpdateOne) Save(ctx context.Context) (*OrganizationApp, error) {
	return withHooks[*OrganizationApp, OrganizationAppMutation](ctx, oauo.sqlSave, oauo.mutation, oauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrganizationAppUpdateOne) SaveX(ctx context.Context) *OrganizationApp {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrganizationAppUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrganizationAppUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OrganizationAppUpdateOne) check() error {
	if _, ok := oauo.mutation.AppID(); oauo.mutation.AppCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationApp.app"`)
	}
	if _, ok := oauo.mutation.OrganizationID(); oauo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationApp.organization"`)
	}
	return nil
}

func (oauo *OrganizationAppUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationApp, err error) {
	if err := oauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationapp.Table, organizationapp.Columns, sqlgraph.NewFieldSpec(organizationapp.FieldOrgID, field.TypeInt), sqlgraph.NewFieldSpec(organizationapp.FieldAppID, field.TypeInt))
	if id, ok := oauo.mutation.OrgID(); !ok {
		return nil, &ValidationError{Name: "org_id", err: errors.New(`ent: missing "OrganizationApp.org_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := oauo.mutation.AppID(); !ok {
		return nil, &ValidationError{Name: "app_id", err: errors.New(`ent: missing "OrganizationApp.app_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !organizationapp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationapp.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := oauo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(organizationapp.FieldUpdatedBy, field.TypeInt, value)
	}
	if oauo.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationapp.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := oauo.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationapp.FieldUpdatedAt, field.TypeTime, value)
	}
	if oauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationapp.FieldUpdatedAt, field.TypeTime)
	}
	if oauo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.AppTable,
			Columns: []string{organizationapp.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.AppTable,
			Columns: []string{organizationapp.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.OrganizationTable,
			Columns: []string{organizationapp.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.OrganizationTable,
			Columns: []string{organizationapp.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationApp{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oauo.mutation.done = true
	return _node, nil
}
