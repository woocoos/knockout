// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent"
	"github.com/woocoos/knockout/ent/predicate"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...ent.OrderFunc)
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AppFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppFunc func(context.Context, *ent.AppQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppQuery", q)
}

// The TraverseApp type is an adapter to allow the use of ordinary function as Traverser.
type TraverseApp func(context.Context, *ent.AppQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseApp) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseApp) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppQuery", q)
}

// The AppActionFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppActionFunc func(context.Context, *ent.AppActionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppActionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppActionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppActionQuery", q)
}

// The TraverseAppAction type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppAction func(context.Context, *ent.AppActionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppAction) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppAction) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppActionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppActionQuery", q)
}

// The AppMenuFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppMenuFunc func(context.Context, *ent.AppMenuQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppMenuFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppMenuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppMenuQuery", q)
}

// The TraverseAppMenu type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppMenu func(context.Context, *ent.AppMenuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppMenu) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppMenu) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppMenuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppMenuQuery", q)
}

// The AppPolicyFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppPolicyFunc func(context.Context, *ent.AppPolicyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppPolicyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppPolicyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppPolicyQuery", q)
}

// The TraverseAppPolicy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppPolicy func(context.Context, *ent.AppPolicyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppPolicy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppPolicy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppPolicyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppPolicyQuery", q)
}

// The AppResFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppResFunc func(context.Context, *ent.AppResQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppResFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppResQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppResQuery", q)
}

// The TraverseAppRes type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppRes func(context.Context, *ent.AppResQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppRes) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppRes) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppResQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppResQuery", q)
}

// The AppRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppRoleFunc func(context.Context, *ent.AppRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppRoleQuery", q)
}

// The TraverseAppRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppRole func(context.Context, *ent.AppRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppRoleQuery", q)
}

// The AppRolePolicyFunc type is an adapter to allow the use of ordinary function as a Querier.
type AppRolePolicyFunc func(context.Context, *ent.AppRolePolicyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AppRolePolicyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AppRolePolicyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AppRolePolicyQuery", q)
}

// The TraverseAppRolePolicy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAppRolePolicy func(context.Context, *ent.AppRolePolicyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAppRolePolicy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAppRolePolicy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppRolePolicyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AppRolePolicyQuery", q)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationFunc func(context.Context, *ent.OrganizationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The TraverseOrganization type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganization func(context.Context, *ent.OrganizationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganization) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganization) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationQuery", q)
}

// The OrganizationAppFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationAppFunc func(context.Context, *ent.OrganizationAppQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationAppFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationAppQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationAppQuery", q)
}

// The TraverseOrganizationApp type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationApp func(context.Context, *ent.OrganizationAppQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationApp) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationApp) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationAppQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationAppQuery", q)
}

// The OrganizationRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationRoleFunc func(context.Context, *ent.OrganizationRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationRoleQuery", q)
}

// The TraverseOrganizationRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationRole func(context.Context, *ent.OrganizationRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationRoleQuery", q)
}

// The OrganizationUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrganizationUserFunc func(context.Context, *ent.OrganizationUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrganizationUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrganizationUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrganizationUserQuery", q)
}

// The TraverseOrganizationUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrganizationUser func(context.Context, *ent.OrganizationUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrganizationUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrganizationUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrganizationUserQuery", q)
}

// The PermissionFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionFunc func(context.Context, *ent.PermissionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The TraversePermission type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermission func(context.Context, *ent.PermissionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermission) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermission) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The PermissionPolicyFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionPolicyFunc func(context.Context, *ent.PermissionPolicyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionPolicyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionPolicyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionPolicyQuery", q)
}

// The TraversePermissionPolicy type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermissionPolicy func(context.Context, *ent.PermissionPolicyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermissionPolicy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermissionPolicy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionPolicyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionPolicyQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserDeviceFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserDeviceFunc func(context.Context, *ent.UserDeviceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserDeviceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserDeviceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserDeviceQuery", q)
}

// The TraverseUserDevice type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserDevice func(context.Context, *ent.UserDeviceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserDevice) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserDevice) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserDeviceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserDeviceQuery", q)
}

// The UserIdentityFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserIdentityFunc func(context.Context, *ent.UserIdentityQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserIdentityFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserIdentityQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserIdentityQuery", q)
}

// The TraverseUserIdentity type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserIdentity func(context.Context, *ent.UserIdentityQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserIdentity) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserIdentity) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserIdentityQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserIdentityQuery", q)
}

// The UserLoginProfileFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserLoginProfileFunc func(context.Context, *ent.UserLoginProfileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserLoginProfileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserLoginProfileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserLoginProfileQuery", q)
}

// The TraverseUserLoginProfile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserLoginProfile func(context.Context, *ent.UserLoginProfileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserLoginProfile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserLoginProfile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserLoginProfileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserLoginProfileQuery", q)
}

// The UserPasswordFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserPasswordFunc func(context.Context, *ent.UserPasswordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserPasswordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserPasswordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserPasswordQuery", q)
}

// The TraverseUserPassword type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserPassword func(context.Context, *ent.UserPasswordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserPassword) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserPassword) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserPasswordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserPasswordQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AppQuery:
		return &query[*ent.AppQuery, predicate.App]{typ: ent.TypeApp, tq: q}, nil
	case *ent.AppActionQuery:
		return &query[*ent.AppActionQuery, predicate.AppAction]{typ: ent.TypeAppAction, tq: q}, nil
	case *ent.AppMenuQuery:
		return &query[*ent.AppMenuQuery, predicate.AppMenu]{typ: ent.TypeAppMenu, tq: q}, nil
	case *ent.AppPolicyQuery:
		return &query[*ent.AppPolicyQuery, predicate.AppPolicy]{typ: ent.TypeAppPolicy, tq: q}, nil
	case *ent.AppResQuery:
		return &query[*ent.AppResQuery, predicate.AppRes]{typ: ent.TypeAppRes, tq: q}, nil
	case *ent.AppRoleQuery:
		return &query[*ent.AppRoleQuery, predicate.AppRole]{typ: ent.TypeAppRole, tq: q}, nil
	case *ent.AppRolePolicyQuery:
		return &query[*ent.AppRolePolicyQuery, predicate.AppRolePolicy]{typ: ent.TypeAppRolePolicy, tq: q}, nil
	case *ent.OrganizationQuery:
		return &query[*ent.OrganizationQuery, predicate.Organization]{typ: ent.TypeOrganization, tq: q}, nil
	case *ent.OrganizationAppQuery:
		return &query[*ent.OrganizationAppQuery, predicate.OrganizationApp]{typ: ent.TypeOrganizationApp, tq: q}, nil
	case *ent.OrganizationRoleQuery:
		return &query[*ent.OrganizationRoleQuery, predicate.OrganizationRole]{typ: ent.TypeOrganizationRole, tq: q}, nil
	case *ent.OrganizationUserQuery:
		return &query[*ent.OrganizationUserQuery, predicate.OrganizationUser]{typ: ent.TypeOrganizationUser, tq: q}, nil
	case *ent.PermissionQuery:
		return &query[*ent.PermissionQuery, predicate.Permission]{typ: ent.TypePermission, tq: q}, nil
	case *ent.PermissionPolicyQuery:
		return &query[*ent.PermissionPolicyQuery, predicate.PermissionPolicy]{typ: ent.TypePermissionPolicy, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserDeviceQuery:
		return &query[*ent.UserDeviceQuery, predicate.UserDevice]{typ: ent.TypeUserDevice, tq: q}, nil
	case *ent.UserIdentityQuery:
		return &query[*ent.UserIdentityQuery, predicate.UserIdentity]{typ: ent.TypeUserIdentity, tq: q}, nil
	case *ent.UserLoginProfileQuery:
		return &query[*ent.UserLoginProfileQuery, predicate.UserLoginProfile]{typ: ent.TypeUserLoginProfile, tq: q}, nil
	case *ent.UserPasswordQuery:
		return &query[*ent.UserPasswordQuery, predicate.UserPassword]{typ: ent.TypeUserPassword, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...ent.OrderFunc) T
		Where(...P) T
	}
}

func (q query[T, P]) Type() string {
	return q.typ
}

func (q query[T, P]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P]) Order(orders ...ent.OrderFunc) {
	q.tq.Order(orders...)
}

func (q query[T, P]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
