// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/approlepolicy"
)

// AppRolePolicyCreate is the builder for creating a AppRolePolicy entity.
type AppRolePolicyCreate struct {
	config
	mutation *AppRolePolicyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (arpc *AppRolePolicyCreate) SetCreatedBy(i int) *AppRolePolicyCreate {
	arpc.mutation.SetCreatedBy(i)
	return arpc
}

// SetCreatedAt sets the "created_at" field.
func (arpc *AppRolePolicyCreate) SetCreatedAt(t time.Time) *AppRolePolicyCreate {
	arpc.mutation.SetCreatedAt(t)
	return arpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arpc *AppRolePolicyCreate) SetNillableCreatedAt(t *time.Time) *AppRolePolicyCreate {
	if t != nil {
		arpc.SetCreatedAt(*t)
	}
	return arpc
}

// SetUpdatedBy sets the "updated_by" field.
func (arpc *AppRolePolicyCreate) SetUpdatedBy(i int) *AppRolePolicyCreate {
	arpc.mutation.SetUpdatedBy(i)
	return arpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (arpc *AppRolePolicyCreate) SetNillableUpdatedBy(i *int) *AppRolePolicyCreate {
	if i != nil {
		arpc.SetUpdatedBy(*i)
	}
	return arpc
}

// SetUpdatedAt sets the "updated_at" field.
func (arpc *AppRolePolicyCreate) SetUpdatedAt(t time.Time) *AppRolePolicyCreate {
	arpc.mutation.SetUpdatedAt(t)
	return arpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arpc *AppRolePolicyCreate) SetNillableUpdatedAt(t *time.Time) *AppRolePolicyCreate {
	if t != nil {
		arpc.SetUpdatedAt(*t)
	}
	return arpc
}

// SetAppRoleID sets the "app_role_id" field.
func (arpc *AppRolePolicyCreate) SetAppRoleID(i int) *AppRolePolicyCreate {
	arpc.mutation.SetAppRoleID(i)
	return arpc
}

// SetAppPolicyID sets the "app_policy_id" field.
func (arpc *AppRolePolicyCreate) SetAppPolicyID(i int) *AppRolePolicyCreate {
	arpc.mutation.SetAppPolicyID(i)
	return arpc
}

// SetAppID sets the "app_id" field.
func (arpc *AppRolePolicyCreate) SetAppID(i int) *AppRolePolicyCreate {
	arpc.mutation.SetAppID(i)
	return arpc
}

// SetID sets the "id" field.
func (arpc *AppRolePolicyCreate) SetID(i int) *AppRolePolicyCreate {
	arpc.mutation.SetID(i)
	return arpc
}

// SetRoleID sets the "role" edge to the AppRole entity by ID.
func (arpc *AppRolePolicyCreate) SetRoleID(id int) *AppRolePolicyCreate {
	arpc.mutation.SetRoleID(id)
	return arpc
}

// SetRole sets the "role" edge to the AppRole entity.
func (arpc *AppRolePolicyCreate) SetRole(a *AppRole) *AppRolePolicyCreate {
	return arpc.SetRoleID(a.ID)
}

// SetPolicyID sets the "policy" edge to the AppPolicy entity by ID.
func (arpc *AppRolePolicyCreate) SetPolicyID(id int) *AppRolePolicyCreate {
	arpc.mutation.SetPolicyID(id)
	return arpc
}

// SetPolicy sets the "policy" edge to the AppPolicy entity.
func (arpc *AppRolePolicyCreate) SetPolicy(a *AppPolicy) *AppRolePolicyCreate {
	return arpc.SetPolicyID(a.ID)
}

// Mutation returns the AppRolePolicyMutation object of the builder.
func (arpc *AppRolePolicyCreate) Mutation() *AppRolePolicyMutation {
	return arpc.mutation
}

// Save creates the AppRolePolicy in the database.
func (arpc *AppRolePolicyCreate) Save(ctx context.Context) (*AppRolePolicy, error) {
	if err := arpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*AppRolePolicy, AppRolePolicyMutation](ctx, arpc.sqlSave, arpc.mutation, arpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arpc *AppRolePolicyCreate) SaveX(ctx context.Context) *AppRolePolicy {
	v, err := arpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arpc *AppRolePolicyCreate) Exec(ctx context.Context) error {
	_, err := arpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpc *AppRolePolicyCreate) ExecX(ctx context.Context) {
	if err := arpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arpc *AppRolePolicyCreate) defaults() error {
	if _, ok := arpc.mutation.CreatedAt(); !ok {
		if approlepolicy.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized approlepolicy.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := approlepolicy.DefaultCreatedAt()
		arpc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (arpc *AppRolePolicyCreate) check() error {
	if _, ok := arpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AppRolePolicy.created_by"`)}
	}
	if _, ok := arpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppRolePolicy.created_at"`)}
	}
	if _, ok := arpc.mutation.AppRoleID(); !ok {
		return &ValidationError{Name: "app_role_id", err: errors.New(`ent: missing required field "AppRolePolicy.app_role_id"`)}
	}
	if _, ok := arpc.mutation.AppPolicyID(); !ok {
		return &ValidationError{Name: "app_policy_id", err: errors.New(`ent: missing required field "AppRolePolicy.app_policy_id"`)}
	}
	if _, ok := arpc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppRolePolicy.app_id"`)}
	}
	if _, ok := arpc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "AppRolePolicy.role"`)}
	}
	if _, ok := arpc.mutation.PolicyID(); !ok {
		return &ValidationError{Name: "policy", err: errors.New(`ent: missing required edge "AppRolePolicy.policy"`)}
	}
	return nil
}

func (arpc *AppRolePolicyCreate) sqlSave(ctx context.Context) (*AppRolePolicy, error) {
	if err := arpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	arpc.mutation.id = &_node.ID
	arpc.mutation.done = true
	return _node, nil
}

func (arpc *AppRolePolicyCreate) createSpec() (*AppRolePolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &AppRolePolicy{config: arpc.config}
		_spec = sqlgraph.NewCreateSpec(approlepolicy.Table, sqlgraph.NewFieldSpec(approlepolicy.FieldID, field.TypeInt))
	)
	_spec.OnConflict = arpc.conflict
	if id, ok := arpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arpc.mutation.CreatedBy(); ok {
		_spec.SetField(approlepolicy.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := arpc.mutation.CreatedAt(); ok {
		_spec.SetField(approlepolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := arpc.mutation.UpdatedBy(); ok {
		_spec.SetField(approlepolicy.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := arpc.mutation.UpdatedAt(); ok {
		_spec.SetField(approlepolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := arpc.mutation.AppID(); ok {
		_spec.SetField(approlepolicy.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if nodes := arpc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approlepolicy.RoleTable,
			Columns: []string{approlepolicy.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppRoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arpc.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approlepolicy.PolicyTable,
			Columns: []string{approlepolicy.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppPolicyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRolePolicy.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRolePolicyUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (arpc *AppRolePolicyCreate) OnConflict(opts ...sql.ConflictOption) *AppRolePolicyUpsertOne {
	arpc.conflict = opts
	return &AppRolePolicyUpsertOne{
		create: arpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRolePolicy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arpc *AppRolePolicyCreate) OnConflictColumns(columns ...string) *AppRolePolicyUpsertOne {
	arpc.conflict = append(arpc.conflict, sql.ConflictColumns(columns...))
	return &AppRolePolicyUpsertOne{
		create: arpc,
	}
}

type (
	// AppRolePolicyUpsertOne is the builder for "upsert"-ing
	//  one AppRolePolicy node.
	AppRolePolicyUpsertOne struct {
		create *AppRolePolicyCreate
	}

	// AppRolePolicyUpsert is the "OnConflict" setter.
	AppRolePolicyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *AppRolePolicyUpsert) SetUpdatedBy(v int) *AppRolePolicyUpsert {
	u.Set(approlepolicy.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppRolePolicyUpsert) UpdateUpdatedBy() *AppRolePolicyUpsert {
	u.SetExcluded(approlepolicy.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppRolePolicyUpsert) AddUpdatedBy(v int) *AppRolePolicyUpsert {
	u.Add(approlepolicy.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppRolePolicyUpsert) ClearUpdatedBy() *AppRolePolicyUpsert {
	u.SetNull(approlepolicy.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRolePolicyUpsert) SetUpdatedAt(v time.Time) *AppRolePolicyUpsert {
	u.Set(approlepolicy.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRolePolicyUpsert) UpdateUpdatedAt() *AppRolePolicyUpsert {
	u.SetExcluded(approlepolicy.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppRolePolicyUpsert) ClearUpdatedAt() *AppRolePolicyUpsert {
	u.SetNull(approlepolicy.FieldUpdatedAt)
	return u
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppRolePolicyUpsert) SetAppRoleID(v int) *AppRolePolicyUpsert {
	u.Set(approlepolicy.FieldAppRoleID, v)
	return u
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsert) UpdateAppRoleID() *AppRolePolicyUpsert {
	u.SetExcluded(approlepolicy.FieldAppRoleID)
	return u
}

// SetAppPolicyID sets the "app_policy_id" field.
func (u *AppRolePolicyUpsert) SetAppPolicyID(v int) *AppRolePolicyUpsert {
	u.Set(approlepolicy.FieldAppPolicyID, v)
	return u
}

// UpdateAppPolicyID sets the "app_policy_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsert) UpdateAppPolicyID() *AppRolePolicyUpsert {
	u.SetExcluded(approlepolicy.FieldAppPolicyID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppRolePolicyUpsert) SetAppID(v int) *AppRolePolicyUpsert {
	u.Set(approlepolicy.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsert) UpdateAppID() *AppRolePolicyUpsert {
	u.SetExcluded(approlepolicy.FieldAppID)
	return u
}

// AddAppID adds v to the "app_id" field.
func (u *AppRolePolicyUpsert) AddAppID(v int) *AppRolePolicyUpsert {
	u.Add(approlepolicy.FieldAppID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppRolePolicy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(approlepolicy.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppRolePolicyUpsertOne) UpdateNewValues() *AppRolePolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(approlepolicy.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(approlepolicy.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(approlepolicy.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppRolePolicy.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppRolePolicyUpsertOne) Ignore() *AppRolePolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRolePolicyUpsertOne) DoNothing() *AppRolePolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRolePolicyCreate.OnConflict
// documentation for more info.
func (u *AppRolePolicyUpsertOne) Update(set func(*AppRolePolicyUpsert)) *AppRolePolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRolePolicyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AppRolePolicyUpsertOne) SetUpdatedBy(v int) *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppRolePolicyUpsertOne) AddUpdatedBy(v int) *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppRolePolicyUpsertOne) UpdateUpdatedBy() *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppRolePolicyUpsertOne) ClearUpdatedBy() *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRolePolicyUpsertOne) SetUpdatedAt(v time.Time) *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRolePolicyUpsertOne) UpdateUpdatedAt() *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppRolePolicyUpsertOne) ClearUpdatedAt() *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppRolePolicyUpsertOne) SetAppRoleID(v int) *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsertOne) UpdateAppRoleID() *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateAppRoleID()
	})
}

// SetAppPolicyID sets the "app_policy_id" field.
func (u *AppRolePolicyUpsertOne) SetAppPolicyID(v int) *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetAppPolicyID(v)
	})
}

// UpdateAppPolicyID sets the "app_policy_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsertOne) UpdateAppPolicyID() *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateAppPolicyID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppRolePolicyUpsertOne) SetAppID(v int) *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AppRolePolicyUpsertOne) AddAppID(v int) *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsertOne) UpdateAppID() *AppRolePolicyUpsertOne {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *AppRolePolicyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRolePolicyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRolePolicyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppRolePolicyUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppRolePolicyUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppRolePolicyCreateBulk is the builder for creating many AppRolePolicy entities in bulk.
type AppRolePolicyCreateBulk struct {
	config
	builders []*AppRolePolicyCreate
	conflict []sql.ConflictOption
}

// Save creates the AppRolePolicy entities in the database.
func (arpcb *AppRolePolicyCreateBulk) Save(ctx context.Context) ([]*AppRolePolicy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(arpcb.builders))
	nodes := make([]*AppRolePolicy, len(arpcb.builders))
	mutators := make([]Mutator, len(arpcb.builders))
	for i := range arpcb.builders {
		func(i int, root context.Context) {
			builder := arpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppRolePolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = arpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arpcb *AppRolePolicyCreateBulk) SaveX(ctx context.Context) []*AppRolePolicy {
	v, err := arpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arpcb *AppRolePolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := arpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpcb *AppRolePolicyCreateBulk) ExecX(ctx context.Context) {
	if err := arpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRolePolicy.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRolePolicyUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (arpcb *AppRolePolicyCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppRolePolicyUpsertBulk {
	arpcb.conflict = opts
	return &AppRolePolicyUpsertBulk{
		create: arpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRolePolicy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arpcb *AppRolePolicyCreateBulk) OnConflictColumns(columns ...string) *AppRolePolicyUpsertBulk {
	arpcb.conflict = append(arpcb.conflict, sql.ConflictColumns(columns...))
	return &AppRolePolicyUpsertBulk{
		create: arpcb,
	}
}

// AppRolePolicyUpsertBulk is the builder for "upsert"-ing
// a bulk of AppRolePolicy nodes.
type AppRolePolicyUpsertBulk struct {
	create *AppRolePolicyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppRolePolicy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(approlepolicy.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppRolePolicyUpsertBulk) UpdateNewValues() *AppRolePolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(approlepolicy.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(approlepolicy.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(approlepolicy.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppRolePolicy.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppRolePolicyUpsertBulk) Ignore() *AppRolePolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRolePolicyUpsertBulk) DoNothing() *AppRolePolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRolePolicyCreateBulk.OnConflict
// documentation for more info.
func (u *AppRolePolicyUpsertBulk) Update(set func(*AppRolePolicyUpsert)) *AppRolePolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRolePolicyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AppRolePolicyUpsertBulk) SetUpdatedBy(v int) *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppRolePolicyUpsertBulk) AddUpdatedBy(v int) *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppRolePolicyUpsertBulk) UpdateUpdatedBy() *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppRolePolicyUpsertBulk) ClearUpdatedBy() *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRolePolicyUpsertBulk) SetUpdatedAt(v time.Time) *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRolePolicyUpsertBulk) UpdateUpdatedAt() *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppRolePolicyUpsertBulk) ClearUpdatedAt() *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppRolePolicyUpsertBulk) SetAppRoleID(v int) *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsertBulk) UpdateAppRoleID() *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateAppRoleID()
	})
}

// SetAppPolicyID sets the "app_policy_id" field.
func (u *AppRolePolicyUpsertBulk) SetAppPolicyID(v int) *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetAppPolicyID(v)
	})
}

// UpdateAppPolicyID sets the "app_policy_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsertBulk) UpdateAppPolicyID() *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateAppPolicyID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppRolePolicyUpsertBulk) SetAppID(v int) *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *AppRolePolicyUpsertBulk) AddAppID(v int) *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRolePolicyUpsertBulk) UpdateAppID() *AppRolePolicyUpsertBulk {
	return u.Update(func(s *AppRolePolicyUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *AppRolePolicyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppRolePolicyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRolePolicyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRolePolicyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
