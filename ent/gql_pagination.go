// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/woocoos/knockout-go/pkg/pagination"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appdict"
	"github.com/woocoos/knockout/ent/appdictitem"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/appres"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/file"
	"github.com/woocoos/knockout/ent/filesource"
	"github.com/woocoos/knockout/ent/oauthclient"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgpolicy"
	"github.com/woocoos/knockout/ent/orgrole"
	"github.com/woocoos/knockout/ent/orguserpreference"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userdevice"
	"github.com/woocoos/knockout/ent/useridentity"
	"github.com/woocoos/knockout/ent/userloginprofile"
	"github.com/woocoos/knockout/ent/userpassword"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AppEdge is the edge representation of App.
type AppEdge struct {
	Node   *App   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// AppConnection is the connection containing edges to App.
type AppConnection struct {
	Edges      []*AppEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *AppConnection) build(nodes []*App, pager *appPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *App
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *App {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *App {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppPaginateOption enables pagination customization.
type AppPaginateOption func(*appPager) error

// WithAppOrder configures pagination ordering.
func WithAppOrder(order *AppOrder) AppPaginateOption {
	if order == nil {
		order = DefaultAppOrder
	}
	o := *order
	return func(pager *appPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppFilter configures pagination filter.
func WithAppFilter(filter func(*AppQuery) (*AppQuery, error)) AppPaginateOption {
	return func(pager *appPager) error {
		if filter == nil {
			return errors.New("AppQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appPager struct {
	reverse bool
	order   *AppOrder
	filter  func(*AppQuery) (*AppQuery, error)
}

func newAppPager(opts []AppPaginateOption, reverse bool) (*appPager, error) {
	pager := &appPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppOrder
	}
	return pager, nil
}

func (p *appPager) applyFilter(query *AppQuery) (*AppQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appPager) toCursor(a *App) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *appPager) applyCursors(query *AppQuery, after, before *Cursor) (*AppQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *appPager) applyOrder(query *AppQuery) *AppQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppOrder.Field {
		query = query.Order(DefaultAppOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *appPager) orderExpr(query *AppQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppOrder.Field {
			b.Comma().Ident(DefaultAppOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to App.
func (a *AppQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppPaginateOption,
) (*AppConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AppConnection{Edges: []*AppEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			a.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			a.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppOrderFieldCreatedAt orders App by created_at.
	AppOrderFieldCreatedAt = &AppOrderField{
		Value: func(a *App) (ent.Value, error) {
			return a.CreatedAt, nil
		},
		column: app.FieldCreatedAt,
		toTerm: app.ByCreatedAt,
		toCursor: func(a *App) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppOrderField) String() string {
	var str string
	switch f.column {
	case AppOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppOrderField", str)
	}
	return nil
}

// AppOrderField defines the ordering field of App.
type AppOrderField struct {
	// Value extracts the ordering value from the given App.
	Value    func(*App) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) app.OrderOption
	toCursor func(*App) Cursor
}

// AppOrder defines the ordering of App.
type AppOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *AppOrderField `json:"field"`
}

// DefaultAppOrder is the default ordering of App.
var DefaultAppOrder = &AppOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppOrderField{
		Value: func(a *App) (ent.Value, error) {
			return a.ID, nil
		},
		column: app.FieldID,
		toTerm: app.ByID,
		toCursor: func(a *App) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts App into AppEdge.
func (a *App) ToEdge(order *AppOrder) *AppEdge {
	if order == nil {
		order = DefaultAppOrder
	}
	return &AppEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// AppActionEdge is the edge representation of AppAction.
type AppActionEdge struct {
	Node   *AppAction `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// AppActionConnection is the connection containing edges to AppAction.
type AppActionConnection struct {
	Edges      []*AppActionEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *AppActionConnection) build(nodes []*AppAction, pager *appactionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppAction
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppAction {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppAction {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppActionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppActionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppActionPaginateOption enables pagination customization.
type AppActionPaginateOption func(*appactionPager) error

// WithAppActionOrder configures pagination ordering.
func WithAppActionOrder(order *AppActionOrder) AppActionPaginateOption {
	if order == nil {
		order = DefaultAppActionOrder
	}
	o := *order
	return func(pager *appactionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppActionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppActionFilter configures pagination filter.
func WithAppActionFilter(filter func(*AppActionQuery) (*AppActionQuery, error)) AppActionPaginateOption {
	return func(pager *appactionPager) error {
		if filter == nil {
			return errors.New("AppActionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appactionPager struct {
	reverse bool
	order   *AppActionOrder
	filter  func(*AppActionQuery) (*AppActionQuery, error)
}

func newAppActionPager(opts []AppActionPaginateOption, reverse bool) (*appactionPager, error) {
	pager := &appactionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppActionOrder
	}
	return pager, nil
}

func (p *appactionPager) applyFilter(query *AppActionQuery) (*AppActionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appactionPager) toCursor(aa *AppAction) Cursor {
	return p.order.Field.toCursor(aa)
}

func (p *appactionPager) applyCursors(query *AppActionQuery, after, before *Cursor) (*AppActionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppActionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *appactionPager) applyOrder(query *AppActionQuery) *AppActionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppActionOrder.Field {
		query = query.Order(DefaultAppActionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *appactionPager) orderExpr(query *AppActionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppActionOrder.Field {
			b.Comma().Ident(DefaultAppActionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppAction.
func (aa *AppActionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppActionPaginateOption,
) (*AppActionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppActionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if aa, err = pager.applyFilter(aa); err != nil {
		return nil, err
	}
	conn := &AppActionConnection{Edges: []*AppActionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := aa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if aa, err = pager.applyCursors(aa, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		aa.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			aa.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			aa.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := aa.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	aa = pager.applyOrder(aa)
	nodes, err := aa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppActionOrderFieldCreatedAt orders AppAction by created_at.
	AppActionOrderFieldCreatedAt = &AppActionOrderField{
		Value: func(aa *AppAction) (ent.Value, error) {
			return aa.CreatedAt, nil
		},
		column: appaction.FieldCreatedAt,
		toTerm: appaction.ByCreatedAt,
		toCursor: func(aa *AppAction) Cursor {
			return Cursor{
				ID:    aa.ID,
				Value: aa.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppActionOrderField) String() string {
	var str string
	switch f.column {
	case AppActionOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppActionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppActionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppActionOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppActionOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppActionOrderField", str)
	}
	return nil
}

// AppActionOrderField defines the ordering field of AppAction.
type AppActionOrderField struct {
	// Value extracts the ordering value from the given AppAction.
	Value    func(*AppAction) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) appaction.OrderOption
	toCursor func(*AppAction) Cursor
}

// AppActionOrder defines the ordering of AppAction.
type AppActionOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *AppActionOrderField `json:"field"`
}

// DefaultAppActionOrder is the default ordering of AppAction.
var DefaultAppActionOrder = &AppActionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppActionOrderField{
		Value: func(aa *AppAction) (ent.Value, error) {
			return aa.ID, nil
		},
		column: appaction.FieldID,
		toTerm: appaction.ByID,
		toCursor: func(aa *AppAction) Cursor {
			return Cursor{ID: aa.ID}
		},
	},
}

// ToEdge converts AppAction into AppActionEdge.
func (aa *AppAction) ToEdge(order *AppActionOrder) *AppActionEdge {
	if order == nil {
		order = DefaultAppActionOrder
	}
	return &AppActionEdge{
		Node:   aa,
		Cursor: order.Field.toCursor(aa),
	}
}

// AppDictEdge is the edge representation of AppDict.
type AppDictEdge struct {
	Node   *AppDict `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AppDictConnection is the connection containing edges to AppDict.
type AppDictConnection struct {
	Edges      []*AppDictEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AppDictConnection) build(nodes []*AppDict, pager *appdictPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppDict
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppDict {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppDict {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppDictEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppDictEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppDictPaginateOption enables pagination customization.
type AppDictPaginateOption func(*appdictPager) error

// WithAppDictOrder configures pagination ordering.
func WithAppDictOrder(order *AppDictOrder) AppDictPaginateOption {
	if order == nil {
		order = DefaultAppDictOrder
	}
	o := *order
	return func(pager *appdictPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppDictOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppDictFilter configures pagination filter.
func WithAppDictFilter(filter func(*AppDictQuery) (*AppDictQuery, error)) AppDictPaginateOption {
	return func(pager *appdictPager) error {
		if filter == nil {
			return errors.New("AppDictQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appdictPager struct {
	reverse bool
	order   *AppDictOrder
	filter  func(*AppDictQuery) (*AppDictQuery, error)
}

func newAppDictPager(opts []AppDictPaginateOption, reverse bool) (*appdictPager, error) {
	pager := &appdictPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppDictOrder
	}
	return pager, nil
}

func (p *appdictPager) applyFilter(query *AppDictQuery) (*AppDictQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appdictPager) toCursor(ad *AppDict) Cursor {
	return p.order.Field.toCursor(ad)
}

func (p *appdictPager) applyCursors(query *AppDictQuery, after, before *Cursor) (*AppDictQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppDictOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *appdictPager) applyOrder(query *AppDictQuery) *AppDictQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppDictOrder.Field {
		query = query.Order(DefaultAppDictOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *appdictPager) orderExpr(query *AppDictQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppDictOrder.Field {
			b.Comma().Ident(DefaultAppDictOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppDict.
func (ad *AppDictQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppDictPaginateOption,
) (*AppDictConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppDictPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ad, err = pager.applyFilter(ad); err != nil {
		return nil, err
	}
	conn := &AppDictConnection{Edges: []*AppDictEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ad.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ad, err = pager.applyCursors(ad, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ad.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			ad.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			ad.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ad.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ad = pager.applyOrder(ad)
	nodes, err := ad.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppDictOrderFieldCreatedAt orders AppDict by created_at.
	AppDictOrderFieldCreatedAt = &AppDictOrderField{
		Value: func(ad *AppDict) (ent.Value, error) {
			return ad.CreatedAt, nil
		},
		column: appdict.FieldCreatedAt,
		toTerm: appdict.ByCreatedAt,
		toCursor: func(ad *AppDict) Cursor {
			return Cursor{
				ID:    ad.ID,
				Value: ad.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppDictOrderField) String() string {
	var str string
	switch f.column {
	case AppDictOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppDictOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppDictOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppDictOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppDictOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppDictOrderField", str)
	}
	return nil
}

// AppDictOrderField defines the ordering field of AppDict.
type AppDictOrderField struct {
	// Value extracts the ordering value from the given AppDict.
	Value    func(*AppDict) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) appdict.OrderOption
	toCursor func(*AppDict) Cursor
}

// AppDictOrder defines the ordering of AppDict.
type AppDictOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AppDictOrderField `json:"field"`
}

// DefaultAppDictOrder is the default ordering of AppDict.
var DefaultAppDictOrder = &AppDictOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppDictOrderField{
		Value: func(ad *AppDict) (ent.Value, error) {
			return ad.ID, nil
		},
		column: appdict.FieldID,
		toTerm: appdict.ByID,
		toCursor: func(ad *AppDict) Cursor {
			return Cursor{ID: ad.ID}
		},
	},
}

// ToEdge converts AppDict into AppDictEdge.
func (ad *AppDict) ToEdge(order *AppDictOrder) *AppDictEdge {
	if order == nil {
		order = DefaultAppDictOrder
	}
	return &AppDictEdge{
		Node:   ad,
		Cursor: order.Field.toCursor(ad),
	}
}

// AppDictItemEdge is the edge representation of AppDictItem.
type AppDictItemEdge struct {
	Node   *AppDictItem `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// AppDictItemConnection is the connection containing edges to AppDictItem.
type AppDictItemConnection struct {
	Edges      []*AppDictItemEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *AppDictItemConnection) build(nodes []*AppDictItem, pager *appdictitemPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppDictItem
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppDictItem {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppDictItem {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppDictItemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppDictItemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppDictItemPaginateOption enables pagination customization.
type AppDictItemPaginateOption func(*appdictitemPager) error

// WithAppDictItemOrder configures pagination ordering.
func WithAppDictItemOrder(order *AppDictItemOrder) AppDictItemPaginateOption {
	if order == nil {
		order = DefaultAppDictItemOrder
	}
	o := *order
	return func(pager *appdictitemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppDictItemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppDictItemFilter configures pagination filter.
func WithAppDictItemFilter(filter func(*AppDictItemQuery) (*AppDictItemQuery, error)) AppDictItemPaginateOption {
	return func(pager *appdictitemPager) error {
		if filter == nil {
			return errors.New("AppDictItemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appdictitemPager struct {
	reverse bool
	order   *AppDictItemOrder
	filter  func(*AppDictItemQuery) (*AppDictItemQuery, error)
}

func newAppDictItemPager(opts []AppDictItemPaginateOption, reverse bool) (*appdictitemPager, error) {
	pager := &appdictitemPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppDictItemOrder
	}
	return pager, nil
}

func (p *appdictitemPager) applyFilter(query *AppDictItemQuery) (*AppDictItemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appdictitemPager) toCursor(adi *AppDictItem) Cursor {
	return p.order.Field.toCursor(adi)
}

func (p *appdictitemPager) applyCursors(query *AppDictItemQuery, after, before *Cursor) (*AppDictItemQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppDictItemOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *appdictitemPager) applyOrder(query *AppDictItemQuery) *AppDictItemQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppDictItemOrder.Field {
		query = query.Order(DefaultAppDictItemOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *appdictitemPager) orderExpr(query *AppDictItemQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppDictItemOrder.Field {
			b.Comma().Ident(DefaultAppDictItemOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppDictItem.
func (adi *AppDictItemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppDictItemPaginateOption,
) (*AppDictItemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppDictItemPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if adi, err = pager.applyFilter(adi); err != nil {
		return nil, err
	}
	conn := &AppDictItemConnection{Edges: []*AppDictItemEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := adi.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if adi, err = pager.applyCursors(adi, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		adi.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			adi.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			adi.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := adi.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	adi = pager.applyOrder(adi)
	nodes, err := adi.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppDictItemOrderFieldCreatedAt orders AppDictItem by created_at.
	AppDictItemOrderFieldCreatedAt = &AppDictItemOrderField{
		Value: func(adi *AppDictItem) (ent.Value, error) {
			return adi.CreatedAt, nil
		},
		column: appdictitem.FieldCreatedAt,
		toTerm: appdictitem.ByCreatedAt,
		toCursor: func(adi *AppDictItem) Cursor {
			return Cursor{
				ID:    adi.ID,
				Value: adi.CreatedAt,
			}
		},
	}
	// AppDictItemOrderFieldDisplaySort orders AppDictItem by display_sort.
	AppDictItemOrderFieldDisplaySort = &AppDictItemOrderField{
		Value: func(adi *AppDictItem) (ent.Value, error) {
			return adi.DisplaySort, nil
		},
		column: appdictitem.FieldDisplaySort,
		toTerm: appdictitem.ByDisplaySort,
		toCursor: func(adi *AppDictItem) Cursor {
			return Cursor{
				ID:    adi.ID,
				Value: adi.DisplaySort,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppDictItemOrderField) String() string {
	var str string
	switch f.column {
	case AppDictItemOrderFieldCreatedAt.column:
		str = "createdAt"
	case AppDictItemOrderFieldDisplaySort.column:
		str = "displaySort"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppDictItemOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppDictItemOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppDictItemOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppDictItemOrderFieldCreatedAt
	case "displaySort":
		*f = *AppDictItemOrderFieldDisplaySort
	default:
		return fmt.Errorf("%s is not a valid AppDictItemOrderField", str)
	}
	return nil
}

// AppDictItemOrderField defines the ordering field of AppDictItem.
type AppDictItemOrderField struct {
	// Value extracts the ordering value from the given AppDictItem.
	Value    func(*AppDictItem) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) appdictitem.OrderOption
	toCursor func(*AppDictItem) Cursor
}

// AppDictItemOrder defines the ordering of AppDictItem.
type AppDictItemOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *AppDictItemOrderField `json:"field"`
}

// DefaultAppDictItemOrder is the default ordering of AppDictItem.
var DefaultAppDictItemOrder = &AppDictItemOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppDictItemOrderField{
		Value: func(adi *AppDictItem) (ent.Value, error) {
			return adi.ID, nil
		},
		column: appdictitem.FieldID,
		toTerm: appdictitem.ByID,
		toCursor: func(adi *AppDictItem) Cursor {
			return Cursor{ID: adi.ID}
		},
	},
}

// ToEdge converts AppDictItem into AppDictItemEdge.
func (adi *AppDictItem) ToEdge(order *AppDictItemOrder) *AppDictItemEdge {
	if order == nil {
		order = DefaultAppDictItemOrder
	}
	return &AppDictItemEdge{
		Node:   adi,
		Cursor: order.Field.toCursor(adi),
	}
}

// AppMenuEdge is the edge representation of AppMenu.
type AppMenuEdge struct {
	Node   *AppMenu `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AppMenuConnection is the connection containing edges to AppMenu.
type AppMenuConnection struct {
	Edges      []*AppMenuEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AppMenuConnection) build(nodes []*AppMenu, pager *appmenuPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppMenu
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppMenu {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppMenu {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppMenuEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppMenuEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppMenuPaginateOption enables pagination customization.
type AppMenuPaginateOption func(*appmenuPager) error

// WithAppMenuOrder configures pagination ordering.
func WithAppMenuOrder(order *AppMenuOrder) AppMenuPaginateOption {
	if order == nil {
		order = DefaultAppMenuOrder
	}
	o := *order
	return func(pager *appmenuPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppMenuOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppMenuFilter configures pagination filter.
func WithAppMenuFilter(filter func(*AppMenuQuery) (*AppMenuQuery, error)) AppMenuPaginateOption {
	return func(pager *appmenuPager) error {
		if filter == nil {
			return errors.New("AppMenuQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appmenuPager struct {
	reverse bool
	order   *AppMenuOrder
	filter  func(*AppMenuQuery) (*AppMenuQuery, error)
}

func newAppMenuPager(opts []AppMenuPaginateOption, reverse bool) (*appmenuPager, error) {
	pager := &appmenuPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppMenuOrder
	}
	return pager, nil
}

func (p *appmenuPager) applyFilter(query *AppMenuQuery) (*AppMenuQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appmenuPager) toCursor(am *AppMenu) Cursor {
	return p.order.Field.toCursor(am)
}

func (p *appmenuPager) applyCursors(query *AppMenuQuery, after, before *Cursor) (*AppMenuQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppMenuOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *appmenuPager) applyOrder(query *AppMenuQuery) *AppMenuQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppMenuOrder.Field {
		query = query.Order(DefaultAppMenuOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *appmenuPager) orderExpr(query *AppMenuQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppMenuOrder.Field {
			b.Comma().Ident(DefaultAppMenuOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppMenu.
func (am *AppMenuQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppMenuPaginateOption,
) (*AppMenuConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppMenuPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if am, err = pager.applyFilter(am); err != nil {
		return nil, err
	}
	conn := &AppMenuConnection{Edges: []*AppMenuEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := am.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if am, err = pager.applyCursors(am, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		am.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			am.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			am.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := am.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	am = pager.applyOrder(am)
	nodes, err := am.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppMenuOrderFieldCreatedAt orders AppMenu by created_at.
	AppMenuOrderFieldCreatedAt = &AppMenuOrderField{
		Value: func(am *AppMenu) (ent.Value, error) {
			return am.CreatedAt, nil
		},
		column: appmenu.FieldCreatedAt,
		toTerm: appmenu.ByCreatedAt,
		toCursor: func(am *AppMenu) Cursor {
			return Cursor{
				ID:    am.ID,
				Value: am.CreatedAt,
			}
		},
	}
	// AppMenuOrderFieldDisplaySort orders AppMenu by display_sort.
	AppMenuOrderFieldDisplaySort = &AppMenuOrderField{
		Value: func(am *AppMenu) (ent.Value, error) {
			return am.DisplaySort, nil
		},
		column: appmenu.FieldDisplaySort,
		toTerm: appmenu.ByDisplaySort,
		toCursor: func(am *AppMenu) Cursor {
			return Cursor{
				ID:    am.ID,
				Value: am.DisplaySort,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppMenuOrderField) String() string {
	var str string
	switch f.column {
	case AppMenuOrderFieldCreatedAt.column:
		str = "createdAt"
	case AppMenuOrderFieldDisplaySort.column:
		str = "displaySort"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppMenuOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppMenuOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppMenuOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppMenuOrderFieldCreatedAt
	case "displaySort":
		*f = *AppMenuOrderFieldDisplaySort
	default:
		return fmt.Errorf("%s is not a valid AppMenuOrderField", str)
	}
	return nil
}

// AppMenuOrderField defines the ordering field of AppMenu.
type AppMenuOrderField struct {
	// Value extracts the ordering value from the given AppMenu.
	Value    func(*AppMenu) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) appmenu.OrderOption
	toCursor func(*AppMenu) Cursor
}

// AppMenuOrder defines the ordering of AppMenu.
type AppMenuOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AppMenuOrderField `json:"field"`
}

// DefaultAppMenuOrder is the default ordering of AppMenu.
var DefaultAppMenuOrder = &AppMenuOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppMenuOrderField{
		Value: func(am *AppMenu) (ent.Value, error) {
			return am.ID, nil
		},
		column: appmenu.FieldID,
		toTerm: appmenu.ByID,
		toCursor: func(am *AppMenu) Cursor {
			return Cursor{ID: am.ID}
		},
	},
}

// ToEdge converts AppMenu into AppMenuEdge.
func (am *AppMenu) ToEdge(order *AppMenuOrder) *AppMenuEdge {
	if order == nil {
		order = DefaultAppMenuOrder
	}
	return &AppMenuEdge{
		Node:   am,
		Cursor: order.Field.toCursor(am),
	}
}

// AppPolicyEdge is the edge representation of AppPolicy.
type AppPolicyEdge struct {
	Node   *AppPolicy `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// AppPolicyConnection is the connection containing edges to AppPolicy.
type AppPolicyConnection struct {
	Edges      []*AppPolicyEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *AppPolicyConnection) build(nodes []*AppPolicy, pager *apppolicyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppPolicy
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppPolicy {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppPolicy {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppPolicyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppPolicyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppPolicyPaginateOption enables pagination customization.
type AppPolicyPaginateOption func(*apppolicyPager) error

// WithAppPolicyOrder configures pagination ordering.
func WithAppPolicyOrder(order *AppPolicyOrder) AppPolicyPaginateOption {
	if order == nil {
		order = DefaultAppPolicyOrder
	}
	o := *order
	return func(pager *apppolicyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppPolicyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppPolicyFilter configures pagination filter.
func WithAppPolicyFilter(filter func(*AppPolicyQuery) (*AppPolicyQuery, error)) AppPolicyPaginateOption {
	return func(pager *apppolicyPager) error {
		if filter == nil {
			return errors.New("AppPolicyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type apppolicyPager struct {
	reverse bool
	order   *AppPolicyOrder
	filter  func(*AppPolicyQuery) (*AppPolicyQuery, error)
}

func newAppPolicyPager(opts []AppPolicyPaginateOption, reverse bool) (*apppolicyPager, error) {
	pager := &apppolicyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppPolicyOrder
	}
	return pager, nil
}

func (p *apppolicyPager) applyFilter(query *AppPolicyQuery) (*AppPolicyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *apppolicyPager) toCursor(ap *AppPolicy) Cursor {
	return p.order.Field.toCursor(ap)
}

func (p *apppolicyPager) applyCursors(query *AppPolicyQuery, after, before *Cursor) (*AppPolicyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppPolicyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *apppolicyPager) applyOrder(query *AppPolicyQuery) *AppPolicyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppPolicyOrder.Field {
		query = query.Order(DefaultAppPolicyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *apppolicyPager) orderExpr(query *AppPolicyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppPolicyOrder.Field {
			b.Comma().Ident(DefaultAppPolicyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppPolicy.
func (ap *AppPolicyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppPolicyPaginateOption,
) (*AppPolicyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppPolicyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ap, err = pager.applyFilter(ap); err != nil {
		return nil, err
	}
	conn := &AppPolicyConnection{Edges: []*AppPolicyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ap.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ap, err = pager.applyCursors(ap, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ap.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			ap.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			ap.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ap.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ap = pager.applyOrder(ap)
	nodes, err := ap.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppPolicyOrderFieldCreatedAt orders AppPolicy by created_at.
	AppPolicyOrderFieldCreatedAt = &AppPolicyOrderField{
		Value: func(ap *AppPolicy) (ent.Value, error) {
			return ap.CreatedAt, nil
		},
		column: apppolicy.FieldCreatedAt,
		toTerm: apppolicy.ByCreatedAt,
		toCursor: func(ap *AppPolicy) Cursor {
			return Cursor{
				ID:    ap.ID,
				Value: ap.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppPolicyOrderField) String() string {
	var str string
	switch f.column {
	case AppPolicyOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppPolicyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppPolicyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppPolicyOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppPolicyOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppPolicyOrderField", str)
	}
	return nil
}

// AppPolicyOrderField defines the ordering field of AppPolicy.
type AppPolicyOrderField struct {
	// Value extracts the ordering value from the given AppPolicy.
	Value    func(*AppPolicy) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) apppolicy.OrderOption
	toCursor func(*AppPolicy) Cursor
}

// AppPolicyOrder defines the ordering of AppPolicy.
type AppPolicyOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *AppPolicyOrderField `json:"field"`
}

// DefaultAppPolicyOrder is the default ordering of AppPolicy.
var DefaultAppPolicyOrder = &AppPolicyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppPolicyOrderField{
		Value: func(ap *AppPolicy) (ent.Value, error) {
			return ap.ID, nil
		},
		column: apppolicy.FieldID,
		toTerm: apppolicy.ByID,
		toCursor: func(ap *AppPolicy) Cursor {
			return Cursor{ID: ap.ID}
		},
	},
}

// ToEdge converts AppPolicy into AppPolicyEdge.
func (ap *AppPolicy) ToEdge(order *AppPolicyOrder) *AppPolicyEdge {
	if order == nil {
		order = DefaultAppPolicyOrder
	}
	return &AppPolicyEdge{
		Node:   ap,
		Cursor: order.Field.toCursor(ap),
	}
}

// AppResEdge is the edge representation of AppRes.
type AppResEdge struct {
	Node   *AppRes `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// AppResConnection is the connection containing edges to AppRes.
type AppResConnection struct {
	Edges      []*AppResEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *AppResConnection) build(nodes []*AppRes, pager *appresPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppRes
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppRes {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppRes {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppResEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppResEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppResPaginateOption enables pagination customization.
type AppResPaginateOption func(*appresPager) error

// WithAppResOrder configures pagination ordering.
func WithAppResOrder(order *AppResOrder) AppResPaginateOption {
	if order == nil {
		order = DefaultAppResOrder
	}
	o := *order
	return func(pager *appresPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppResOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppResFilter configures pagination filter.
func WithAppResFilter(filter func(*AppResQuery) (*AppResQuery, error)) AppResPaginateOption {
	return func(pager *appresPager) error {
		if filter == nil {
			return errors.New("AppResQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appresPager struct {
	reverse bool
	order   *AppResOrder
	filter  func(*AppResQuery) (*AppResQuery, error)
}

func newAppResPager(opts []AppResPaginateOption, reverse bool) (*appresPager, error) {
	pager := &appresPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppResOrder
	}
	return pager, nil
}

func (p *appresPager) applyFilter(query *AppResQuery) (*AppResQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appresPager) toCursor(ar *AppRes) Cursor {
	return p.order.Field.toCursor(ar)
}

func (p *appresPager) applyCursors(query *AppResQuery, after, before *Cursor) (*AppResQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppResOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *appresPager) applyOrder(query *AppResQuery) *AppResQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppResOrder.Field {
		query = query.Order(DefaultAppResOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *appresPager) orderExpr(query *AppResQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppResOrder.Field {
			b.Comma().Ident(DefaultAppResOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppRes.
func (ar *AppResQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppResPaginateOption,
) (*AppResConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppResPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ar, err = pager.applyFilter(ar); err != nil {
		return nil, err
	}
	conn := &AppResConnection{Edges: []*AppResEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ar.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ar, err = pager.applyCursors(ar, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ar.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			ar.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			ar.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ar.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ar = pager.applyOrder(ar)
	nodes, err := ar.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppResOrderFieldCreatedAt orders AppRes by created_at.
	AppResOrderFieldCreatedAt = &AppResOrderField{
		Value: func(ar *AppRes) (ent.Value, error) {
			return ar.CreatedAt, nil
		},
		column: appres.FieldCreatedAt,
		toTerm: appres.ByCreatedAt,
		toCursor: func(ar *AppRes) Cursor {
			return Cursor{
				ID:    ar.ID,
				Value: ar.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppResOrderField) String() string {
	var str string
	switch f.column {
	case AppResOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppResOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppResOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppResOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppResOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppResOrderField", str)
	}
	return nil
}

// AppResOrderField defines the ordering field of AppRes.
type AppResOrderField struct {
	// Value extracts the ordering value from the given AppRes.
	Value    func(*AppRes) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) appres.OrderOption
	toCursor func(*AppRes) Cursor
}

// AppResOrder defines the ordering of AppRes.
type AppResOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *AppResOrderField `json:"field"`
}

// DefaultAppResOrder is the default ordering of AppRes.
var DefaultAppResOrder = &AppResOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppResOrderField{
		Value: func(ar *AppRes) (ent.Value, error) {
			return ar.ID, nil
		},
		column: appres.FieldID,
		toTerm: appres.ByID,
		toCursor: func(ar *AppRes) Cursor {
			return Cursor{ID: ar.ID}
		},
	},
}

// ToEdge converts AppRes into AppResEdge.
func (ar *AppRes) ToEdge(order *AppResOrder) *AppResEdge {
	if order == nil {
		order = DefaultAppResOrder
	}
	return &AppResEdge{
		Node:   ar,
		Cursor: order.Field.toCursor(ar),
	}
}

// AppRoleEdge is the edge representation of AppRole.
type AppRoleEdge struct {
	Node   *AppRole `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AppRoleConnection is the connection containing edges to AppRole.
type AppRoleConnection struct {
	Edges      []*AppRoleEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AppRoleConnection) build(nodes []*AppRole, pager *approlePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AppRole
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppRole {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppRole {
			return nodes[i]
		}
	}
	c.Edges = make([]*AppRoleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AppRoleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AppRolePaginateOption enables pagination customization.
type AppRolePaginateOption func(*approlePager) error

// WithAppRoleOrder configures pagination ordering.
func WithAppRoleOrder(order *AppRoleOrder) AppRolePaginateOption {
	if order == nil {
		order = DefaultAppRoleOrder
	}
	o := *order
	return func(pager *approlePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppRoleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppRoleFilter configures pagination filter.
func WithAppRoleFilter(filter func(*AppRoleQuery) (*AppRoleQuery, error)) AppRolePaginateOption {
	return func(pager *approlePager) error {
		if filter == nil {
			return errors.New("AppRoleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type approlePager struct {
	reverse bool
	order   *AppRoleOrder
	filter  func(*AppRoleQuery) (*AppRoleQuery, error)
}

func newAppRolePager(opts []AppRolePaginateOption, reverse bool) (*approlePager, error) {
	pager := &approlePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppRoleOrder
	}
	return pager, nil
}

func (p *approlePager) applyFilter(query *AppRoleQuery) (*AppRoleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *approlePager) toCursor(ar *AppRole) Cursor {
	return p.order.Field.toCursor(ar)
}

func (p *approlePager) applyCursors(query *AppRoleQuery, after, before *Cursor) (*AppRoleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAppRoleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *approlePager) applyOrder(query *AppRoleQuery) *AppRoleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAppRoleOrder.Field {
		query = query.Order(DefaultAppRoleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *approlePager) orderExpr(query *AppRoleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAppRoleOrder.Field {
			b.Comma().Ident(DefaultAppRoleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AppRole.
func (ar *AppRoleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppRolePaginateOption,
) (*AppRoleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppRolePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ar, err = pager.applyFilter(ar); err != nil {
		return nil, err
	}
	conn := &AppRoleConnection{Edges: []*AppRoleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ar.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ar, err = pager.applyCursors(ar, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ar.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			ar.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			ar.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ar.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ar = pager.applyOrder(ar)
	nodes, err := ar.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AppRoleOrderFieldCreatedAt orders AppRole by created_at.
	AppRoleOrderFieldCreatedAt = &AppRoleOrderField{
		Value: func(ar *AppRole) (ent.Value, error) {
			return ar.CreatedAt, nil
		},
		column: approle.FieldCreatedAt,
		toTerm: approle.ByCreatedAt,
		toCursor: func(ar *AppRole) Cursor {
			return Cursor{
				ID:    ar.ID,
				Value: ar.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppRoleOrderField) String() string {
	var str string
	switch f.column {
	case AppRoleOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppRoleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppRoleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppRoleOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *AppRoleOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid AppRoleOrderField", str)
	}
	return nil
}

// AppRoleOrderField defines the ordering field of AppRole.
type AppRoleOrderField struct {
	// Value extracts the ordering value from the given AppRole.
	Value    func(*AppRole) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) approle.OrderOption
	toCursor func(*AppRole) Cursor
}

// AppRoleOrder defines the ordering of AppRole.
type AppRoleOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AppRoleOrderField `json:"field"`
}

// DefaultAppRoleOrder is the default ordering of AppRole.
var DefaultAppRoleOrder = &AppRoleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AppRoleOrderField{
		Value: func(ar *AppRole) (ent.Value, error) {
			return ar.ID, nil
		},
		column: approle.FieldID,
		toTerm: approle.ByID,
		toCursor: func(ar *AppRole) Cursor {
			return Cursor{ID: ar.ID}
		},
	},
}

// ToEdge converts AppRole into AppRoleEdge.
func (ar *AppRole) ToEdge(order *AppRoleOrder) *AppRoleEdge {
	if order == nil {
		order = DefaultAppRoleOrder
	}
	return &AppRoleEdge{
		Node:   ar,
		Cursor: order.Field.toCursor(ar),
	}
}

// FileEdge is the edge representation of File.
type FileEdge struct {
	Node   *File  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// FileConnection is the connection containing edges to File.
type FileConnection struct {
	Edges      []*FileEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *FileConnection) build(nodes []*File, pager *filePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *File
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *File {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *File {
			return nodes[i]
		}
	}
	c.Edges = make([]*FileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FilePaginateOption enables pagination customization.
type FilePaginateOption func(*filePager) error

// WithFileOrder configures pagination ordering.
func WithFileOrder(order *FileOrder) FilePaginateOption {
	if order == nil {
		order = DefaultFileOrder
	}
	o := *order
	return func(pager *filePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFileFilter configures pagination filter.
func WithFileFilter(filter func(*FileQuery) (*FileQuery, error)) FilePaginateOption {
	return func(pager *filePager) error {
		if filter == nil {
			return errors.New("FileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type filePager struct {
	reverse bool
	order   *FileOrder
	filter  func(*FileQuery) (*FileQuery, error)
}

func newFilePager(opts []FilePaginateOption, reverse bool) (*filePager, error) {
	pager := &filePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFileOrder
	}
	return pager, nil
}

func (p *filePager) applyFilter(query *FileQuery) (*FileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *filePager) toCursor(f *File) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *filePager) applyCursors(query *FileQuery, after, before *Cursor) (*FileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *filePager) applyOrder(query *FileQuery) *FileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFileOrder.Field {
		query = query.Order(DefaultFileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *filePager) orderExpr(query *FileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFileOrder.Field {
			b.Comma().Ident(DefaultFileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to File.
func (f *FileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FilePaginateOption,
) (*FileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FileConnection{Edges: []*FileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := f.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if f, err = pager.applyCursors(f, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			f.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			f.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	f = pager.applyOrder(f)
	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FileOrderFieldCreatedAt orders File by created_at.
	FileOrderFieldCreatedAt = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.CreatedAt, nil
		},
		column: file.FieldCreatedAt,
		toTerm: file.ByCreatedAt,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FileOrderField) String() string {
	var str string
	switch f.column {
	case FileOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FileOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *FileOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid FileOrderField", str)
	}
	return nil
}

// FileOrderField defines the ordering field of File.
type FileOrderField struct {
	// Value extracts the ordering value from the given File.
	Value    func(*File) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) file.OrderOption
	toCursor func(*File) Cursor
}

// FileOrder defines the ordering of File.
type FileOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *FileOrderField `json:"field"`
}

// DefaultFileOrder is the default ordering of File.
var DefaultFileOrder = &FileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.ID, nil
		},
		column: file.FieldID,
		toTerm: file.ByID,
		toCursor: func(f *File) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts File into FileEdge.
func (f *File) ToEdge(order *FileOrder) *FileEdge {
	if order == nil {
		order = DefaultFileOrder
	}
	return &FileEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// FileSourceEdge is the edge representation of FileSource.
type FileSourceEdge struct {
	Node   *FileSource `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// FileSourceConnection is the connection containing edges to FileSource.
type FileSourceConnection struct {
	Edges      []*FileSourceEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *FileSourceConnection) build(nodes []*FileSource, pager *filesourcePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *FileSource
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FileSource {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FileSource {
			return nodes[i]
		}
	}
	c.Edges = make([]*FileSourceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FileSourceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FileSourcePaginateOption enables pagination customization.
type FileSourcePaginateOption func(*filesourcePager) error

// WithFileSourceOrder configures pagination ordering.
func WithFileSourceOrder(order *FileSourceOrder) FileSourcePaginateOption {
	if order == nil {
		order = DefaultFileSourceOrder
	}
	o := *order
	return func(pager *filesourcePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFileSourceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFileSourceFilter configures pagination filter.
func WithFileSourceFilter(filter func(*FileSourceQuery) (*FileSourceQuery, error)) FileSourcePaginateOption {
	return func(pager *filesourcePager) error {
		if filter == nil {
			return errors.New("FileSourceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type filesourcePager struct {
	reverse bool
	order   *FileSourceOrder
	filter  func(*FileSourceQuery) (*FileSourceQuery, error)
}

func newFileSourcePager(opts []FileSourcePaginateOption, reverse bool) (*filesourcePager, error) {
	pager := &filesourcePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFileSourceOrder
	}
	return pager, nil
}

func (p *filesourcePager) applyFilter(query *FileSourceQuery) (*FileSourceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *filesourcePager) toCursor(fs *FileSource) Cursor {
	return p.order.Field.toCursor(fs)
}

func (p *filesourcePager) applyCursors(query *FileSourceQuery, after, before *Cursor) (*FileSourceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFileSourceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *filesourcePager) applyOrder(query *FileSourceQuery) *FileSourceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFileSourceOrder.Field {
		query = query.Order(DefaultFileSourceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *filesourcePager) orderExpr(query *FileSourceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFileSourceOrder.Field {
			b.Comma().Ident(DefaultFileSourceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to FileSource.
func (fs *FileSourceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FileSourcePaginateOption,
) (*FileSourceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFileSourcePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if fs, err = pager.applyFilter(fs); err != nil {
		return nil, err
	}
	conn := &FileSourceConnection{Edges: []*FileSourceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := fs.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if fs, err = pager.applyCursors(fs, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		fs.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			fs.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			fs.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := fs.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	fs = pager.applyOrder(fs)
	nodes, err := fs.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FileSourceOrderFieldCreatedAt orders FileSource by created_at.
	FileSourceOrderFieldCreatedAt = &FileSourceOrderField{
		Value: func(fs *FileSource) (ent.Value, error) {
			return fs.CreatedAt, nil
		},
		column: filesource.FieldCreatedAt,
		toTerm: filesource.ByCreatedAt,
		toCursor: func(fs *FileSource) Cursor {
			return Cursor{
				ID:    fs.ID,
				Value: fs.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FileSourceOrderField) String() string {
	var str string
	switch f.column {
	case FileSourceOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FileSourceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FileSourceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FileSourceOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *FileSourceOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid FileSourceOrderField", str)
	}
	return nil
}

// FileSourceOrderField defines the ordering field of FileSource.
type FileSourceOrderField struct {
	// Value extracts the ordering value from the given FileSource.
	Value    func(*FileSource) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) filesource.OrderOption
	toCursor func(*FileSource) Cursor
}

// FileSourceOrder defines the ordering of FileSource.
type FileSourceOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *FileSourceOrderField `json:"field"`
}

// DefaultFileSourceOrder is the default ordering of FileSource.
var DefaultFileSourceOrder = &FileSourceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FileSourceOrderField{
		Value: func(fs *FileSource) (ent.Value, error) {
			return fs.ID, nil
		},
		column: filesource.FieldID,
		toTerm: filesource.ByID,
		toCursor: func(fs *FileSource) Cursor {
			return Cursor{ID: fs.ID}
		},
	},
}

// ToEdge converts FileSource into FileSourceEdge.
func (fs *FileSource) ToEdge(order *FileSourceOrder) *FileSourceEdge {
	if order == nil {
		order = DefaultFileSourceOrder
	}
	return &FileSourceEdge{
		Node:   fs,
		Cursor: order.Field.toCursor(fs),
	}
}

// OauthClientEdge is the edge representation of OauthClient.
type OauthClientEdge struct {
	Node   *OauthClient `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// OauthClientConnection is the connection containing edges to OauthClient.
type OauthClientConnection struct {
	Edges      []*OauthClientEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *OauthClientConnection) build(nodes []*OauthClient, pager *oauthclientPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OauthClient
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OauthClient {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OauthClient {
			return nodes[i]
		}
	}
	c.Edges = make([]*OauthClientEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OauthClientEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OauthClientPaginateOption enables pagination customization.
type OauthClientPaginateOption func(*oauthclientPager) error

// WithOauthClientOrder configures pagination ordering.
func WithOauthClientOrder(order *OauthClientOrder) OauthClientPaginateOption {
	if order == nil {
		order = DefaultOauthClientOrder
	}
	o := *order
	return func(pager *oauthclientPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOauthClientOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOauthClientFilter configures pagination filter.
func WithOauthClientFilter(filter func(*OauthClientQuery) (*OauthClientQuery, error)) OauthClientPaginateOption {
	return func(pager *oauthclientPager) error {
		if filter == nil {
			return errors.New("OauthClientQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthclientPager struct {
	reverse bool
	order   *OauthClientOrder
	filter  func(*OauthClientQuery) (*OauthClientQuery, error)
}

func newOauthClientPager(opts []OauthClientPaginateOption, reverse bool) (*oauthclientPager, error) {
	pager := &oauthclientPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOauthClientOrder
	}
	return pager, nil
}

func (p *oauthclientPager) applyFilter(query *OauthClientQuery) (*OauthClientQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthclientPager) toCursor(oc *OauthClient) Cursor {
	return p.order.Field.toCursor(oc)
}

func (p *oauthclientPager) applyCursors(query *OauthClientQuery, after, before *Cursor) (*OauthClientQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOauthClientOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *oauthclientPager) applyOrder(query *OauthClientQuery) *OauthClientQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOauthClientOrder.Field {
		query = query.Order(DefaultOauthClientOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *oauthclientPager) orderExpr(query *OauthClientQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOauthClientOrder.Field {
			b.Comma().Ident(DefaultOauthClientOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OauthClient.
func (oc *OauthClientQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OauthClientPaginateOption,
) (*OauthClientConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOauthClientPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if oc, err = pager.applyFilter(oc); err != nil {
		return nil, err
	}
	conn := &OauthClientConnection{Edges: []*OauthClientEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := oc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if oc, err = pager.applyCursors(oc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		oc.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			oc.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			oc.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	oc = pager.applyOrder(oc)
	nodes, err := oc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OauthClientOrderFieldCreatedAt orders OauthClient by created_at.
	OauthClientOrderFieldCreatedAt = &OauthClientOrderField{
		Value: func(oc *OauthClient) (ent.Value, error) {
			return oc.CreatedAt, nil
		},
		column: oauthclient.FieldCreatedAt,
		toTerm: oauthclient.ByCreatedAt,
		toCursor: func(oc *OauthClient) Cursor {
			return Cursor{
				ID:    oc.ID,
				Value: oc.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OauthClientOrderField) String() string {
	var str string
	switch f.column {
	case OauthClientOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OauthClientOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OauthClientOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OauthClientOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OauthClientOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid OauthClientOrderField", str)
	}
	return nil
}

// OauthClientOrderField defines the ordering field of OauthClient.
type OauthClientOrderField struct {
	// Value extracts the ordering value from the given OauthClient.
	Value    func(*OauthClient) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) oauthclient.OrderOption
	toCursor func(*OauthClient) Cursor
}

// OauthClientOrder defines the ordering of OauthClient.
type OauthClientOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *OauthClientOrderField `json:"field"`
}

// DefaultOauthClientOrder is the default ordering of OauthClient.
var DefaultOauthClientOrder = &OauthClientOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OauthClientOrderField{
		Value: func(oc *OauthClient) (ent.Value, error) {
			return oc.ID, nil
		},
		column: oauthclient.FieldID,
		toTerm: oauthclient.ByID,
		toCursor: func(oc *OauthClient) Cursor {
			return Cursor{ID: oc.ID}
		},
	},
}

// ToEdge converts OauthClient into OauthClientEdge.
func (oc *OauthClient) ToEdge(order *OauthClientOrder) *OauthClientEdge {
	if order == nil {
		order = DefaultOauthClientOrder
	}
	return &OauthClientEdge{
		Node:   oc,
		Cursor: order.Field.toCursor(oc),
	}
}

// OrgEdge is the edge representation of Org.
type OrgEdge struct {
	Node   *Org   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// OrgConnection is the connection containing edges to Org.
type OrgConnection struct {
	Edges      []*OrgEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *OrgConnection) build(nodes []*Org, pager *orgPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Org
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Org {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Org {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrgEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrgEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrgPaginateOption enables pagination customization.
type OrgPaginateOption func(*orgPager) error

// WithOrgOrder configures pagination ordering.
func WithOrgOrder(order *OrgOrder) OrgPaginateOption {
	if order == nil {
		order = DefaultOrgOrder
	}
	o := *order
	return func(pager *orgPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrgOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrgFilter configures pagination filter.
func WithOrgFilter(filter func(*OrgQuery) (*OrgQuery, error)) OrgPaginateOption {
	return func(pager *orgPager) error {
		if filter == nil {
			return errors.New("OrgQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type orgPager struct {
	reverse bool
	order   *OrgOrder
	filter  func(*OrgQuery) (*OrgQuery, error)
}

func newOrgPager(opts []OrgPaginateOption, reverse bool) (*orgPager, error) {
	pager := &orgPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrgOrder
	}
	return pager, nil
}

func (p *orgPager) applyFilter(query *OrgQuery) (*OrgQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *orgPager) toCursor(o *Org) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *orgPager) applyCursors(query *OrgQuery, after, before *Cursor) (*OrgQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOrgOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *orgPager) applyOrder(query *OrgQuery) *OrgQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOrgOrder.Field {
		query = query.Order(DefaultOrgOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *orgPager) orderExpr(query *OrgQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrgOrder.Field {
			b.Comma().Ident(DefaultOrgOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Org.
func (o *OrgQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrgPaginateOption,
) (*OrgConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrgPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OrgConnection{Edges: []*OrgEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := o.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if o, err = pager.applyCursors(o, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		o.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			o.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			o.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	o = pager.applyOrder(o)
	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OrgOrderFieldCreatedAt orders Org by created_at.
	OrgOrderFieldCreatedAt = &OrgOrderField{
		Value: func(o *Org) (ent.Value, error) {
			return o.CreatedAt, nil
		},
		column: org.FieldCreatedAt,
		toTerm: org.ByCreatedAt,
		toCursor: func(o *Org) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.CreatedAt,
			}
		},
	}
	// OrgOrderFieldDisplaySort orders Org by display_sort.
	OrgOrderFieldDisplaySort = &OrgOrderField{
		Value: func(o *Org) (ent.Value, error) {
			return o.DisplaySort, nil
		},
		column: org.FieldDisplaySort,
		toTerm: org.ByDisplaySort,
		toCursor: func(o *Org) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.DisplaySort,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrgOrderField) String() string {
	var str string
	switch f.column {
	case OrgOrderFieldCreatedAt.column:
		str = "createdAt"
	case OrgOrderFieldDisplaySort.column:
		str = "displaySort"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrgOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrgOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrgOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OrgOrderFieldCreatedAt
	case "displaySort":
		*f = *OrgOrderFieldDisplaySort
	default:
		return fmt.Errorf("%s is not a valid OrgOrderField", str)
	}
	return nil
}

// OrgOrderField defines the ordering field of Org.
type OrgOrderField struct {
	// Value extracts the ordering value from the given Org.
	Value    func(*Org) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) org.OrderOption
	toCursor func(*Org) Cursor
}

// OrgOrder defines the ordering of Org.
type OrgOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *OrgOrderField `json:"field"`
}

// DefaultOrgOrder is the default ordering of Org.
var DefaultOrgOrder = &OrgOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OrgOrderField{
		Value: func(o *Org) (ent.Value, error) {
			return o.ID, nil
		},
		column: org.FieldID,
		toTerm: org.ByID,
		toCursor: func(o *Org) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Org into OrgEdge.
func (o *Org) ToEdge(order *OrgOrder) *OrgEdge {
	if order == nil {
		order = DefaultOrgOrder
	}
	return &OrgEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// OrgPolicyEdge is the edge representation of OrgPolicy.
type OrgPolicyEdge struct {
	Node   *OrgPolicy `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// OrgPolicyConnection is the connection containing edges to OrgPolicy.
type OrgPolicyConnection struct {
	Edges      []*OrgPolicyEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *OrgPolicyConnection) build(nodes []*OrgPolicy, pager *orgpolicyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OrgPolicy
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrgPolicy {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrgPolicy {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrgPolicyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrgPolicyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrgPolicyPaginateOption enables pagination customization.
type OrgPolicyPaginateOption func(*orgpolicyPager) error

// WithOrgPolicyOrder configures pagination ordering.
func WithOrgPolicyOrder(order *OrgPolicyOrder) OrgPolicyPaginateOption {
	if order == nil {
		order = DefaultOrgPolicyOrder
	}
	o := *order
	return func(pager *orgpolicyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrgPolicyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrgPolicyFilter configures pagination filter.
func WithOrgPolicyFilter(filter func(*OrgPolicyQuery) (*OrgPolicyQuery, error)) OrgPolicyPaginateOption {
	return func(pager *orgpolicyPager) error {
		if filter == nil {
			return errors.New("OrgPolicyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type orgpolicyPager struct {
	reverse bool
	order   *OrgPolicyOrder
	filter  func(*OrgPolicyQuery) (*OrgPolicyQuery, error)
}

func newOrgPolicyPager(opts []OrgPolicyPaginateOption, reverse bool) (*orgpolicyPager, error) {
	pager := &orgpolicyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrgPolicyOrder
	}
	return pager, nil
}

func (p *orgpolicyPager) applyFilter(query *OrgPolicyQuery) (*OrgPolicyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *orgpolicyPager) toCursor(op *OrgPolicy) Cursor {
	return p.order.Field.toCursor(op)
}

func (p *orgpolicyPager) applyCursors(query *OrgPolicyQuery, after, before *Cursor) (*OrgPolicyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOrgPolicyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *orgpolicyPager) applyOrder(query *OrgPolicyQuery) *OrgPolicyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOrgPolicyOrder.Field {
		query = query.Order(DefaultOrgPolicyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *orgpolicyPager) orderExpr(query *OrgPolicyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrgPolicyOrder.Field {
			b.Comma().Ident(DefaultOrgPolicyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OrgPolicy.
func (op *OrgPolicyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrgPolicyPaginateOption,
) (*OrgPolicyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrgPolicyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if op, err = pager.applyFilter(op); err != nil {
		return nil, err
	}
	conn := &OrgPolicyConnection{Edges: []*OrgPolicyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := op.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if op, err = pager.applyCursors(op, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		op.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			op.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			op.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := op.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	op = pager.applyOrder(op)
	nodes, err := op.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OrgPolicyOrderFieldCreatedAt orders OrgPolicy by created_at.
	OrgPolicyOrderFieldCreatedAt = &OrgPolicyOrderField{
		Value: func(op *OrgPolicy) (ent.Value, error) {
			return op.CreatedAt, nil
		},
		column: orgpolicy.FieldCreatedAt,
		toTerm: orgpolicy.ByCreatedAt,
		toCursor: func(op *OrgPolicy) Cursor {
			return Cursor{
				ID:    op.ID,
				Value: op.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrgPolicyOrderField) String() string {
	var str string
	switch f.column {
	case OrgPolicyOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrgPolicyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrgPolicyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrgPolicyOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OrgPolicyOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid OrgPolicyOrderField", str)
	}
	return nil
}

// OrgPolicyOrderField defines the ordering field of OrgPolicy.
type OrgPolicyOrderField struct {
	// Value extracts the ordering value from the given OrgPolicy.
	Value    func(*OrgPolicy) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) orgpolicy.OrderOption
	toCursor func(*OrgPolicy) Cursor
}

// OrgPolicyOrder defines the ordering of OrgPolicy.
type OrgPolicyOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *OrgPolicyOrderField `json:"field"`
}

// DefaultOrgPolicyOrder is the default ordering of OrgPolicy.
var DefaultOrgPolicyOrder = &OrgPolicyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OrgPolicyOrderField{
		Value: func(op *OrgPolicy) (ent.Value, error) {
			return op.ID, nil
		},
		column: orgpolicy.FieldID,
		toTerm: orgpolicy.ByID,
		toCursor: func(op *OrgPolicy) Cursor {
			return Cursor{ID: op.ID}
		},
	},
}

// ToEdge converts OrgPolicy into OrgPolicyEdge.
func (op *OrgPolicy) ToEdge(order *OrgPolicyOrder) *OrgPolicyEdge {
	if order == nil {
		order = DefaultOrgPolicyOrder
	}
	return &OrgPolicyEdge{
		Node:   op,
		Cursor: order.Field.toCursor(op),
	}
}

// OrgRoleEdge is the edge representation of OrgRole.
type OrgRoleEdge struct {
	Node   *OrgRole `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// OrgRoleConnection is the connection containing edges to OrgRole.
type OrgRoleConnection struct {
	Edges      []*OrgRoleEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *OrgRoleConnection) build(nodes []*OrgRole, pager *orgrolePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OrgRole
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrgRole {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrgRole {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrgRoleEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrgRoleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrgRolePaginateOption enables pagination customization.
type OrgRolePaginateOption func(*orgrolePager) error

// WithOrgRoleOrder configures pagination ordering.
func WithOrgRoleOrder(order *OrgRoleOrder) OrgRolePaginateOption {
	if order == nil {
		order = DefaultOrgRoleOrder
	}
	o := *order
	return func(pager *orgrolePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrgRoleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrgRoleFilter configures pagination filter.
func WithOrgRoleFilter(filter func(*OrgRoleQuery) (*OrgRoleQuery, error)) OrgRolePaginateOption {
	return func(pager *orgrolePager) error {
		if filter == nil {
			return errors.New("OrgRoleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type orgrolePager struct {
	reverse bool
	order   *OrgRoleOrder
	filter  func(*OrgRoleQuery) (*OrgRoleQuery, error)
}

func newOrgRolePager(opts []OrgRolePaginateOption, reverse bool) (*orgrolePager, error) {
	pager := &orgrolePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrgRoleOrder
	}
	return pager, nil
}

func (p *orgrolePager) applyFilter(query *OrgRoleQuery) (*OrgRoleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *orgrolePager) toCursor(or *OrgRole) Cursor {
	return p.order.Field.toCursor(or)
}

func (p *orgrolePager) applyCursors(query *OrgRoleQuery, after, before *Cursor) (*OrgRoleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOrgRoleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *orgrolePager) applyOrder(query *OrgRoleQuery) *OrgRoleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOrgRoleOrder.Field {
		query = query.Order(DefaultOrgRoleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *orgrolePager) orderExpr(query *OrgRoleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrgRoleOrder.Field {
			b.Comma().Ident(DefaultOrgRoleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OrgRole.
func (or *OrgRoleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrgRolePaginateOption,
) (*OrgRoleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrgRolePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if or, err = pager.applyFilter(or); err != nil {
		return nil, err
	}
	conn := &OrgRoleConnection{Edges: []*OrgRoleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := or.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if or, err = pager.applyCursors(or, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		or.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			or.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			or.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := or.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	or = pager.applyOrder(or)
	nodes, err := or.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OrgRoleOrderFieldCreatedAt orders OrgRole by created_at.
	OrgRoleOrderFieldCreatedAt = &OrgRoleOrderField{
		Value: func(or *OrgRole) (ent.Value, error) {
			return or.CreatedAt, nil
		},
		column: orgrole.FieldCreatedAt,
		toTerm: orgrole.ByCreatedAt,
		toCursor: func(or *OrgRole) Cursor {
			return Cursor{
				ID:    or.ID,
				Value: or.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrgRoleOrderField) String() string {
	var str string
	switch f.column {
	case OrgRoleOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrgRoleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrgRoleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrgRoleOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OrgRoleOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid OrgRoleOrderField", str)
	}
	return nil
}

// OrgRoleOrderField defines the ordering field of OrgRole.
type OrgRoleOrderField struct {
	// Value extracts the ordering value from the given OrgRole.
	Value    func(*OrgRole) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) orgrole.OrderOption
	toCursor func(*OrgRole) Cursor
}

// OrgRoleOrder defines the ordering of OrgRole.
type OrgRoleOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *OrgRoleOrderField `json:"field"`
}

// DefaultOrgRoleOrder is the default ordering of OrgRole.
var DefaultOrgRoleOrder = &OrgRoleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OrgRoleOrderField{
		Value: func(or *OrgRole) (ent.Value, error) {
			return or.ID, nil
		},
		column: orgrole.FieldID,
		toTerm: orgrole.ByID,
		toCursor: func(or *OrgRole) Cursor {
			return Cursor{ID: or.ID}
		},
	},
}

// ToEdge converts OrgRole into OrgRoleEdge.
func (or *OrgRole) ToEdge(order *OrgRoleOrder) *OrgRoleEdge {
	if order == nil {
		order = DefaultOrgRoleOrder
	}
	return &OrgRoleEdge{
		Node:   or,
		Cursor: order.Field.toCursor(or),
	}
}

// OrgUserPreferenceEdge is the edge representation of OrgUserPreference.
type OrgUserPreferenceEdge struct {
	Node   *OrgUserPreference `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// OrgUserPreferenceConnection is the connection containing edges to OrgUserPreference.
type OrgUserPreferenceConnection struct {
	Edges      []*OrgUserPreferenceEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *OrgUserPreferenceConnection) build(nodes []*OrgUserPreference, pager *orguserpreferencePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OrgUserPreference
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OrgUserPreference {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OrgUserPreference {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrgUserPreferenceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrgUserPreferenceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrgUserPreferencePaginateOption enables pagination customization.
type OrgUserPreferencePaginateOption func(*orguserpreferencePager) error

// WithOrgUserPreferenceOrder configures pagination ordering.
func WithOrgUserPreferenceOrder(order *OrgUserPreferenceOrder) OrgUserPreferencePaginateOption {
	if order == nil {
		order = DefaultOrgUserPreferenceOrder
	}
	o := *order
	return func(pager *orguserpreferencePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrgUserPreferenceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrgUserPreferenceFilter configures pagination filter.
func WithOrgUserPreferenceFilter(filter func(*OrgUserPreferenceQuery) (*OrgUserPreferenceQuery, error)) OrgUserPreferencePaginateOption {
	return func(pager *orguserpreferencePager) error {
		if filter == nil {
			return errors.New("OrgUserPreferenceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type orguserpreferencePager struct {
	reverse bool
	order   *OrgUserPreferenceOrder
	filter  func(*OrgUserPreferenceQuery) (*OrgUserPreferenceQuery, error)
}

func newOrgUserPreferencePager(opts []OrgUserPreferencePaginateOption, reverse bool) (*orguserpreferencePager, error) {
	pager := &orguserpreferencePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrgUserPreferenceOrder
	}
	return pager, nil
}

func (p *orguserpreferencePager) applyFilter(query *OrgUserPreferenceQuery) (*OrgUserPreferenceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *orguserpreferencePager) toCursor(oup *OrgUserPreference) Cursor {
	return p.order.Field.toCursor(oup)
}

func (p *orguserpreferencePager) applyCursors(query *OrgUserPreferenceQuery, after, before *Cursor) (*OrgUserPreferenceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOrgUserPreferenceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *orguserpreferencePager) applyOrder(query *OrgUserPreferenceQuery) *OrgUserPreferenceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOrgUserPreferenceOrder.Field {
		query = query.Order(DefaultOrgUserPreferenceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *orguserpreferencePager) orderExpr(query *OrgUserPreferenceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrgUserPreferenceOrder.Field {
			b.Comma().Ident(DefaultOrgUserPreferenceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OrgUserPreference.
func (oup *OrgUserPreferenceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrgUserPreferencePaginateOption,
) (*OrgUserPreferenceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrgUserPreferencePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if oup, err = pager.applyFilter(oup); err != nil {
		return nil, err
	}
	conn := &OrgUserPreferenceConnection{Edges: []*OrgUserPreferenceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := oup.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if oup, err = pager.applyCursors(oup, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		oup.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			oup.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			oup.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oup.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	oup = pager.applyOrder(oup)
	nodes, err := oup.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OrgUserPreferenceOrderFieldCreatedAt orders OrgUserPreference by created_at.
	OrgUserPreferenceOrderFieldCreatedAt = &OrgUserPreferenceOrderField{
		Value: func(oup *OrgUserPreference) (ent.Value, error) {
			return oup.CreatedAt, nil
		},
		column: orguserpreference.FieldCreatedAt,
		toTerm: orguserpreference.ByCreatedAt,
		toCursor: func(oup *OrgUserPreference) Cursor {
			return Cursor{
				ID:    oup.ID,
				Value: oup.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrgUserPreferenceOrderField) String() string {
	var str string
	switch f.column {
	case OrgUserPreferenceOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrgUserPreferenceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrgUserPreferenceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrgUserPreferenceOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OrgUserPreferenceOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid OrgUserPreferenceOrderField", str)
	}
	return nil
}

// OrgUserPreferenceOrderField defines the ordering field of OrgUserPreference.
type OrgUserPreferenceOrderField struct {
	// Value extracts the ordering value from the given OrgUserPreference.
	Value    func(*OrgUserPreference) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) orguserpreference.OrderOption
	toCursor func(*OrgUserPreference) Cursor
}

// OrgUserPreferenceOrder defines the ordering of OrgUserPreference.
type OrgUserPreferenceOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *OrgUserPreferenceOrderField `json:"field"`
}

// DefaultOrgUserPreferenceOrder is the default ordering of OrgUserPreference.
var DefaultOrgUserPreferenceOrder = &OrgUserPreferenceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OrgUserPreferenceOrderField{
		Value: func(oup *OrgUserPreference) (ent.Value, error) {
			return oup.ID, nil
		},
		column: orguserpreference.FieldID,
		toTerm: orguserpreference.ByID,
		toCursor: func(oup *OrgUserPreference) Cursor {
			return Cursor{ID: oup.ID}
		},
	},
}

// ToEdge converts OrgUserPreference into OrgUserPreferenceEdge.
func (oup *OrgUserPreference) ToEdge(order *OrgUserPreferenceOrder) *OrgUserPreferenceEdge {
	if order == nil {
		order = DefaultOrgUserPreferenceOrder
	}
	return &OrgUserPreferenceEdge{
		Node:   oup,
		Cursor: order.Field.toCursor(oup),
	}
}

// PermissionEdge is the edge representation of Permission.
type PermissionEdge struct {
	Node   *Permission `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// PermissionConnection is the connection containing edges to Permission.
type PermissionConnection struct {
	Edges      []*PermissionEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *PermissionConnection) build(nodes []*Permission, pager *permissionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Permission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Permission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Permission {
			return nodes[i]
		}
	}
	c.Edges = make([]*PermissionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PermissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PermissionPaginateOption enables pagination customization.
type PermissionPaginateOption func(*permissionPager) error

// WithPermissionOrder configures pagination ordering.
func WithPermissionOrder(order *PermissionOrder) PermissionPaginateOption {
	if order == nil {
		order = DefaultPermissionOrder
	}
	o := *order
	return func(pager *permissionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPermissionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPermissionFilter configures pagination filter.
func WithPermissionFilter(filter func(*PermissionQuery) (*PermissionQuery, error)) PermissionPaginateOption {
	return func(pager *permissionPager) error {
		if filter == nil {
			return errors.New("PermissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type permissionPager struct {
	reverse bool
	order   *PermissionOrder
	filter  func(*PermissionQuery) (*PermissionQuery, error)
}

func newPermissionPager(opts []PermissionPaginateOption, reverse bool) (*permissionPager, error) {
	pager := &permissionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPermissionOrder
	}
	return pager, nil
}

func (p *permissionPager) applyFilter(query *PermissionQuery) (*PermissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *permissionPager) toCursor(pe *Permission) Cursor {
	return p.order.Field.toCursor(pe)
}

func (p *permissionPager) applyCursors(query *PermissionQuery, after, before *Cursor) (*PermissionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPermissionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *permissionPager) applyOrder(query *PermissionQuery) *PermissionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPermissionOrder.Field {
		query = query.Order(DefaultPermissionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *permissionPager) orderExpr(query *PermissionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPermissionOrder.Field {
			b.Comma().Ident(DefaultPermissionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Permission.
func (pe *PermissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PermissionPaginateOption,
) (*PermissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPermissionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pe, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PermissionConnection{Edges: []*PermissionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pe, err = pager.applyCursors(pe, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pe.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			pe.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			pe.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pe = pager.applyOrder(pe)
	nodes, err := pe.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PermissionOrderFieldCreatedAt orders Permission by created_at.
	PermissionOrderFieldCreatedAt = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.CreatedAt, nil
		},
		column: permission.FieldCreatedAt,
		toTerm: permission.ByCreatedAt,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PermissionOrderField) String() string {
	var str string
	switch f.column {
	case PermissionOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PermissionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PermissionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PermissionOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *PermissionOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PermissionOrderField", str)
	}
	return nil
}

// PermissionOrderField defines the ordering field of Permission.
type PermissionOrderField struct {
	// Value extracts the ordering value from the given Permission.
	Value    func(*Permission) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) permission.OrderOption
	toCursor func(*Permission) Cursor
}

// PermissionOrder defines the ordering of Permission.
type PermissionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *PermissionOrderField `json:"field"`
}

// DefaultPermissionOrder is the default ordering of Permission.
var DefaultPermissionOrder = &PermissionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.ID, nil
		},
		column: permission.FieldID,
		toTerm: permission.ByID,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{ID: pe.ID}
		},
	},
}

// ToEdge converts Permission into PermissionEdge.
func (pe *Permission) ToEdge(order *PermissionOrder) *PermissionEdge {
	if order == nil {
		order = DefaultPermissionOrder
	}
	return &PermissionEdge{
		Node:   pe,
		Cursor: order.Field.toCursor(pe),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			u.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			u.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserDeviceEdge is the edge representation of UserDevice.
type UserDeviceEdge struct {
	Node   *UserDevice `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// UserDeviceConnection is the connection containing edges to UserDevice.
type UserDeviceConnection struct {
	Edges      []*UserDeviceEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *UserDeviceConnection) build(nodes []*UserDevice, pager *userdevicePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserDevice
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserDevice {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserDevice {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserDeviceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserDeviceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserDevicePaginateOption enables pagination customization.
type UserDevicePaginateOption func(*userdevicePager) error

// WithUserDeviceOrder configures pagination ordering.
func WithUserDeviceOrder(order *UserDeviceOrder) UserDevicePaginateOption {
	if order == nil {
		order = DefaultUserDeviceOrder
	}
	o := *order
	return func(pager *userdevicePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserDeviceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserDeviceFilter configures pagination filter.
func WithUserDeviceFilter(filter func(*UserDeviceQuery) (*UserDeviceQuery, error)) UserDevicePaginateOption {
	return func(pager *userdevicePager) error {
		if filter == nil {
			return errors.New("UserDeviceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userdevicePager struct {
	reverse bool
	order   *UserDeviceOrder
	filter  func(*UserDeviceQuery) (*UserDeviceQuery, error)
}

func newUserDevicePager(opts []UserDevicePaginateOption, reverse bool) (*userdevicePager, error) {
	pager := &userdevicePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserDeviceOrder
	}
	return pager, nil
}

func (p *userdevicePager) applyFilter(query *UserDeviceQuery) (*UserDeviceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userdevicePager) toCursor(ud *UserDevice) Cursor {
	return p.order.Field.toCursor(ud)
}

func (p *userdevicePager) applyCursors(query *UserDeviceQuery, after, before *Cursor) (*UserDeviceQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserDeviceOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userdevicePager) applyOrder(query *UserDeviceQuery) *UserDeviceQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserDeviceOrder.Field {
		query = query.Order(DefaultUserDeviceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userdevicePager) orderExpr(query *UserDeviceQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserDeviceOrder.Field {
			b.Comma().Ident(DefaultUserDeviceOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserDevice.
func (ud *UserDeviceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserDevicePaginateOption,
) (*UserDeviceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserDevicePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ud, err = pager.applyFilter(ud); err != nil {
		return nil, err
	}
	conn := &UserDeviceConnection{Edges: []*UserDeviceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ud.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ud, err = pager.applyCursors(ud, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ud.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			ud.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			ud.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ud.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ud = pager.applyOrder(ud)
	nodes, err := ud.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserDeviceOrderFieldCreatedAt orders UserDevice by created_at.
	UserDeviceOrderFieldCreatedAt = &UserDeviceOrderField{
		Value: func(ud *UserDevice) (ent.Value, error) {
			return ud.CreatedAt, nil
		},
		column: userdevice.FieldCreatedAt,
		toTerm: userdevice.ByCreatedAt,
		toCursor: func(ud *UserDevice) Cursor {
			return Cursor{
				ID:    ud.ID,
				Value: ud.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserDeviceOrderField) String() string {
	var str string
	switch f.column {
	case UserDeviceOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserDeviceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserDeviceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserDeviceOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserDeviceOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserDeviceOrderField", str)
	}
	return nil
}

// UserDeviceOrderField defines the ordering field of UserDevice.
type UserDeviceOrderField struct {
	// Value extracts the ordering value from the given UserDevice.
	Value    func(*UserDevice) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) userdevice.OrderOption
	toCursor func(*UserDevice) Cursor
}

// UserDeviceOrder defines the ordering of UserDevice.
type UserDeviceOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *UserDeviceOrderField `json:"field"`
}

// DefaultUserDeviceOrder is the default ordering of UserDevice.
var DefaultUserDeviceOrder = &UserDeviceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserDeviceOrderField{
		Value: func(ud *UserDevice) (ent.Value, error) {
			return ud.ID, nil
		},
		column: userdevice.FieldID,
		toTerm: userdevice.ByID,
		toCursor: func(ud *UserDevice) Cursor {
			return Cursor{ID: ud.ID}
		},
	},
}

// ToEdge converts UserDevice into UserDeviceEdge.
func (ud *UserDevice) ToEdge(order *UserDeviceOrder) *UserDeviceEdge {
	if order == nil {
		order = DefaultUserDeviceOrder
	}
	return &UserDeviceEdge{
		Node:   ud,
		Cursor: order.Field.toCursor(ud),
	}
}

// UserIdentityEdge is the edge representation of UserIdentity.
type UserIdentityEdge struct {
	Node   *UserIdentity `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// UserIdentityConnection is the connection containing edges to UserIdentity.
type UserIdentityConnection struct {
	Edges      []*UserIdentityEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *UserIdentityConnection) build(nodes []*UserIdentity, pager *useridentityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserIdentity
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserIdentity {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserIdentity {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserIdentityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserIdentityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserIdentityPaginateOption enables pagination customization.
type UserIdentityPaginateOption func(*useridentityPager) error

// WithUserIdentityOrder configures pagination ordering.
func WithUserIdentityOrder(order *UserIdentityOrder) UserIdentityPaginateOption {
	if order == nil {
		order = DefaultUserIdentityOrder
	}
	o := *order
	return func(pager *useridentityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserIdentityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserIdentityFilter configures pagination filter.
func WithUserIdentityFilter(filter func(*UserIdentityQuery) (*UserIdentityQuery, error)) UserIdentityPaginateOption {
	return func(pager *useridentityPager) error {
		if filter == nil {
			return errors.New("UserIdentityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type useridentityPager struct {
	reverse bool
	order   *UserIdentityOrder
	filter  func(*UserIdentityQuery) (*UserIdentityQuery, error)
}

func newUserIdentityPager(opts []UserIdentityPaginateOption, reverse bool) (*useridentityPager, error) {
	pager := &useridentityPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserIdentityOrder
	}
	return pager, nil
}

func (p *useridentityPager) applyFilter(query *UserIdentityQuery) (*UserIdentityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *useridentityPager) toCursor(ui *UserIdentity) Cursor {
	return p.order.Field.toCursor(ui)
}

func (p *useridentityPager) applyCursors(query *UserIdentityQuery, after, before *Cursor) (*UserIdentityQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserIdentityOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *useridentityPager) applyOrder(query *UserIdentityQuery) *UserIdentityQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserIdentityOrder.Field {
		query = query.Order(DefaultUserIdentityOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *useridentityPager) orderExpr(query *UserIdentityQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserIdentityOrder.Field {
			b.Comma().Ident(DefaultUserIdentityOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserIdentity.
func (ui *UserIdentityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserIdentityPaginateOption,
) (*UserIdentityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserIdentityPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ui, err = pager.applyFilter(ui); err != nil {
		return nil, err
	}
	conn := &UserIdentityConnection{Edges: []*UserIdentityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ui.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ui, err = pager.applyCursors(ui, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ui.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			ui.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			ui.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ui.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ui = pager.applyOrder(ui)
	nodes, err := ui.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserIdentityOrderFieldCreatedAt orders UserIdentity by created_at.
	UserIdentityOrderFieldCreatedAt = &UserIdentityOrderField{
		Value: func(ui *UserIdentity) (ent.Value, error) {
			return ui.CreatedAt, nil
		},
		column: useridentity.FieldCreatedAt,
		toTerm: useridentity.ByCreatedAt,
		toCursor: func(ui *UserIdentity) Cursor {
			return Cursor{
				ID:    ui.ID,
				Value: ui.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserIdentityOrderField) String() string {
	var str string
	switch f.column {
	case UserIdentityOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserIdentityOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserIdentityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserIdentityOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserIdentityOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserIdentityOrderField", str)
	}
	return nil
}

// UserIdentityOrderField defines the ordering field of UserIdentity.
type UserIdentityOrderField struct {
	// Value extracts the ordering value from the given UserIdentity.
	Value    func(*UserIdentity) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) useridentity.OrderOption
	toCursor func(*UserIdentity) Cursor
}

// UserIdentityOrder defines the ordering of UserIdentity.
type UserIdentityOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *UserIdentityOrderField `json:"field"`
}

// DefaultUserIdentityOrder is the default ordering of UserIdentity.
var DefaultUserIdentityOrder = &UserIdentityOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserIdentityOrderField{
		Value: func(ui *UserIdentity) (ent.Value, error) {
			return ui.ID, nil
		},
		column: useridentity.FieldID,
		toTerm: useridentity.ByID,
		toCursor: func(ui *UserIdentity) Cursor {
			return Cursor{ID: ui.ID}
		},
	},
}

// ToEdge converts UserIdentity into UserIdentityEdge.
func (ui *UserIdentity) ToEdge(order *UserIdentityOrder) *UserIdentityEdge {
	if order == nil {
		order = DefaultUserIdentityOrder
	}
	return &UserIdentityEdge{
		Node:   ui,
		Cursor: order.Field.toCursor(ui),
	}
}

// UserLoginProfileEdge is the edge representation of UserLoginProfile.
type UserLoginProfileEdge struct {
	Node   *UserLoginProfile `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// UserLoginProfileConnection is the connection containing edges to UserLoginProfile.
type UserLoginProfileConnection struct {
	Edges      []*UserLoginProfileEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *UserLoginProfileConnection) build(nodes []*UserLoginProfile, pager *userloginprofilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserLoginProfile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserLoginProfile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserLoginProfile {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserLoginProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserLoginProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserLoginProfilePaginateOption enables pagination customization.
type UserLoginProfilePaginateOption func(*userloginprofilePager) error

// WithUserLoginProfileOrder configures pagination ordering.
func WithUserLoginProfileOrder(order *UserLoginProfileOrder) UserLoginProfilePaginateOption {
	if order == nil {
		order = DefaultUserLoginProfileOrder
	}
	o := *order
	return func(pager *userloginprofilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserLoginProfileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserLoginProfileFilter configures pagination filter.
func WithUserLoginProfileFilter(filter func(*UserLoginProfileQuery) (*UserLoginProfileQuery, error)) UserLoginProfilePaginateOption {
	return func(pager *userloginprofilePager) error {
		if filter == nil {
			return errors.New("UserLoginProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userloginprofilePager struct {
	reverse bool
	order   *UserLoginProfileOrder
	filter  func(*UserLoginProfileQuery) (*UserLoginProfileQuery, error)
}

func newUserLoginProfilePager(opts []UserLoginProfilePaginateOption, reverse bool) (*userloginprofilePager, error) {
	pager := &userloginprofilePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserLoginProfileOrder
	}
	return pager, nil
}

func (p *userloginprofilePager) applyFilter(query *UserLoginProfileQuery) (*UserLoginProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userloginprofilePager) toCursor(ulp *UserLoginProfile) Cursor {
	return p.order.Field.toCursor(ulp)
}

func (p *userloginprofilePager) applyCursors(query *UserLoginProfileQuery, after, before *Cursor) (*UserLoginProfileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserLoginProfileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userloginprofilePager) applyOrder(query *UserLoginProfileQuery) *UserLoginProfileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserLoginProfileOrder.Field {
		query = query.Order(DefaultUserLoginProfileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userloginprofilePager) orderExpr(query *UserLoginProfileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserLoginProfileOrder.Field {
			b.Comma().Ident(DefaultUserLoginProfileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserLoginProfile.
func (ulp *UserLoginProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserLoginProfilePaginateOption,
) (*UserLoginProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserLoginProfilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ulp, err = pager.applyFilter(ulp); err != nil {
		return nil, err
	}
	conn := &UserLoginProfileConnection{Edges: []*UserLoginProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ulp.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ulp, err = pager.applyCursors(ulp, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ulp.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			ulp.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			ulp.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ulp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ulp = pager.applyOrder(ulp)
	nodes, err := ulp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserLoginProfileOrderFieldCreatedAt orders UserLoginProfile by created_at.
	UserLoginProfileOrderFieldCreatedAt = &UserLoginProfileOrderField{
		Value: func(ulp *UserLoginProfile) (ent.Value, error) {
			return ulp.CreatedAt, nil
		},
		column: userloginprofile.FieldCreatedAt,
		toTerm: userloginprofile.ByCreatedAt,
		toCursor: func(ulp *UserLoginProfile) Cursor {
			return Cursor{
				ID:    ulp.ID,
				Value: ulp.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserLoginProfileOrderField) String() string {
	var str string
	switch f.column {
	case UserLoginProfileOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserLoginProfileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserLoginProfileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserLoginProfileOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserLoginProfileOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserLoginProfileOrderField", str)
	}
	return nil
}

// UserLoginProfileOrderField defines the ordering field of UserLoginProfile.
type UserLoginProfileOrderField struct {
	// Value extracts the ordering value from the given UserLoginProfile.
	Value    func(*UserLoginProfile) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) userloginprofile.OrderOption
	toCursor func(*UserLoginProfile) Cursor
}

// UserLoginProfileOrder defines the ordering of UserLoginProfile.
type UserLoginProfileOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *UserLoginProfileOrderField `json:"field"`
}

// DefaultUserLoginProfileOrder is the default ordering of UserLoginProfile.
var DefaultUserLoginProfileOrder = &UserLoginProfileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserLoginProfileOrderField{
		Value: func(ulp *UserLoginProfile) (ent.Value, error) {
			return ulp.ID, nil
		},
		column: userloginprofile.FieldID,
		toTerm: userloginprofile.ByID,
		toCursor: func(ulp *UserLoginProfile) Cursor {
			return Cursor{ID: ulp.ID}
		},
	},
}

// ToEdge converts UserLoginProfile into UserLoginProfileEdge.
func (ulp *UserLoginProfile) ToEdge(order *UserLoginProfileOrder) *UserLoginProfileEdge {
	if order == nil {
		order = DefaultUserLoginProfileOrder
	}
	return &UserLoginProfileEdge{
		Node:   ulp,
		Cursor: order.Field.toCursor(ulp),
	}
}

// UserPasswordEdge is the edge representation of UserPassword.
type UserPasswordEdge struct {
	Node   *UserPassword `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// UserPasswordConnection is the connection containing edges to UserPassword.
type UserPasswordConnection struct {
	Edges      []*UserPasswordEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *UserPasswordConnection) build(nodes []*UserPassword, pager *userpasswordPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserPassword
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserPassword {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserPassword {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserPasswordEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserPasswordEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPasswordPaginateOption enables pagination customization.
type UserPasswordPaginateOption func(*userpasswordPager) error

// WithUserPasswordOrder configures pagination ordering.
func WithUserPasswordOrder(order *UserPasswordOrder) UserPasswordPaginateOption {
	if order == nil {
		order = DefaultUserPasswordOrder
	}
	o := *order
	return func(pager *userpasswordPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserPasswordOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserPasswordFilter configures pagination filter.
func WithUserPasswordFilter(filter func(*UserPasswordQuery) (*UserPasswordQuery, error)) UserPasswordPaginateOption {
	return func(pager *userpasswordPager) error {
		if filter == nil {
			return errors.New("UserPasswordQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userpasswordPager struct {
	reverse bool
	order   *UserPasswordOrder
	filter  func(*UserPasswordQuery) (*UserPasswordQuery, error)
}

func newUserPasswordPager(opts []UserPasswordPaginateOption, reverse bool) (*userpasswordPager, error) {
	pager := &userpasswordPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserPasswordOrder
	}
	return pager, nil
}

func (p *userpasswordPager) applyFilter(query *UserPasswordQuery) (*UserPasswordQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userpasswordPager) toCursor(up *UserPassword) Cursor {
	return p.order.Field.toCursor(up)
}

func (p *userpasswordPager) applyCursors(query *UserPasswordQuery, after, before *Cursor) (*UserPasswordQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserPasswordOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userpasswordPager) applyOrder(query *UserPasswordQuery) *UserPasswordQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserPasswordOrder.Field {
		query = query.Order(DefaultUserPasswordOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userpasswordPager) orderExpr(query *UserPasswordQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserPasswordOrder.Field {
			b.Comma().Ident(DefaultUserPasswordOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserPassword.
func (up *UserPasswordQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPasswordPaginateOption,
) (*UserPasswordConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPasswordPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if up, err = pager.applyFilter(up); err != nil {
		return nil, err
	}
	conn := &UserPasswordConnection{Edges: []*UserPasswordEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := up.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if up, err = pager.applyCursors(up, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		up.Limit(limit)
	}
	if sp, ok := pagination.SimplePaginationFromContext(ctx); ok {
		if first != nil {
			up.Offset((sp.PageIndex - sp.CurrentIndex - 1) * *first)
		}
		if last != nil {
			up.Offset((sp.CurrentIndex - sp.PageIndex - 1) * *last)
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := up.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	up = pager.applyOrder(up)
	nodes, err := up.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserPasswordOrderFieldCreatedAt orders UserPassword by created_at.
	UserPasswordOrderFieldCreatedAt = &UserPasswordOrderField{
		Value: func(up *UserPassword) (ent.Value, error) {
			return up.CreatedAt, nil
		},
		column: userpassword.FieldCreatedAt,
		toTerm: userpassword.ByCreatedAt,
		toCursor: func(up *UserPassword) Cursor {
			return Cursor{
				ID:    up.ID,
				Value: up.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserPasswordOrderField) String() string {
	var str string
	switch f.column {
	case UserPasswordOrderFieldCreatedAt.column:
		str = "createdAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserPasswordOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserPasswordOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserPasswordOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserPasswordOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserPasswordOrderField", str)
	}
	return nil
}

// UserPasswordOrderField defines the ordering field of UserPassword.
type UserPasswordOrderField struct {
	// Value extracts the ordering value from the given UserPassword.
	Value    func(*UserPassword) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) userpassword.OrderOption
	toCursor func(*UserPassword) Cursor
}

// UserPasswordOrder defines the ordering of UserPassword.
type UserPasswordOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *UserPasswordOrderField `json:"field"`
}

// DefaultUserPasswordOrder is the default ordering of UserPassword.
var DefaultUserPasswordOrder = &UserPasswordOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserPasswordOrderField{
		Value: func(up *UserPassword) (ent.Value, error) {
			return up.ID, nil
		},
		column: userpassword.FieldID,
		toTerm: userpassword.ByID,
		toCursor: func(up *UserPassword) Cursor {
			return Cursor{ID: up.ID}
		},
	},
}

// ToEdge converts UserPassword into UserPasswordEdge.
func (up *UserPassword) ToEdge(order *UserPasswordOrder) *UserPasswordEdge {
	if order == nil {
		order = DefaultUserPasswordOrder
	}
	return &UserPasswordEdge{
		Node:   up,
		Cursor: order.Field.toCursor(up),
	}
}
