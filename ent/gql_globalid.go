// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"fmt"
	"strconv"
	"strings"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/appres"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgpolicy"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userdevice"
	"github.com/woocoos/knockout/ent/useridentity"
	"github.com/woocoos/knockout/ent/userloginprofile"
	"github.com/woocoos/knockout/ent/userpassword"
)

// GlobalID returns the global identifier for the given App node.
func (a *App) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", app.Table, a.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given AppAction node.
func (aa *AppAction) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", appaction.Table, aa.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given AppMenu node.
func (am *AppMenu) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", appmenu.Table, am.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given AppPolicy node.
func (ap *AppPolicy) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", apppolicy.Table, ap.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given AppRes node.
func (ar *AppRes) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", appres.Table, ar.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given AppRole node.
func (ar *AppRole) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", approle.Table, ar.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given Org node.
func (o *Org) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", org.Table, o.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given OrgPolicy node.
func (op *OrgPolicy) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", orgpolicy.Table, op.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given Permission node.
func (pe *Permission) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", permission.Table, pe.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given User node.
func (u *User) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", user.Table, u.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given UserDevice node.
func (ud *UserDevice) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", userdevice.Table, ud.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given UserIdentity node.
func (ui *UserIdentity) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", useridentity.Table, ui.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given UserLoginProfile node.
func (ulp *UserLoginProfile) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", userloginprofile.Table, ulp.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

// GlobalID returns the global identifier for the given UserPassword node.
func (up *UserPassword) GlobalID(context.Context) (string, error) {
	id := fmt.Sprintf("%s:%d", userpassword.Table, up.ID)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

type ResolvedGlobal struct{ Type, ID string }

func FromGlobalID(s string) (*ResolvedGlobal, error) {
	b, err := base64.URLEncoding.DecodeString(s)
	if err != nil {
		return nil, err
	}
	tid := strings.Split(string(b), ":")
	if len(tid) != 2 {
		return nil, fmt.Errorf("invalid global identifier format %q", b)
	}
	return &ResolvedGlobal{Type: tid[0], ID: tid[1]}, nil
}

// GlobalID returns the global identifier for the given type and id.
func GlobalID(tp, id string) (string, error) {
	switch tp {
	case app.Table:
		break
	case appaction.Table:
		break
	case appmenu.Table:
		break
	case apppolicy.Table:
		break
	case appres.Table:
		break
	case approle.Table:
		break
	case org.Table:
		break
	case orgpolicy.Table:
		break
	case permission.Table:
		break
	case user.Table:
		break
	case userdevice.Table:
		break
	case useridentity.Table:
		break
	case userloginprofile.Table:
		break
	case userpassword.Table:
		break
	default:
		return "", fmt.Errorf("invalid type %q", tp)
	}
	id = fmt.Sprintf("%s:%s", tp, id)
	return base64.StdEncoding.EncodeToString([]byte(id)), nil
}

func (r *ResolvedGlobal) Int() (int, error) {
	return strconv.Atoi(r.ID)
}
func IntFromGlobalID(s string) (int, error) {
	r, err := FromGlobalID(s)
	if err != nil {
		return 0, err
	}
	return r.Int()
}

func (c *Client) NoderEx(ctx context.Context, id string) (Noder, error) {
	g, err := FromGlobalID(id)
	if err != nil {
		return nil, err
	}
	v, err := g.Int()
	if err != nil {
		return nil, err
	}
	return c.Noder(ctx, v, WithNodeType(func(ctx context.Context, i int) (string, error) {
		return g.Type, nil
	}))
}

func (c *Client) NodersEx(ctx context.Context, ids []string, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.NoderEx(ctx, ids[0])
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	for i, id := range ids {
		g, err := FromGlobalID(id)
		if err != nil {
			errors[i] = err
			continue
		}
		intID, err := g.Int()
		if err != nil {
			errors[i] = err
			continue
		}
		tables[g.Type] = append(tables[g.Type], intID)
		id2idx[intID] = append(id2idx[intID], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}
