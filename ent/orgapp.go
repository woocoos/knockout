// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgapp"
)

// OrgApp is the model entity for the OrgApp schema.
type OrgApp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 组织ID
	OrgID int `json:"org_id,omitempty"`
	// 应用ID
	AppID int `json:"app_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgAppQuery when eager-loading is set.
	Edges OrgAppEdges `json:"edges"`
}

// OrgAppEdges holds the relations/edges for other nodes in the graph.
type OrgAppEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// Org holds the value of the org edge.
	Org *Org `json:"org,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgAppEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// OrgOrErr returns the Org value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgAppEdges) OrgOrErr() (*Org, error) {
	if e.loadedTypes[1] {
		if e.Org == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: org.Label}
		}
		return e.Org, nil
	}
	return nil, &NotLoadedError{edge: "org"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgApp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgapp.FieldID, orgapp.FieldCreatedBy, orgapp.FieldUpdatedBy, orgapp.FieldOrgID, orgapp.FieldAppID:
			values[i] = new(sql.NullInt64)
		case orgapp.FieldCreatedAt, orgapp.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrgApp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgApp fields.
func (oa *OrgApp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = int(value.Int64)
		case orgapp.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				oa.CreatedBy = int(value.Int64)
			}
		case orgapp.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		case orgapp.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				oa.UpdatedBy = int(value.Int64)
			}
		case orgapp.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oa.UpdatedAt = value.Time
			}
		case orgapp.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				oa.OrgID = int(value.Int64)
			}
		case orgapp.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				oa.AppID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the OrgApp entity.
func (oa *OrgApp) QueryApp() *AppQuery {
	return NewOrgAppClient(oa.config).QueryApp(oa)
}

// QueryOrg queries the "org" edge of the OrgApp entity.
func (oa *OrgApp) QueryOrg() *OrgQuery {
	return NewOrgAppClient(oa.config).QueryOrg(oa)
}

// Update returns a builder for updating this OrgApp.
// Note that you need to call OrgApp.Unwrap() before calling this method if this OrgApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrgApp) Update() *OrgAppUpdateOne {
	return NewOrgAppClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OrgApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrgApp) Unwrap() *OrgApp {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrgApp is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrgApp) String() string {
	var builder strings.Builder
	builder.WriteString("OrgApp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oa.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", oa.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", oa.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrgID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.AppID))
	builder.WriteByte(')')
	return builder.String()
}

// OrgApps is a parsable slice of OrgApp.
type OrgApps []*OrgApp
