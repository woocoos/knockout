// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/region"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/useraddr"
)

// UserAddr is the model entity for the UserAddr schema.
type UserAddr struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// 地址类型，contact：基本信息，delivery：收货地址
	AddrType useraddr.AddrType `json:"addr_type,omitempty"`
	// 地址地区：市
	RegionID *int `json:"region_id,omitempty"`
	// 详细地址
	Addr string `json:"addr,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 传真
	Fax string `json:"fax,omitempty"`
	// 邮编
	ZipCode string `json:"zip_code,omitempty"`
	// 电话
	Tel string `json:"tel,omitempty"`
	// 手机
	Mobile string `json:"mobile,omitempty"`
	// 联系人名称
	Name string `json:"name,omitempty"`
	// 是否默认地址，类型为delivery时使用
	IsDefault bool `json:"is_default,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAddrQuery when eager-loading is set.
	Edges        UserAddrEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserAddrEdges holds the relations/edges for other nodes in the graph.
type UserAddrEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// 地区信息
	Region *Region `json:"region,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAddrEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RegionOrErr returns the Region value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAddrEdges) RegionOrErr() (*Region, error) {
	if e.Region != nil {
		return e.Region, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: region.Label}
	}
	return nil, &NotLoadedError{edge: "region"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAddr) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useraddr.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case useraddr.FieldID, useraddr.FieldCreatedBy, useraddr.FieldUpdatedBy, useraddr.FieldUserID, useraddr.FieldRegionID:
			values[i] = new(sql.NullInt64)
		case useraddr.FieldAddrType, useraddr.FieldAddr, useraddr.FieldEmail, useraddr.FieldFax, useraddr.FieldZipCode, useraddr.FieldTel, useraddr.FieldMobile, useraddr.FieldName:
			values[i] = new(sql.NullString)
		case useraddr.FieldCreatedAt, useraddr.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAddr fields.
func (ua *UserAddr) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useraddr.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ua.ID = int(value.Int64)
		case useraddr.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ua.CreatedBy = int(value.Int64)
			}
		case useraddr.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ua.CreatedAt = value.Time
			}
		case useraddr.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ua.UpdatedBy = int(value.Int64)
			}
		case useraddr.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ua.UpdatedAt = value.Time
			}
		case useraddr.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ua.UserID = int(value.Int64)
			}
		case useraddr.FieldAddrType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addr_type", values[i])
			} else if value.Valid {
				ua.AddrType = useraddr.AddrType(value.String)
			}
		case useraddr.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field region_id", values[i])
			} else if value.Valid {
				ua.RegionID = new(int)
				*ua.RegionID = int(value.Int64)
			}
		case useraddr.FieldAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addr", values[i])
			} else if value.Valid {
				ua.Addr = value.String
			}
		case useraddr.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ua.Email = value.String
			}
		case useraddr.FieldFax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fax", values[i])
			} else if value.Valid {
				ua.Fax = value.String
			}
		case useraddr.FieldZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip_code", values[i])
			} else if value.Valid {
				ua.ZipCode = value.String
			}
		case useraddr.FieldTel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tel", values[i])
			} else if value.Valid {
				ua.Tel = value.String
			}
		case useraddr.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				ua.Mobile = value.String
			}
		case useraddr.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ua.Name = value.String
			}
		case useraddr.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				ua.IsDefault = value.Bool
			}
		default:
			ua.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserAddr.
// This includes values selected through modifiers, order, etc.
func (ua *UserAddr) Value(name string) (ent.Value, error) {
	return ua.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserAddr entity.
func (ua *UserAddr) QueryUser() *UserQuery {
	return NewUserAddrClient(ua.config).QueryUser(ua)
}

// QueryRegion queries the "region" edge of the UserAddr entity.
func (ua *UserAddr) QueryRegion() *RegionQuery {
	return NewUserAddrClient(ua.config).QueryRegion(ua)
}

// Update returns a builder for updating this UserAddr.
// Note that you need to call UserAddr.Unwrap() before calling this method if this UserAddr
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAddr) Update() *UserAddrUpdateOne {
	return NewUserAddrClient(ua.config).UpdateOne(ua)
}

// Unwrap unwraps the UserAddr entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ua *UserAddr) Unwrap() *UserAddr {
	_tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAddr is not a transactional entity")
	}
	ua.config.driver = _tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAddr) String() string {
	var builder strings.Builder
	builder.WriteString("UserAddr(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ua.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ua.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ua.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ua.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ua.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ua.UserID))
	builder.WriteString(", ")
	builder.WriteString("addr_type=")
	builder.WriteString(fmt.Sprintf("%v", ua.AddrType))
	builder.WriteString(", ")
	if v := ua.RegionID; v != nil {
		builder.WriteString("region_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("addr=")
	builder.WriteString(ua.Addr)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ua.Email)
	builder.WriteString(", ")
	builder.WriteString("fax=")
	builder.WriteString(ua.Fax)
	builder.WriteString(", ")
	builder.WriteString("zip_code=")
	builder.WriteString(ua.ZipCode)
	builder.WriteString(", ")
	builder.WriteString("tel=")
	builder.WriteString(ua.Tel)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(ua.Mobile)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ua.Name)
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", ua.IsDefault))
	builder.WriteByte(')')
	return builder.String()
}

// UserAddrs is a parsable slice of UserAddr.
type UserAddrs []*UserAddr
