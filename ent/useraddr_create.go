// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/region"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/useraddr"
)

// UserAddrCreate is the builder for creating a UserAddr entity.
type UserAddrCreate struct {
	config
	mutation *UserAddrMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (uac *UserAddrCreate) SetCreatedBy(i int) *UserAddrCreate {
	uac.mutation.SetCreatedBy(i)
	return uac
}

// SetCreatedAt sets the "created_at" field.
func (uac *UserAddrCreate) SetCreatedAt(t time.Time) *UserAddrCreate {
	uac.mutation.SetCreatedAt(t)
	return uac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableCreatedAt(t *time.Time) *UserAddrCreate {
	if t != nil {
		uac.SetCreatedAt(*t)
	}
	return uac
}

// SetUpdatedBy sets the "updated_by" field.
func (uac *UserAddrCreate) SetUpdatedBy(i int) *UserAddrCreate {
	uac.mutation.SetUpdatedBy(i)
	return uac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableUpdatedBy(i *int) *UserAddrCreate {
	if i != nil {
		uac.SetUpdatedBy(*i)
	}
	return uac
}

// SetUpdatedAt sets the "updated_at" field.
func (uac *UserAddrCreate) SetUpdatedAt(t time.Time) *UserAddrCreate {
	uac.mutation.SetUpdatedAt(t)
	return uac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableUpdatedAt(t *time.Time) *UserAddrCreate {
	if t != nil {
		uac.SetUpdatedAt(*t)
	}
	return uac
}

// SetUserID sets the "user_id" field.
func (uac *UserAddrCreate) SetUserID(i int) *UserAddrCreate {
	uac.mutation.SetUserID(i)
	return uac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableUserID(i *int) *UserAddrCreate {
	if i != nil {
		uac.SetUserID(*i)
	}
	return uac
}

// SetAddrType sets the "addr_type" field.
func (uac *UserAddrCreate) SetAddrType(ut useraddr.AddrType) *UserAddrCreate {
	uac.mutation.SetAddrType(ut)
	return uac
}

// SetRegionID sets the "region_id" field.
func (uac *UserAddrCreate) SetRegionID(i int) *UserAddrCreate {
	uac.mutation.SetRegionID(i)
	return uac
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableRegionID(i *int) *UserAddrCreate {
	if i != nil {
		uac.SetRegionID(*i)
	}
	return uac
}

// SetAddr sets the "addr" field.
func (uac *UserAddrCreate) SetAddr(s string) *UserAddrCreate {
	uac.mutation.SetAddr(s)
	return uac
}

// SetNillableAddr sets the "addr" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableAddr(s *string) *UserAddrCreate {
	if s != nil {
		uac.SetAddr(*s)
	}
	return uac
}

// SetEmail sets the "email" field.
func (uac *UserAddrCreate) SetEmail(s string) *UserAddrCreate {
	uac.mutation.SetEmail(s)
	return uac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableEmail(s *string) *UserAddrCreate {
	if s != nil {
		uac.SetEmail(*s)
	}
	return uac
}

// SetFax sets the "fax" field.
func (uac *UserAddrCreate) SetFax(s string) *UserAddrCreate {
	uac.mutation.SetFax(s)
	return uac
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableFax(s *string) *UserAddrCreate {
	if s != nil {
		uac.SetFax(*s)
	}
	return uac
}

// SetZipCode sets the "zip_code" field.
func (uac *UserAddrCreate) SetZipCode(s string) *UserAddrCreate {
	uac.mutation.SetZipCode(s)
	return uac
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableZipCode(s *string) *UserAddrCreate {
	if s != nil {
		uac.SetZipCode(*s)
	}
	return uac
}

// SetTel sets the "tel" field.
func (uac *UserAddrCreate) SetTel(s string) *UserAddrCreate {
	uac.mutation.SetTel(s)
	return uac
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableTel(s *string) *UserAddrCreate {
	if s != nil {
		uac.SetTel(*s)
	}
	return uac
}

// SetMobile sets the "mobile" field.
func (uac *UserAddrCreate) SetMobile(s string) *UserAddrCreate {
	uac.mutation.SetMobile(s)
	return uac
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableMobile(s *string) *UserAddrCreate {
	if s != nil {
		uac.SetMobile(*s)
	}
	return uac
}

// SetName sets the "name" field.
func (uac *UserAddrCreate) SetName(s string) *UserAddrCreate {
	uac.mutation.SetName(s)
	return uac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableName(s *string) *UserAddrCreate {
	if s != nil {
		uac.SetName(*s)
	}
	return uac
}

// SetIsDefault sets the "is_default" field.
func (uac *UserAddrCreate) SetIsDefault(b bool) *UserAddrCreate {
	uac.mutation.SetIsDefault(b)
	return uac
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (uac *UserAddrCreate) SetNillableIsDefault(b *bool) *UserAddrCreate {
	if b != nil {
		uac.SetIsDefault(*b)
	}
	return uac
}

// SetID sets the "id" field.
func (uac *UserAddrCreate) SetID(i int) *UserAddrCreate {
	uac.mutation.SetID(i)
	return uac
}

// SetUser sets the "user" edge to the User entity.
func (uac *UserAddrCreate) SetUser(u *User) *UserAddrCreate {
	return uac.SetUserID(u.ID)
}

// SetRegion sets the "region" edge to the Region entity.
func (uac *UserAddrCreate) SetRegion(r *Region) *UserAddrCreate {
	return uac.SetRegionID(r.ID)
}

// Mutation returns the UserAddrMutation object of the builder.
func (uac *UserAddrCreate) Mutation() *UserAddrMutation {
	return uac.mutation
}

// Save creates the UserAddr in the database.
func (uac *UserAddrCreate) Save(ctx context.Context) (*UserAddr, error) {
	if err := uac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAddrCreate) SaveX(ctx context.Context) *UserAddr {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UserAddrCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UserAddrCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UserAddrCreate) defaults() error {
	if _, ok := uac.mutation.CreatedAt(); !ok {
		if useraddr.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized useraddr.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := useraddr.DefaultCreatedAt()
		uac.mutation.SetCreatedAt(v)
	}
	if _, ok := uac.mutation.IsDefault(); !ok {
		v := useraddr.DefaultIsDefault
		uac.mutation.SetIsDefault(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uac *UserAddrCreate) check() error {
	if _, ok := uac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserAddr.created_by"`)}
	}
	if _, ok := uac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserAddr.created_at"`)}
	}
	if _, ok := uac.mutation.AddrType(); !ok {
		return &ValidationError{Name: "addr_type", err: errors.New(`ent: missing required field "UserAddr.addr_type"`)}
	}
	if v, ok := uac.mutation.AddrType(); ok {
		if err := useraddr.AddrTypeValidator(v); err != nil {
			return &ValidationError{Name: "addr_type", err: fmt.Errorf(`ent: validator failed for field "UserAddr.addr_type": %w`, err)}
		}
	}
	if v, ok := uac.mutation.Email(); ok {
		if err := useraddr.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "UserAddr.email": %w`, err)}
		}
	}
	if v, ok := uac.mutation.Fax(); ok {
		if err := useraddr.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`ent: validator failed for field "UserAddr.fax": %w`, err)}
		}
	}
	if v, ok := uac.mutation.ZipCode(); ok {
		if err := useraddr.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "UserAddr.zip_code": %w`, err)}
		}
	}
	if v, ok := uac.mutation.Tel(); ok {
		if err := useraddr.TelValidator(v); err != nil {
			return &ValidationError{Name: "tel", err: fmt.Errorf(`ent: validator failed for field "UserAddr.tel": %w`, err)}
		}
	}
	if v, ok := uac.mutation.Mobile(); ok {
		if err := useraddr.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "UserAddr.mobile": %w`, err)}
		}
	}
	if v, ok := uac.mutation.Name(); ok {
		if err := useraddr.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserAddr.name": %w`, err)}
		}
	}
	if _, ok := uac.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "UserAddr.is_default"`)}
	}
	return nil
}

func (uac *UserAddrCreate) sqlSave(ctx context.Context) (*UserAddr, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UserAddrCreate) createSpec() (*UserAddr, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAddr{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(useraddr.Table, sqlgraph.NewFieldSpec(useraddr.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uac.conflict
	if id, ok := uac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uac.mutation.CreatedBy(); ok {
		_spec.SetField(useraddr.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := uac.mutation.CreatedAt(); ok {
		_spec.SetField(useraddr.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uac.mutation.UpdatedBy(); ok {
		_spec.SetField(useraddr.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := uac.mutation.UpdatedAt(); ok {
		_spec.SetField(useraddr.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uac.mutation.AddrType(); ok {
		_spec.SetField(useraddr.FieldAddrType, field.TypeEnum, value)
		_node.AddrType = value
	}
	if value, ok := uac.mutation.Addr(); ok {
		_spec.SetField(useraddr.FieldAddr, field.TypeString, value)
		_node.Addr = value
	}
	if value, ok := uac.mutation.Email(); ok {
		_spec.SetField(useraddr.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uac.mutation.Fax(); ok {
		_spec.SetField(useraddr.FieldFax, field.TypeString, value)
		_node.Fax = value
	}
	if value, ok := uac.mutation.ZipCode(); ok {
		_spec.SetField(useraddr.FieldZipCode, field.TypeString, value)
		_node.ZipCode = value
	}
	if value, ok := uac.mutation.Tel(); ok {
		_spec.SetField(useraddr.FieldTel, field.TypeString, value)
		_node.Tel = value
	}
	if value, ok := uac.mutation.Mobile(); ok {
		_spec.SetField(useraddr.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := uac.mutation.Name(); ok {
		_spec.SetField(useraddr.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uac.mutation.IsDefault(); ok {
		_spec.SetField(useraddr.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if nodes := uac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useraddr.UserTable,
			Columns: []string{useraddr.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddr.RegionTable,
			Columns: []string{useraddr.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RegionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAddr.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAddrUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (uac *UserAddrCreate) OnConflict(opts ...sql.ConflictOption) *UserAddrUpsertOne {
	uac.conflict = opts
	return &UserAddrUpsertOne{
		create: uac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAddr.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uac *UserAddrCreate) OnConflictColumns(columns ...string) *UserAddrUpsertOne {
	uac.conflict = append(uac.conflict, sql.ConflictColumns(columns...))
	return &UserAddrUpsertOne{
		create: uac,
	}
}

type (
	// UserAddrUpsertOne is the builder for "upsert"-ing
	//  one UserAddr node.
	UserAddrUpsertOne struct {
		create *UserAddrCreate
	}

	// UserAddrUpsert is the "OnConflict" setter.
	UserAddrUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *UserAddrUpsert) SetUpdatedBy(v int) *UserAddrUpsert {
	u.Set(useraddr.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateUpdatedBy() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserAddrUpsert) AddUpdatedBy(v int) *UserAddrUpsert {
	u.Add(useraddr.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserAddrUpsert) ClearUpdatedBy() *UserAddrUpsert {
	u.SetNull(useraddr.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserAddrUpsert) SetUpdatedAt(v time.Time) *UserAddrUpsert {
	u.Set(useraddr.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateUpdatedAt() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserAddrUpsert) ClearUpdatedAt() *UserAddrUpsert {
	u.SetNull(useraddr.FieldUpdatedAt)
	return u
}

// SetAddrType sets the "addr_type" field.
func (u *UserAddrUpsert) SetAddrType(v useraddr.AddrType) *UserAddrUpsert {
	u.Set(useraddr.FieldAddrType, v)
	return u
}

// UpdateAddrType sets the "addr_type" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateAddrType() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldAddrType)
	return u
}

// SetRegionID sets the "region_id" field.
func (u *UserAddrUpsert) SetRegionID(v int) *UserAddrUpsert {
	u.Set(useraddr.FieldRegionID, v)
	return u
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateRegionID() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldRegionID)
	return u
}

// ClearRegionID clears the value of the "region_id" field.
func (u *UserAddrUpsert) ClearRegionID() *UserAddrUpsert {
	u.SetNull(useraddr.FieldRegionID)
	return u
}

// SetAddr sets the "addr" field.
func (u *UserAddrUpsert) SetAddr(v string) *UserAddrUpsert {
	u.Set(useraddr.FieldAddr, v)
	return u
}

// UpdateAddr sets the "addr" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateAddr() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldAddr)
	return u
}

// ClearAddr clears the value of the "addr" field.
func (u *UserAddrUpsert) ClearAddr() *UserAddrUpsert {
	u.SetNull(useraddr.FieldAddr)
	return u
}

// SetEmail sets the "email" field.
func (u *UserAddrUpsert) SetEmail(v string) *UserAddrUpsert {
	u.Set(useraddr.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateEmail() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *UserAddrUpsert) ClearEmail() *UserAddrUpsert {
	u.SetNull(useraddr.FieldEmail)
	return u
}

// SetFax sets the "fax" field.
func (u *UserAddrUpsert) SetFax(v string) *UserAddrUpsert {
	u.Set(useraddr.FieldFax, v)
	return u
}

// UpdateFax sets the "fax" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateFax() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldFax)
	return u
}

// ClearFax clears the value of the "fax" field.
func (u *UserAddrUpsert) ClearFax() *UserAddrUpsert {
	u.SetNull(useraddr.FieldFax)
	return u
}

// SetZipCode sets the "zip_code" field.
func (u *UserAddrUpsert) SetZipCode(v string) *UserAddrUpsert {
	u.Set(useraddr.FieldZipCode, v)
	return u
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateZipCode() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldZipCode)
	return u
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *UserAddrUpsert) ClearZipCode() *UserAddrUpsert {
	u.SetNull(useraddr.FieldZipCode)
	return u
}

// SetTel sets the "tel" field.
func (u *UserAddrUpsert) SetTel(v string) *UserAddrUpsert {
	u.Set(useraddr.FieldTel, v)
	return u
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateTel() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldTel)
	return u
}

// ClearTel clears the value of the "tel" field.
func (u *UserAddrUpsert) ClearTel() *UserAddrUpsert {
	u.SetNull(useraddr.FieldTel)
	return u
}

// SetMobile sets the "mobile" field.
func (u *UserAddrUpsert) SetMobile(v string) *UserAddrUpsert {
	u.Set(useraddr.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateMobile() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldMobile)
	return u
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserAddrUpsert) ClearMobile() *UserAddrUpsert {
	u.SetNull(useraddr.FieldMobile)
	return u
}

// SetName sets the "name" field.
func (u *UserAddrUpsert) SetName(v string) *UserAddrUpsert {
	u.Set(useraddr.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateName() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *UserAddrUpsert) ClearName() *UserAddrUpsert {
	u.SetNull(useraddr.FieldName)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *UserAddrUpsert) SetIsDefault(v bool) *UserAddrUpsert {
	u.Set(useraddr.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *UserAddrUpsert) UpdateIsDefault() *UserAddrUpsert {
	u.SetExcluded(useraddr.FieldIsDefault)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserAddr.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(useraddr.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserAddrUpsertOne) UpdateNewValues() *UserAddrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(useraddr.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(useraddr.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(useraddr.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(useraddr.FieldUserID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAddr.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserAddrUpsertOne) Ignore() *UserAddrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAddrUpsertOne) DoNothing() *UserAddrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAddrCreate.OnConflict
// documentation for more info.
func (u *UserAddrUpsertOne) Update(set func(*UserAddrUpsert)) *UserAddrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAddrUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserAddrUpsertOne) SetUpdatedBy(v int) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserAddrUpsertOne) AddUpdatedBy(v int) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateUpdatedBy() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserAddrUpsertOne) ClearUpdatedBy() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserAddrUpsertOne) SetUpdatedAt(v time.Time) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateUpdatedAt() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserAddrUpsertOne) ClearUpdatedAt() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAddrType sets the "addr_type" field.
func (u *UserAddrUpsertOne) SetAddrType(v useraddr.AddrType) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetAddrType(v)
	})
}

// UpdateAddrType sets the "addr_type" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateAddrType() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateAddrType()
	})
}

// SetRegionID sets the "region_id" field.
func (u *UserAddrUpsertOne) SetRegionID(v int) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateRegionID() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateRegionID()
	})
}

// ClearRegionID clears the value of the "region_id" field.
func (u *UserAddrUpsertOne) ClearRegionID() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearRegionID()
	})
}

// SetAddr sets the "addr" field.
func (u *UserAddrUpsertOne) SetAddr(v string) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetAddr(v)
	})
}

// UpdateAddr sets the "addr" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateAddr() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateAddr()
	})
}

// ClearAddr clears the value of the "addr" field.
func (u *UserAddrUpsertOne) ClearAddr() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearAddr()
	})
}

// SetEmail sets the "email" field.
func (u *UserAddrUpsertOne) SetEmail(v string) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateEmail() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserAddrUpsertOne) ClearEmail() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearEmail()
	})
}

// SetFax sets the "fax" field.
func (u *UserAddrUpsertOne) SetFax(v string) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetFax(v)
	})
}

// UpdateFax sets the "fax" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateFax() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateFax()
	})
}

// ClearFax clears the value of the "fax" field.
func (u *UserAddrUpsertOne) ClearFax() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearFax()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *UserAddrUpsertOne) SetZipCode(v string) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateZipCode() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *UserAddrUpsertOne) ClearZipCode() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearZipCode()
	})
}

// SetTel sets the "tel" field.
func (u *UserAddrUpsertOne) SetTel(v string) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetTel(v)
	})
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateTel() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateTel()
	})
}

// ClearTel clears the value of the "tel" field.
func (u *UserAddrUpsertOne) ClearTel() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearTel()
	})
}

// SetMobile sets the "mobile" field.
func (u *UserAddrUpsertOne) SetMobile(v string) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateMobile() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserAddrUpsertOne) ClearMobile() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearMobile()
	})
}

// SetName sets the "name" field.
func (u *UserAddrUpsertOne) SetName(v string) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateName() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserAddrUpsertOne) ClearName() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearName()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *UserAddrUpsertOne) SetIsDefault(v bool) *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *UserAddrUpsertOne) UpdateIsDefault() *UserAddrUpsertOne {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateIsDefault()
	})
}

// Exec executes the query.
func (u *UserAddrUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAddrCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAddrUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserAddrUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserAddrUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserAddrCreateBulk is the builder for creating many UserAddr entities in bulk.
type UserAddrCreateBulk struct {
	config
	err      error
	builders []*UserAddrCreate
	conflict []sql.ConflictOption
}

// Save creates the UserAddr entities in the database.
func (uacb *UserAddrCreateBulk) Save(ctx context.Context) ([]*UserAddr, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UserAddr, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAddrMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UserAddrCreateBulk) SaveX(ctx context.Context) []*UserAddr {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UserAddrCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UserAddrCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserAddr.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserAddrUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (uacb *UserAddrCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserAddrUpsertBulk {
	uacb.conflict = opts
	return &UserAddrUpsertBulk{
		create: uacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserAddr.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uacb *UserAddrCreateBulk) OnConflictColumns(columns ...string) *UserAddrUpsertBulk {
	uacb.conflict = append(uacb.conflict, sql.ConflictColumns(columns...))
	return &UserAddrUpsertBulk{
		create: uacb,
	}
}

// UserAddrUpsertBulk is the builder for "upsert"-ing
// a bulk of UserAddr nodes.
type UserAddrUpsertBulk struct {
	create *UserAddrCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserAddr.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(useraddr.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserAddrUpsertBulk) UpdateNewValues() *UserAddrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(useraddr.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(useraddr.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(useraddr.FieldCreatedAt)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(useraddr.FieldUserID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserAddr.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserAddrUpsertBulk) Ignore() *UserAddrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserAddrUpsertBulk) DoNothing() *UserAddrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserAddrCreateBulk.OnConflict
// documentation for more info.
func (u *UserAddrUpsertBulk) Update(set func(*UserAddrUpsert)) *UserAddrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserAddrUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserAddrUpsertBulk) SetUpdatedBy(v int) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserAddrUpsertBulk) AddUpdatedBy(v int) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateUpdatedBy() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserAddrUpsertBulk) ClearUpdatedBy() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserAddrUpsertBulk) SetUpdatedAt(v time.Time) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateUpdatedAt() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserAddrUpsertBulk) ClearUpdatedAt() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAddrType sets the "addr_type" field.
func (u *UserAddrUpsertBulk) SetAddrType(v useraddr.AddrType) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetAddrType(v)
	})
}

// UpdateAddrType sets the "addr_type" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateAddrType() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateAddrType()
	})
}

// SetRegionID sets the "region_id" field.
func (u *UserAddrUpsertBulk) SetRegionID(v int) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateRegionID() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateRegionID()
	})
}

// ClearRegionID clears the value of the "region_id" field.
func (u *UserAddrUpsertBulk) ClearRegionID() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearRegionID()
	})
}

// SetAddr sets the "addr" field.
func (u *UserAddrUpsertBulk) SetAddr(v string) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetAddr(v)
	})
}

// UpdateAddr sets the "addr" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateAddr() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateAddr()
	})
}

// ClearAddr clears the value of the "addr" field.
func (u *UserAddrUpsertBulk) ClearAddr() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearAddr()
	})
}

// SetEmail sets the "email" field.
func (u *UserAddrUpsertBulk) SetEmail(v string) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateEmail() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserAddrUpsertBulk) ClearEmail() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearEmail()
	})
}

// SetFax sets the "fax" field.
func (u *UserAddrUpsertBulk) SetFax(v string) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetFax(v)
	})
}

// UpdateFax sets the "fax" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateFax() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateFax()
	})
}

// ClearFax clears the value of the "fax" field.
func (u *UserAddrUpsertBulk) ClearFax() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearFax()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *UserAddrUpsertBulk) SetZipCode(v string) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateZipCode() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *UserAddrUpsertBulk) ClearZipCode() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearZipCode()
	})
}

// SetTel sets the "tel" field.
func (u *UserAddrUpsertBulk) SetTel(v string) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetTel(v)
	})
}

// UpdateTel sets the "tel" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateTel() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateTel()
	})
}

// ClearTel clears the value of the "tel" field.
func (u *UserAddrUpsertBulk) ClearTel() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearTel()
	})
}

// SetMobile sets the "mobile" field.
func (u *UserAddrUpsertBulk) SetMobile(v string) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateMobile() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserAddrUpsertBulk) ClearMobile() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearMobile()
	})
}

// SetName sets the "name" field.
func (u *UserAddrUpsertBulk) SetName(v string) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateName() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserAddrUpsertBulk) ClearName() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.ClearName()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *UserAddrUpsertBulk) SetIsDefault(v bool) *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *UserAddrUpsertBulk) UpdateIsDefault() *UserAddrUpsertBulk {
	return u.Update(func(s *UserAddrUpsert) {
		s.UpdateIsDefault()
	})
}

// Exec executes the query.
func (u *UserAddrUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserAddrCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserAddrCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAddrUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
