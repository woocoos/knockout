// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/permissionpolicy"
	"github.com/woocoos/knockout/graph/entgen/types"
)

// PermissionPolicyCreate is the builder for creating a PermissionPolicy entity.
type PermissionPolicyCreate struct {
	config
	mutation *PermissionPolicyMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (ppc *PermissionPolicyCreate) SetCreatedBy(i int) *PermissionPolicyCreate {
	ppc.mutation.SetCreatedBy(i)
	return ppc
}

// SetCreatedAt sets the "created_at" field.
func (ppc *PermissionPolicyCreate) SetCreatedAt(t time.Time) *PermissionPolicyCreate {
	ppc.mutation.SetCreatedAt(t)
	return ppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableCreatedAt(t *time.Time) *PermissionPolicyCreate {
	if t != nil {
		ppc.SetCreatedAt(*t)
	}
	return ppc
}

// SetUpdatedBy sets the "updated_by" field.
func (ppc *PermissionPolicyCreate) SetUpdatedBy(i int) *PermissionPolicyCreate {
	ppc.mutation.SetUpdatedBy(i)
	return ppc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableUpdatedBy(i *int) *PermissionPolicyCreate {
	if i != nil {
		ppc.SetUpdatedBy(*i)
	}
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *PermissionPolicyCreate) SetUpdatedAt(t time.Time) *PermissionPolicyCreate {
	ppc.mutation.SetUpdatedAt(t)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableUpdatedAt(t *time.Time) *PermissionPolicyCreate {
	if t != nil {
		ppc.SetUpdatedAt(*t)
	}
	return ppc
}

// SetOrgID sets the "org_id" field.
func (ppc *PermissionPolicyCreate) SetOrgID(i int) *PermissionPolicyCreate {
	ppc.mutation.SetOrgID(i)
	return ppc
}

// SetAppID sets the "app_id" field.
func (ppc *PermissionPolicyCreate) SetAppID(i int) *PermissionPolicyCreate {
	ppc.mutation.SetAppID(i)
	return ppc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableAppID(i *int) *PermissionPolicyCreate {
	if i != nil {
		ppc.SetAppID(*i)
	}
	return ppc
}

// SetAppPolicyID sets the "app_policy_id" field.
func (ppc *PermissionPolicyCreate) SetAppPolicyID(i int) *PermissionPolicyCreate {
	ppc.mutation.SetAppPolicyID(i)
	return ppc
}

// SetNillableAppPolicyID sets the "app_policy_id" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableAppPolicyID(i *int) *PermissionPolicyCreate {
	if i != nil {
		ppc.SetAppPolicyID(*i)
	}
	return ppc
}

// SetName sets the "name" field.
func (ppc *PermissionPolicyCreate) SetName(s string) *PermissionPolicyCreate {
	ppc.mutation.SetName(s)
	return ppc
}

// SetComments sets the "comments" field.
func (ppc *PermissionPolicyCreate) SetComments(s string) *PermissionPolicyCreate {
	ppc.mutation.SetComments(s)
	return ppc
}

// SetRules sets the "rules" field.
func (ppc *PermissionPolicyCreate) SetRules(tr []types.PolicyRule) *PermissionPolicyCreate {
	ppc.mutation.SetRules(tr)
	return ppc
}

// SetID sets the "id" field.
func (ppc *PermissionPolicyCreate) SetID(i int) *PermissionPolicyCreate {
	ppc.mutation.SetID(i)
	return ppc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ppc *PermissionPolicyCreate) SetNillableID(i *int) *PermissionPolicyCreate {
	if i != nil {
		ppc.SetID(*i)
	}
	return ppc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ppc *PermissionPolicyCreate) SetOrganizationID(id int) *PermissionPolicyCreate {
	ppc.mutation.SetOrganizationID(id)
	return ppc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ppc *PermissionPolicyCreate) SetOrganization(o *Organization) *PermissionPolicyCreate {
	return ppc.SetOrganizationID(o.ID)
}

// Mutation returns the PermissionPolicyMutation object of the builder.
func (ppc *PermissionPolicyCreate) Mutation() *PermissionPolicyMutation {
	return ppc.mutation
}

// Save creates the PermissionPolicy in the database.
func (ppc *PermissionPolicyCreate) Save(ctx context.Context) (*PermissionPolicy, error) {
	if err := ppc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*PermissionPolicy, PermissionPolicyMutation](ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PermissionPolicyCreate) SaveX(ctx context.Context) *PermissionPolicy {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PermissionPolicyCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PermissionPolicyCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PermissionPolicyCreate) defaults() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		if permissionpolicy.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized permissionpolicy.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := permissionpolicy.DefaultCreatedAt()
		ppc.mutation.SetCreatedAt(v)
	}
	if _, ok := ppc.mutation.ID(); !ok {
		if permissionpolicy.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized permissionpolicy.DefaultID (forgotten import ent/runtime?)")
		}
		v := permissionpolicy.DefaultID()
		ppc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PermissionPolicyCreate) check() error {
	if _, ok := ppc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PermissionPolicy.created_by"`)}
	}
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PermissionPolicy.created_at"`)}
	}
	if _, ok := ppc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "PermissionPolicy.org_id"`)}
	}
	if _, ok := ppc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PermissionPolicy.name"`)}
	}
	if _, ok := ppc.mutation.Comments(); !ok {
		return &ValidationError{Name: "comments", err: errors.New(`ent: missing required field "PermissionPolicy.comments"`)}
	}
	if _, ok := ppc.mutation.Rules(); !ok {
		return &ValidationError{Name: "rules", err: errors.New(`ent: missing required field "PermissionPolicy.rules"`)}
	}
	if _, ok := ppc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "PermissionPolicy.organization"`)}
	}
	return nil
}

func (ppc *PermissionPolicyCreate) sqlSave(ctx context.Context) (*PermissionPolicy, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PermissionPolicyCreate) createSpec() (*PermissionPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionPolicy{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(permissionpolicy.Table, sqlgraph.NewFieldSpec(permissionpolicy.FieldID, field.TypeInt))
	)
	if id, ok := ppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ppc.mutation.CreatedBy(); ok {
		_spec.SetField(permissionpolicy.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := ppc.mutation.CreatedAt(); ok {
		_spec.SetField(permissionpolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ppc.mutation.UpdatedBy(); ok {
		_spec.SetField(permissionpolicy.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(permissionpolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.AppID(); ok {
		_spec.SetField(permissionpolicy.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := ppc.mutation.AppPolicyID(); ok {
		_spec.SetField(permissionpolicy.FieldAppPolicyID, field.TypeInt, value)
		_node.AppPolicyID = value
	}
	if value, ok := ppc.mutation.Name(); ok {
		_spec.SetField(permissionpolicy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ppc.mutation.Comments(); ok {
		_spec.SetField(permissionpolicy.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := ppc.mutation.Rules(); ok {
		_spec.SetField(permissionpolicy.FieldRules, field.TypeJSON, value)
		_node.Rules = value
	}
	if nodes := ppc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permissionpolicy.OrganizationTable,
			Columns: []string{permissionpolicy.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PermissionPolicyCreateBulk is the builder for creating many PermissionPolicy entities in bulk.
type PermissionPolicyCreateBulk struct {
	config
	builders []*PermissionPolicyCreate
}

// Save creates the PermissionPolicy entities in the database.
func (ppcb *PermissionPolicyCreateBulk) Save(ctx context.Context) ([]*PermissionPolicy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PermissionPolicy, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PermissionPolicyCreateBulk) SaveX(ctx context.Context) []*PermissionPolicy {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PermissionPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PermissionPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
