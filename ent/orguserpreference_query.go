// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orguserpreference"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/user"
)

// OrgUserPreferenceQuery is the builder for querying OrgUserPreference entities.
type OrgUserPreferenceQuery struct {
	config
	ctx        *QueryContext
	order      []orguserpreference.OrderOption
	inters     []Interceptor
	predicates []predicate.OrgUserPreference
	withUser   *UserQuery
	withOrg    *OrgQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*OrgUserPreference) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrgUserPreferenceQuery builder.
func (oupq *OrgUserPreferenceQuery) Where(ps ...predicate.OrgUserPreference) *OrgUserPreferenceQuery {
	oupq.predicates = append(oupq.predicates, ps...)
	return oupq
}

// Limit the number of records to be returned by this query.
func (oupq *OrgUserPreferenceQuery) Limit(limit int) *OrgUserPreferenceQuery {
	oupq.ctx.Limit = &limit
	return oupq
}

// Offset to start from.
func (oupq *OrgUserPreferenceQuery) Offset(offset int) *OrgUserPreferenceQuery {
	oupq.ctx.Offset = &offset
	return oupq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oupq *OrgUserPreferenceQuery) Unique(unique bool) *OrgUserPreferenceQuery {
	oupq.ctx.Unique = &unique
	return oupq
}

// Order specifies how the records should be ordered.
func (oupq *OrgUserPreferenceQuery) Order(o ...orguserpreference.OrderOption) *OrgUserPreferenceQuery {
	oupq.order = append(oupq.order, o...)
	return oupq
}

// QueryUser chains the current query on the "user" edge.
func (oupq *OrgUserPreferenceQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: oupq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oupq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oupq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orguserpreference.Table, orguserpreference.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orguserpreference.UserTable, orguserpreference.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(oupq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrg chains the current query on the "org" edge.
func (oupq *OrgUserPreferenceQuery) QueryOrg() *OrgQuery {
	query := (&OrgClient{config: oupq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oupq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oupq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orguserpreference.Table, orguserpreference.FieldID, selector),
			sqlgraph.To(org.Table, org.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orguserpreference.OrgTable, orguserpreference.OrgColumn),
		)
		fromU = sqlgraph.SetNeighbors(oupq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrgUserPreference entity from the query.
// Returns a *NotFoundError when no OrgUserPreference was found.
func (oupq *OrgUserPreferenceQuery) First(ctx context.Context) (*OrgUserPreference, error) {
	nodes, err := oupq.Limit(1).All(setContextOp(ctx, oupq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orguserpreference.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) FirstX(ctx context.Context) *OrgUserPreference {
	node, err := oupq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrgUserPreference ID from the query.
// Returns a *NotFoundError when no OrgUserPreference ID was found.
func (oupq *OrgUserPreferenceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oupq.Limit(1).IDs(setContextOp(ctx, oupq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orguserpreference.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) FirstIDX(ctx context.Context) int {
	id, err := oupq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrgUserPreference entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrgUserPreference entity is found.
// Returns a *NotFoundError when no OrgUserPreference entities are found.
func (oupq *OrgUserPreferenceQuery) Only(ctx context.Context) (*OrgUserPreference, error) {
	nodes, err := oupq.Limit(2).All(setContextOp(ctx, oupq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orguserpreference.Label}
	default:
		return nil, &NotSingularError{orguserpreference.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) OnlyX(ctx context.Context) *OrgUserPreference {
	node, err := oupq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrgUserPreference ID in the query.
// Returns a *NotSingularError when more than one OrgUserPreference ID is found.
// Returns a *NotFoundError when no entities are found.
func (oupq *OrgUserPreferenceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oupq.Limit(2).IDs(setContextOp(ctx, oupq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orguserpreference.Label}
	default:
		err = &NotSingularError{orguserpreference.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) OnlyIDX(ctx context.Context) int {
	id, err := oupq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrgUserPreferences.
func (oupq *OrgUserPreferenceQuery) All(ctx context.Context) ([]*OrgUserPreference, error) {
	ctx = setContextOp(ctx, oupq.ctx, "All")
	if err := oupq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrgUserPreference, *OrgUserPreferenceQuery]()
	return withInterceptors[[]*OrgUserPreference](ctx, oupq, qr, oupq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) AllX(ctx context.Context) []*OrgUserPreference {
	nodes, err := oupq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrgUserPreference IDs.
func (oupq *OrgUserPreferenceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oupq.ctx.Unique == nil && oupq.path != nil {
		oupq.Unique(true)
	}
	ctx = setContextOp(ctx, oupq.ctx, "IDs")
	if err = oupq.Select(orguserpreference.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) IDsX(ctx context.Context) []int {
	ids, err := oupq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oupq *OrgUserPreferenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oupq.ctx, "Count")
	if err := oupq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oupq, querierCount[*OrgUserPreferenceQuery](), oupq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) CountX(ctx context.Context) int {
	count, err := oupq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oupq *OrgUserPreferenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oupq.ctx, "Exist")
	switch _, err := oupq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oupq *OrgUserPreferenceQuery) ExistX(ctx context.Context) bool {
	exist, err := oupq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrgUserPreferenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oupq *OrgUserPreferenceQuery) Clone() *OrgUserPreferenceQuery {
	if oupq == nil {
		return nil
	}
	return &OrgUserPreferenceQuery{
		config:     oupq.config,
		ctx:        oupq.ctx.Clone(),
		order:      append([]orguserpreference.OrderOption{}, oupq.order...),
		inters:     append([]Interceptor{}, oupq.inters...),
		predicates: append([]predicate.OrgUserPreference{}, oupq.predicates...),
		withUser:   oupq.withUser.Clone(),
		withOrg:    oupq.withOrg.Clone(),
		// clone intermediate query.
		sql:  oupq.sql.Clone(),
		path: oupq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (oupq *OrgUserPreferenceQuery) WithUser(opts ...func(*UserQuery)) *OrgUserPreferenceQuery {
	query := (&UserClient{config: oupq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oupq.withUser = query
	return oupq
}

// WithOrg tells the query-builder to eager-load the nodes that are connected to
// the "org" edge. The optional arguments are used to configure the query builder of the edge.
func (oupq *OrgUserPreferenceQuery) WithOrg(opts ...func(*OrgQuery)) *OrgUserPreferenceQuery {
	query := (&OrgClient{config: oupq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oupq.withOrg = query
	return oupq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrgUserPreference.Query().
//		GroupBy(orguserpreference.FieldCreatedBy).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oupq *OrgUserPreferenceQuery) GroupBy(field string, fields ...string) *OrgUserPreferenceGroupBy {
	oupq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrgUserPreferenceGroupBy{build: oupq}
	grbuild.flds = &oupq.ctx.Fields
	grbuild.label = orguserpreference.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//	}
//
//	client.OrgUserPreference.Query().
//		Select(orguserpreference.FieldCreatedBy).
//		Scan(ctx, &v)
func (oupq *OrgUserPreferenceQuery) Select(fields ...string) *OrgUserPreferenceSelect {
	oupq.ctx.Fields = append(oupq.ctx.Fields, fields...)
	sbuild := &OrgUserPreferenceSelect{OrgUserPreferenceQuery: oupq}
	sbuild.label = orguserpreference.Label
	sbuild.flds, sbuild.scan = &oupq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrgUserPreferenceSelect configured with the given aggregations.
func (oupq *OrgUserPreferenceQuery) Aggregate(fns ...AggregateFunc) *OrgUserPreferenceSelect {
	return oupq.Select().Aggregate(fns...)
}

func (oupq *OrgUserPreferenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oupq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oupq); err != nil {
				return err
			}
		}
	}
	for _, f := range oupq.ctx.Fields {
		if !orguserpreference.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oupq.path != nil {
		prev, err := oupq.path(ctx)
		if err != nil {
			return err
		}
		oupq.sql = prev
	}
	return nil
}

func (oupq *OrgUserPreferenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrgUserPreference, error) {
	var (
		nodes       = []*OrgUserPreference{}
		_spec       = oupq.querySpec()
		loadedTypes = [2]bool{
			oupq.withUser != nil,
			oupq.withOrg != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrgUserPreference).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrgUserPreference{config: oupq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oupq.modifiers) > 0 {
		_spec.Modifiers = oupq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oupq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oupq.withUser; query != nil {
		if err := oupq.loadUser(ctx, query, nodes, nil,
			func(n *OrgUserPreference, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := oupq.withOrg; query != nil {
		if err := oupq.loadOrg(ctx, query, nodes, nil,
			func(n *OrgUserPreference, e *Org) { n.Edges.Org = e }); err != nil {
			return nil, err
		}
	}
	for i := range oupq.loadTotal {
		if err := oupq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oupq *OrgUserPreferenceQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*OrgUserPreference, init func(*OrgUserPreference), assign func(*OrgUserPreference, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OrgUserPreference)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oupq *OrgUserPreferenceQuery) loadOrg(ctx context.Context, query *OrgQuery, nodes []*OrgUserPreference, init func(*OrgUserPreference), assign func(*OrgUserPreference, *Org)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OrgUserPreference)
	for i := range nodes {
		fk := nodes[i].OrgID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(org.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "org_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oupq *OrgUserPreferenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oupq.querySpec()
	if len(oupq.modifiers) > 0 {
		_spec.Modifiers = oupq.modifiers
	}
	_spec.Node.Columns = oupq.ctx.Fields
	if len(oupq.ctx.Fields) > 0 {
		_spec.Unique = oupq.ctx.Unique != nil && *oupq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oupq.driver, _spec)
}

func (oupq *OrgUserPreferenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orguserpreference.Table, orguserpreference.Columns, sqlgraph.NewFieldSpec(orguserpreference.FieldID, field.TypeInt))
	_spec.From = oupq.sql
	if unique := oupq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oupq.path != nil {
		_spec.Unique = true
	}
	if fields := oupq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orguserpreference.FieldID)
		for i := range fields {
			if fields[i] != orguserpreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oupq.withUser != nil {
			_spec.Node.AddColumnOnce(orguserpreference.FieldUserID)
		}
		if oupq.withOrg != nil {
			_spec.Node.AddColumnOnce(orguserpreference.FieldOrgID)
		}
	}
	if ps := oupq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oupq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oupq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oupq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oupq *OrgUserPreferenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oupq.driver.Dialect())
	t1 := builder.Table(orguserpreference.Table)
	columns := oupq.ctx.Fields
	if len(columns) == 0 {
		columns = orguserpreference.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oupq.sql != nil {
		selector = oupq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oupq.ctx.Unique != nil && *oupq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oupq.predicates {
		p(selector)
	}
	for _, p := range oupq.order {
		p(selector)
	}
	if offset := oupq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oupq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OrgUserPreferenceGroupBy is the group-by builder for OrgUserPreference entities.
type OrgUserPreferenceGroupBy struct {
	selector
	build *OrgUserPreferenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oupgb *OrgUserPreferenceGroupBy) Aggregate(fns ...AggregateFunc) *OrgUserPreferenceGroupBy {
	oupgb.fns = append(oupgb.fns, fns...)
	return oupgb
}

// Scan applies the selector query and scans the result into the given value.
func (oupgb *OrgUserPreferenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oupgb.build.ctx, "GroupBy")
	if err := oupgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgUserPreferenceQuery, *OrgUserPreferenceGroupBy](ctx, oupgb.build, oupgb, oupgb.build.inters, v)
}

func (oupgb *OrgUserPreferenceGroupBy) sqlScan(ctx context.Context, root *OrgUserPreferenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oupgb.fns))
	for _, fn := range oupgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oupgb.flds)+len(oupgb.fns))
		for _, f := range *oupgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oupgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oupgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrgUserPreferenceSelect is the builder for selecting fields of OrgUserPreference entities.
type OrgUserPreferenceSelect struct {
	*OrgUserPreferenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oups *OrgUserPreferenceSelect) Aggregate(fns ...AggregateFunc) *OrgUserPreferenceSelect {
	oups.fns = append(oups.fns, fns...)
	return oups
}

// Scan applies the selector query and scans the result into the given value.
func (oups *OrgUserPreferenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oups.ctx, "Select")
	if err := oups.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgUserPreferenceQuery, *OrgUserPreferenceSelect](ctx, oups.OrgUserPreferenceQuery, oups, oups.inters, v)
}

func (oups *OrgUserPreferenceSelect) sqlScan(ctx context.Context, root *OrgUserPreferenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oups.fns))
	for _, fn := range oups.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oups.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oups.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
