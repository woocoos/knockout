// Code generated by ent, DO NOT EDIT.

package useraddr

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/knockout/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldUserID, v))
}

// RegionID applies equality check predicate on the "region_id" field. It's identical to RegionIDEQ.
func RegionID(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldRegionID, v))
}

// Addr applies equality check predicate on the "addr" field. It's identical to AddrEQ.
func Addr(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldAddr, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldEmail, v))
}

// Fax applies equality check predicate on the "fax" field. It's identical to FaxEQ.
func Fax(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldFax, v))
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldZipCode, v))
}

// Tel applies equality check predicate on the "tel" field. It's identical to TelEQ.
func Tel(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldTel, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldMobile, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldName, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldIsDefault, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldUpdatedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldUserID))
}

// AddrTypeEQ applies the EQ predicate on the "addr_type" field.
func AddrTypeEQ(v AddrType) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldAddrType, v))
}

// AddrTypeNEQ applies the NEQ predicate on the "addr_type" field.
func AddrTypeNEQ(v AddrType) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldAddrType, v))
}

// AddrTypeIn applies the In predicate on the "addr_type" field.
func AddrTypeIn(vs ...AddrType) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldAddrType, vs...))
}

// AddrTypeNotIn applies the NotIn predicate on the "addr_type" field.
func AddrTypeNotIn(vs ...AddrType) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldAddrType, vs...))
}

// RegionIDEQ applies the EQ predicate on the "region_id" field.
func RegionIDEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldRegionID, v))
}

// RegionIDNEQ applies the NEQ predicate on the "region_id" field.
func RegionIDNEQ(v int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldRegionID, v))
}

// RegionIDIn applies the In predicate on the "region_id" field.
func RegionIDIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldRegionID, vs...))
}

// RegionIDNotIn applies the NotIn predicate on the "region_id" field.
func RegionIDNotIn(vs ...int) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldRegionID, vs...))
}

// RegionIDIsNil applies the IsNil predicate on the "region_id" field.
func RegionIDIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldRegionID))
}

// RegionIDNotNil applies the NotNil predicate on the "region_id" field.
func RegionIDNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldRegionID))
}

// AddrEQ applies the EQ predicate on the "addr" field.
func AddrEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldAddr, v))
}

// AddrNEQ applies the NEQ predicate on the "addr" field.
func AddrNEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldAddr, v))
}

// AddrIn applies the In predicate on the "addr" field.
func AddrIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldAddr, vs...))
}

// AddrNotIn applies the NotIn predicate on the "addr" field.
func AddrNotIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldAddr, vs...))
}

// AddrGT applies the GT predicate on the "addr" field.
func AddrGT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldAddr, v))
}

// AddrGTE applies the GTE predicate on the "addr" field.
func AddrGTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldAddr, v))
}

// AddrLT applies the LT predicate on the "addr" field.
func AddrLT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldAddr, v))
}

// AddrLTE applies the LTE predicate on the "addr" field.
func AddrLTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldAddr, v))
}

// AddrContains applies the Contains predicate on the "addr" field.
func AddrContains(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContains(FieldAddr, v))
}

// AddrHasPrefix applies the HasPrefix predicate on the "addr" field.
func AddrHasPrefix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasPrefix(FieldAddr, v))
}

// AddrHasSuffix applies the HasSuffix predicate on the "addr" field.
func AddrHasSuffix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasSuffix(FieldAddr, v))
}

// AddrIsNil applies the IsNil predicate on the "addr" field.
func AddrIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldAddr))
}

// AddrNotNil applies the NotNil predicate on the "addr" field.
func AddrNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldAddr))
}

// AddrEqualFold applies the EqualFold predicate on the "addr" field.
func AddrEqualFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEqualFold(FieldAddr, v))
}

// AddrContainsFold applies the ContainsFold predicate on the "addr" field.
func AddrContainsFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContainsFold(FieldAddr, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContainsFold(FieldEmail, v))
}

// FaxEQ applies the EQ predicate on the "fax" field.
func FaxEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldFax, v))
}

// FaxNEQ applies the NEQ predicate on the "fax" field.
func FaxNEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldFax, v))
}

// FaxIn applies the In predicate on the "fax" field.
func FaxIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldFax, vs...))
}

// FaxNotIn applies the NotIn predicate on the "fax" field.
func FaxNotIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldFax, vs...))
}

// FaxGT applies the GT predicate on the "fax" field.
func FaxGT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldFax, v))
}

// FaxGTE applies the GTE predicate on the "fax" field.
func FaxGTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldFax, v))
}

// FaxLT applies the LT predicate on the "fax" field.
func FaxLT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldFax, v))
}

// FaxLTE applies the LTE predicate on the "fax" field.
func FaxLTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldFax, v))
}

// FaxContains applies the Contains predicate on the "fax" field.
func FaxContains(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContains(FieldFax, v))
}

// FaxHasPrefix applies the HasPrefix predicate on the "fax" field.
func FaxHasPrefix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasPrefix(FieldFax, v))
}

// FaxHasSuffix applies the HasSuffix predicate on the "fax" field.
func FaxHasSuffix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasSuffix(FieldFax, v))
}

// FaxIsNil applies the IsNil predicate on the "fax" field.
func FaxIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldFax))
}

// FaxNotNil applies the NotNil predicate on the "fax" field.
func FaxNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldFax))
}

// FaxEqualFold applies the EqualFold predicate on the "fax" field.
func FaxEqualFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEqualFold(FieldFax, v))
}

// FaxContainsFold applies the ContainsFold predicate on the "fax" field.
func FaxContainsFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContainsFold(FieldFax, v))
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldZipCode, v))
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldZipCode, v))
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldZipCode, vs...))
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldZipCode, vs...))
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldZipCode, v))
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldZipCode, v))
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldZipCode, v))
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldZipCode, v))
}

// ZipCodeContains applies the Contains predicate on the "zip_code" field.
func ZipCodeContains(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContains(FieldZipCode, v))
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zip_code" field.
func ZipCodeHasPrefix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasPrefix(FieldZipCode, v))
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zip_code" field.
func ZipCodeHasSuffix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasSuffix(FieldZipCode, v))
}

// ZipCodeIsNil applies the IsNil predicate on the "zip_code" field.
func ZipCodeIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldZipCode))
}

// ZipCodeNotNil applies the NotNil predicate on the "zip_code" field.
func ZipCodeNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldZipCode))
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zip_code" field.
func ZipCodeEqualFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEqualFold(FieldZipCode, v))
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zip_code" field.
func ZipCodeContainsFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContainsFold(FieldZipCode, v))
}

// TelEQ applies the EQ predicate on the "tel" field.
func TelEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldTel, v))
}

// TelNEQ applies the NEQ predicate on the "tel" field.
func TelNEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldTel, v))
}

// TelIn applies the In predicate on the "tel" field.
func TelIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldTel, vs...))
}

// TelNotIn applies the NotIn predicate on the "tel" field.
func TelNotIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldTel, vs...))
}

// TelGT applies the GT predicate on the "tel" field.
func TelGT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldTel, v))
}

// TelGTE applies the GTE predicate on the "tel" field.
func TelGTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldTel, v))
}

// TelLT applies the LT predicate on the "tel" field.
func TelLT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldTel, v))
}

// TelLTE applies the LTE predicate on the "tel" field.
func TelLTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldTel, v))
}

// TelContains applies the Contains predicate on the "tel" field.
func TelContains(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContains(FieldTel, v))
}

// TelHasPrefix applies the HasPrefix predicate on the "tel" field.
func TelHasPrefix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasPrefix(FieldTel, v))
}

// TelHasSuffix applies the HasSuffix predicate on the "tel" field.
func TelHasSuffix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasSuffix(FieldTel, v))
}

// TelIsNil applies the IsNil predicate on the "tel" field.
func TelIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldTel))
}

// TelNotNil applies the NotNil predicate on the "tel" field.
func TelNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldTel))
}

// TelEqualFold applies the EqualFold predicate on the "tel" field.
func TelEqualFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEqualFold(FieldTel, v))
}

// TelContainsFold applies the ContainsFold predicate on the "tel" field.
func TelContainsFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContainsFold(FieldTel, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "mobile" field.
func MobileIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "mobile" field.
func MobileNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContainsFold(FieldMobile, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldContainsFold(FieldName, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.UserAddr {
	return predicate.UserAddr(sql.FieldNEQ(FieldIsDefault, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserAddr {
	return predicate.UserAddr(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserAddr {
	return predicate.UserAddr(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRegion applies the HasEdge predicate on the "region" edge.
func HasRegion() predicate.UserAddr {
	return predicate.UserAddr(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RegionTable, RegionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegionWith applies the HasEdge predicate on the "region" edge with a given conditions (other predicates).
func HasRegionWith(preds ...predicate.Region) predicate.UserAddr {
	return predicate.UserAddr(func(s *sql.Selector) {
		step := newRegionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserAddr) predicate.UserAddr {
	return predicate.UserAddr(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserAddr) predicate.UserAddr {
	return predicate.UserAddr(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAddr) predicate.UserAddr {
	return predicate.UserAddr(sql.NotPredicates(p))
}
