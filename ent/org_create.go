// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgapp"
	"github.com/woocoos/knockout/ent/orgpolicy"
	"github.com/woocoos/knockout/ent/orgrole"
	"github.com/woocoos/knockout/ent/orguser"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/user"
)

// OrgCreate is the builder for creating a Org entity.
type OrgCreate struct {
	config
	mutation *OrgMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (oc *OrgCreate) SetCreatedBy(i int) *OrgCreate {
	oc.mutation.SetCreatedBy(i)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrgCreate) SetCreatedAt(t time.Time) *OrgCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrgCreate) SetNillableCreatedAt(t *time.Time) *OrgCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedBy sets the "updated_by" field.
func (oc *OrgCreate) SetUpdatedBy(i int) *OrgCreate {
	oc.mutation.SetUpdatedBy(i)
	return oc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oc *OrgCreate) SetNillableUpdatedBy(i *int) *OrgCreate {
	if i != nil {
		oc.SetUpdatedBy(*i)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrgCreate) SetUpdatedAt(t time.Time) *OrgCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrgCreate) SetNillableUpdatedAt(t *time.Time) *OrgCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OrgCreate) SetDeletedAt(t time.Time) *OrgCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OrgCreate) SetNillableDeletedAt(t *time.Time) *OrgCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetOwnerID sets the "owner_id" field.
func (oc *OrgCreate) SetOwnerID(i int) *OrgCreate {
	oc.mutation.SetOwnerID(i)
	return oc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (oc *OrgCreate) SetNillableOwnerID(i *int) *OrgCreate {
	if i != nil {
		oc.SetOwnerID(*i)
	}
	return oc
}

// SetKind sets the "kind" field.
func (oc *OrgCreate) SetKind(o org.Kind) *OrgCreate {
	oc.mutation.SetKind(o)
	return oc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (oc *OrgCreate) SetNillableKind(o *org.Kind) *OrgCreate {
	if o != nil {
		oc.SetKind(*o)
	}
	return oc
}

// SetParentID sets the "parent_id" field.
func (oc *OrgCreate) SetParentID(i int) *OrgCreate {
	oc.mutation.SetParentID(i)
	return oc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (oc *OrgCreate) SetNillableParentID(i *int) *OrgCreate {
	if i != nil {
		oc.SetParentID(*i)
	}
	return oc
}

// SetDomain sets the "domain" field.
func (oc *OrgCreate) SetDomain(s string) *OrgCreate {
	oc.mutation.SetDomain(s)
	return oc
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (oc *OrgCreate) SetNillableDomain(s *string) *OrgCreate {
	if s != nil {
		oc.SetDomain(*s)
	}
	return oc
}

// SetCode sets the "code" field.
func (oc *OrgCreate) SetCode(s string) *OrgCreate {
	oc.mutation.SetCode(s)
	return oc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oc *OrgCreate) SetNillableCode(s *string) *OrgCreate {
	if s != nil {
		oc.SetCode(*s)
	}
	return oc
}

// SetName sets the "name" field.
func (oc *OrgCreate) SetName(s string) *OrgCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetProfile sets the "profile" field.
func (oc *OrgCreate) SetProfile(s string) *OrgCreate {
	oc.mutation.SetProfile(s)
	return oc
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (oc *OrgCreate) SetNillableProfile(s *string) *OrgCreate {
	if s != nil {
		oc.SetProfile(*s)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrgCreate) SetStatus(ts typex.SimpleStatus) *OrgCreate {
	oc.mutation.SetStatus(ts)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrgCreate) SetNillableStatus(ts *typex.SimpleStatus) *OrgCreate {
	if ts != nil {
		oc.SetStatus(*ts)
	}
	return oc
}

// SetPath sets the "path" field.
func (oc *OrgCreate) SetPath(s string) *OrgCreate {
	oc.mutation.SetPath(s)
	return oc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (oc *OrgCreate) SetNillablePath(s *string) *OrgCreate {
	if s != nil {
		oc.SetPath(*s)
	}
	return oc
}

// SetDisplaySort sets the "display_sort" field.
func (oc *OrgCreate) SetDisplaySort(i int32) *OrgCreate {
	oc.mutation.SetDisplaySort(i)
	return oc
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (oc *OrgCreate) SetNillableDisplaySort(i *int32) *OrgCreate {
	if i != nil {
		oc.SetDisplaySort(*i)
	}
	return oc
}

// SetCountryCode sets the "country_code" field.
func (oc *OrgCreate) SetCountryCode(s string) *OrgCreate {
	oc.mutation.SetCountryCode(s)
	return oc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (oc *OrgCreate) SetNillableCountryCode(s *string) *OrgCreate {
	if s != nil {
		oc.SetCountryCode(*s)
	}
	return oc
}

// SetTimezone sets the "timezone" field.
func (oc *OrgCreate) SetTimezone(s string) *OrgCreate {
	oc.mutation.SetTimezone(s)
	return oc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (oc *OrgCreate) SetNillableTimezone(s *string) *OrgCreate {
	if s != nil {
		oc.SetTimezone(*s)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrgCreate) SetID(i int) *OrgCreate {
	oc.mutation.SetID(i)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrgCreate) SetNillableID(i *int) *OrgCreate {
	if i != nil {
		oc.SetID(*i)
	}
	return oc
}

// SetParent sets the "parent" edge to the Org entity.
func (oc *OrgCreate) SetParent(o *Org) *OrgCreate {
	return oc.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Org entity by IDs.
func (oc *OrgCreate) AddChildIDs(ids ...int) *OrgCreate {
	oc.mutation.AddChildIDs(ids...)
	return oc
}

// AddChildren adds the "children" edges to the Org entity.
func (oc *OrgCreate) AddChildren(o ...*Org) *OrgCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddChildIDs(ids...)
}

// SetOwner sets the "owner" edge to the User entity.
func (oc *OrgCreate) SetOwner(u *User) *OrgCreate {
	return oc.SetOwnerID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (oc *OrgCreate) AddUserIDs(ids ...int) *OrgCreate {
	oc.mutation.AddUserIDs(ids...)
	return oc
}

// AddUsers adds the "users" edges to the User entity.
func (oc *OrgCreate) AddUsers(u ...*User) *OrgCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserIDs(ids...)
}

// AddRolesAndGroupIDs adds the "roles_and_groups" edge to the OrgRole entity by IDs.
func (oc *OrgCreate) AddRolesAndGroupIDs(ids ...int) *OrgCreate {
	oc.mutation.AddRolesAndGroupIDs(ids...)
	return oc
}

// AddRolesAndGroups adds the "roles_and_groups" edges to the OrgRole entity.
func (oc *OrgCreate) AddRolesAndGroups(o ...*OrgRole) *OrgCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddRolesAndGroupIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (oc *OrgCreate) AddPermissionIDs(ids ...int) *OrgCreate {
	oc.mutation.AddPermissionIDs(ids...)
	return oc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (oc *OrgCreate) AddPermissions(p ...*Permission) *OrgCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddPermissionIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the OrgPolicy entity by IDs.
func (oc *OrgCreate) AddPolicyIDs(ids ...int) *OrgCreate {
	oc.mutation.AddPolicyIDs(ids...)
	return oc
}

// AddPolicies adds the "policies" edges to the OrgPolicy entity.
func (oc *OrgCreate) AddPolicies(o ...*OrgPolicy) *OrgCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddPolicyIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the App entity by IDs.
func (oc *OrgCreate) AddAppIDs(ids ...int) *OrgCreate {
	oc.mutation.AddAppIDs(ids...)
	return oc
}

// AddApps adds the "apps" edges to the App entity.
func (oc *OrgCreate) AddApps(a ...*App) *OrgCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oc.AddAppIDs(ids...)
}

// AddOrgUserIDs adds the "org_user" edge to the OrgUser entity by IDs.
func (oc *OrgCreate) AddOrgUserIDs(ids ...int) *OrgCreate {
	oc.mutation.AddOrgUserIDs(ids...)
	return oc
}

// AddOrgUser adds the "org_user" edges to the OrgUser entity.
func (oc *OrgCreate) AddOrgUser(o ...*OrgUser) *OrgCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrgUserIDs(ids...)
}

// AddOrgAppIDs adds the "org_app" edge to the OrgApp entity by IDs.
func (oc *OrgCreate) AddOrgAppIDs(ids ...int) *OrgCreate {
	oc.mutation.AddOrgAppIDs(ids...)
	return oc
}

// AddOrgApp adds the "org_app" edges to the OrgApp entity.
func (oc *OrgCreate) AddOrgApp(o ...*OrgApp) *OrgCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrgAppIDs(ids...)
}

// Mutation returns the OrgMutation object of the builder.
func (oc *OrgCreate) Mutation() *OrgMutation {
	return oc.mutation
}

// Save creates the Org in the database.
func (oc *OrgCreate) Save(ctx context.Context) (*Org, error) {
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrgCreate) SaveX(ctx context.Context) *Org {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrgCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrgCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrgCreate) defaults() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		if org.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized org.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := org.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.Kind(); !ok {
		v := org.DefaultKind
		oc.mutation.SetKind(v)
	}
	if _, ok := oc.mutation.ParentID(); !ok {
		v := org.DefaultParentID
		oc.mutation.SetParentID(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := org.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		if org.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized org.DefaultID (forgotten import ent/runtime?)")
		}
		v := org.DefaultID()
		oc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrgCreate) check() error {
	if _, ok := oc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Org.created_by"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Org.created_at"`)}
	}
	if _, ok := oc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Org.kind"`)}
	}
	if v, ok := oc.mutation.Kind(); ok {
		if err := org.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Org.kind": %w`, err)}
		}
	}
	if _, ok := oc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "Org.parent_id"`)}
	}
	if v, ok := oc.mutation.Domain(); ok {
		if err := org.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Org.domain": %w`, err)}
		}
	}
	if v, ok := oc.mutation.Code(); ok {
		if err := org.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Org.code": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Org.name"`)}
	}
	if v, ok := oc.mutation.Name(); ok {
		if err := org.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Org.name": %w`, err)}
		}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := org.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Org.status": %w`, err)}
		}
	}
	if v, ok := oc.mutation.CountryCode(); ok {
		if err := org.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`ent: validator failed for field "Org.country_code": %w`, err)}
		}
	}
	if v, ok := oc.mutation.Timezone(); ok {
		if err := org.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "Org.timezone": %w`, err)}
		}
	}
	if _, ok := oc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent", err: errors.New(`ent: missing required edge "Org.parent"`)}
	}
	return nil
}

func (oc *OrgCreate) sqlSave(ctx context.Context) (*Org, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrgCreate) createSpec() (*Org, *sqlgraph.CreateSpec) {
	var (
		_node = &Org{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(org.Table, sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.CreatedBy(); ok {
		_spec.SetField(org.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(org.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedBy(); ok {
		_spec.SetField(org.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(org.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.SetField(org.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := oc.mutation.Kind(); ok {
		_spec.SetField(org.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := oc.mutation.Domain(); ok {
		_spec.SetField(org.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := oc.mutation.Code(); ok {
		_spec.SetField(org.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(org.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.Profile(); ok {
		_spec.SetField(org.FieldProfile, field.TypeString, value)
		_node.Profile = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(org.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.Path(); ok {
		_spec.SetField(org.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := oc.mutation.DisplaySort(); ok {
		_spec.SetField(org.FieldDisplaySort, field.TypeInt32, value)
		_node.DisplaySort = value
	}
	if value, ok := oc.mutation.CountryCode(); ok {
		_spec.SetField(org.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := oc.mutation.Timezone(); ok {
		_spec.SetField(org.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if nodes := oc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   org.ParentTable,
			Columns: []string{org.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.ChildrenTable,
			Columns: []string{org.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   org.OwnerTable,
			Columns: []string{org.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: org.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: oc.config, mutation: newOrgUserMutation(oc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.RolesAndGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.RolesAndGroupsTable,
			Columns: []string{org.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PermissionsTable,
			Columns: []string{org.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PoliciesTable,
			Columns: []string{org.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgpolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.AppsTable,
			Columns: org.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: oc.config, mutation: newOrgAppMutation(oc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrgUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgUserTable,
			Columns: []string{org.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrgAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgAppTable,
			Columns: []string{org.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Org.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (oc *OrgCreate) OnConflict(opts ...sql.ConflictOption) *OrgUpsertOne {
	oc.conflict = opts
	return &OrgUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrgCreate) OnConflictColumns(columns ...string) *OrgUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrgUpsertOne{
		create: oc,
	}
}

type (
	// OrgUpsertOne is the builder for "upsert"-ing
	//  one Org node.
	OrgUpsertOne struct {
		create *OrgCreate
	}

	// OrgUpsert is the "OnConflict" setter.
	OrgUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgUpsert) SetUpdatedBy(v int) *OrgUpsert {
	u.Set(org.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgUpsert) UpdateUpdatedBy() *OrgUpsert {
	u.SetExcluded(org.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgUpsert) AddUpdatedBy(v int) *OrgUpsert {
	u.Add(org.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgUpsert) ClearUpdatedBy() *OrgUpsert {
	u.SetNull(org.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgUpsert) SetUpdatedAt(v time.Time) *OrgUpsert {
	u.Set(org.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgUpsert) UpdateUpdatedAt() *OrgUpsert {
	u.SetExcluded(org.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgUpsert) ClearUpdatedAt() *OrgUpsert {
	u.SetNull(org.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgUpsert) SetDeletedAt(v time.Time) *OrgUpsert {
	u.Set(org.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgUpsert) UpdateDeletedAt() *OrgUpsert {
	u.SetExcluded(org.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgUpsert) ClearDeletedAt() *OrgUpsert {
	u.SetNull(org.FieldDeletedAt)
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *OrgUpsert) SetOwnerID(v int) *OrgUpsert {
	u.Set(org.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrgUpsert) UpdateOwnerID() *OrgUpsert {
	u.SetExcluded(org.FieldOwnerID)
	return u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrgUpsert) ClearOwnerID() *OrgUpsert {
	u.SetNull(org.FieldOwnerID)
	return u
}

// SetKind sets the "kind" field.
func (u *OrgUpsert) SetKind(v org.Kind) *OrgUpsert {
	u.Set(org.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OrgUpsert) UpdateKind() *OrgUpsert {
	u.SetExcluded(org.FieldKind)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *OrgUpsert) SetParentID(v int) *OrgUpsert {
	u.Set(org.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrgUpsert) UpdateParentID() *OrgUpsert {
	u.SetExcluded(org.FieldParentID)
	return u
}

// SetDomain sets the "domain" field.
func (u *OrgUpsert) SetDomain(v string) *OrgUpsert {
	u.Set(org.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *OrgUpsert) UpdateDomain() *OrgUpsert {
	u.SetExcluded(org.FieldDomain)
	return u
}

// ClearDomain clears the value of the "domain" field.
func (u *OrgUpsert) ClearDomain() *OrgUpsert {
	u.SetNull(org.FieldDomain)
	return u
}

// SetCode sets the "code" field.
func (u *OrgUpsert) SetCode(v string) *OrgUpsert {
	u.Set(org.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgUpsert) UpdateCode() *OrgUpsert {
	u.SetExcluded(org.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *OrgUpsert) ClearCode() *OrgUpsert {
	u.SetNull(org.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *OrgUpsert) SetName(v string) *OrgUpsert {
	u.Set(org.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUpsert) UpdateName() *OrgUpsert {
	u.SetExcluded(org.FieldName)
	return u
}

// SetProfile sets the "profile" field.
func (u *OrgUpsert) SetProfile(v string) *OrgUpsert {
	u.Set(org.FieldProfile, v)
	return u
}

// UpdateProfile sets the "profile" field to the value that was provided on create.
func (u *OrgUpsert) UpdateProfile() *OrgUpsert {
	u.SetExcluded(org.FieldProfile)
	return u
}

// ClearProfile clears the value of the "profile" field.
func (u *OrgUpsert) ClearProfile() *OrgUpsert {
	u.SetNull(org.FieldProfile)
	return u
}

// SetStatus sets the "status" field.
func (u *OrgUpsert) SetStatus(v typex.SimpleStatus) *OrgUpsert {
	u.Set(org.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrgUpsert) UpdateStatus() *OrgUpsert {
	u.SetExcluded(org.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *OrgUpsert) ClearStatus() *OrgUpsert {
	u.SetNull(org.FieldStatus)
	return u
}

// SetPath sets the "path" field.
func (u *OrgUpsert) SetPath(v string) *OrgUpsert {
	u.Set(org.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *OrgUpsert) UpdatePath() *OrgUpsert {
	u.SetExcluded(org.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *OrgUpsert) ClearPath() *OrgUpsert {
	u.SetNull(org.FieldPath)
	return u
}

// SetDisplaySort sets the "display_sort" field.
func (u *OrgUpsert) SetDisplaySort(v int32) *OrgUpsert {
	u.Set(org.FieldDisplaySort, v)
	return u
}

// UpdateDisplaySort sets the "display_sort" field to the value that was provided on create.
func (u *OrgUpsert) UpdateDisplaySort() *OrgUpsert {
	u.SetExcluded(org.FieldDisplaySort)
	return u
}

// AddDisplaySort adds v to the "display_sort" field.
func (u *OrgUpsert) AddDisplaySort(v int32) *OrgUpsert {
	u.Add(org.FieldDisplaySort, v)
	return u
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (u *OrgUpsert) ClearDisplaySort() *OrgUpsert {
	u.SetNull(org.FieldDisplaySort)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *OrgUpsert) SetCountryCode(v string) *OrgUpsert {
	u.Set(org.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *OrgUpsert) UpdateCountryCode() *OrgUpsert {
	u.SetExcluded(org.FieldCountryCode)
	return u
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *OrgUpsert) ClearCountryCode() *OrgUpsert {
	u.SetNull(org.FieldCountryCode)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *OrgUpsert) SetTimezone(v string) *OrgUpsert {
	u.Set(org.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OrgUpsert) UpdateTimezone() *OrgUpsert {
	u.SetExcluded(org.FieldTimezone)
	return u
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OrgUpsert) ClearTimezone() *OrgUpsert {
	u.SetNull(org.FieldTimezone)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(org.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgUpsertOne) UpdateNewValues() *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(org.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(org.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(org.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Org.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgUpsertOne) Ignore() *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUpsertOne) DoNothing() *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgCreate.OnConflict
// documentation for more info.
func (u *OrgUpsertOne) Update(set func(*OrgUpsert)) *OrgUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgUpsertOne) SetUpdatedBy(v int) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgUpsertOne) AddUpdatedBy(v int) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateUpdatedBy() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgUpsertOne) ClearUpdatedBy() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgUpsertOne) SetUpdatedAt(v time.Time) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateUpdatedAt() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgUpsertOne) ClearUpdatedAt() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgUpsertOne) SetDeletedAt(v time.Time) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateDeletedAt() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgUpsertOne) ClearDeletedAt() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *OrgUpsertOne) SetOwnerID(v int) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateOwnerID() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrgUpsertOne) ClearOwnerID() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearOwnerID()
	})
}

// SetKind sets the "kind" field.
func (u *OrgUpsertOne) SetKind(v org.Kind) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateKind() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateKind()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrgUpsertOne) SetParentID(v int) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateParentID() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateParentID()
	})
}

// SetDomain sets the "domain" field.
func (u *OrgUpsertOne) SetDomain(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateDomain() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *OrgUpsertOne) ClearDomain() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearDomain()
	})
}

// SetCode sets the "code" field.
func (u *OrgUpsertOne) SetCode(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateCode() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgUpsertOne) ClearCode() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearCode()
	})
}

// SetName sets the "name" field.
func (u *OrgUpsertOne) SetName(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateName() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateName()
	})
}

// SetProfile sets the "profile" field.
func (u *OrgUpsertOne) SetProfile(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetProfile(v)
	})
}

// UpdateProfile sets the "profile" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateProfile() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateProfile()
	})
}

// ClearProfile clears the value of the "profile" field.
func (u *OrgUpsertOne) ClearProfile() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearProfile()
	})
}

// SetStatus sets the "status" field.
func (u *OrgUpsertOne) SetStatus(v typex.SimpleStatus) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateStatus() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrgUpsertOne) ClearStatus() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearStatus()
	})
}

// SetPath sets the "path" field.
func (u *OrgUpsertOne) SetPath(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdatePath() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *OrgUpsertOne) ClearPath() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearPath()
	})
}

// SetDisplaySort sets the "display_sort" field.
func (u *OrgUpsertOne) SetDisplaySort(v int32) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetDisplaySort(v)
	})
}

// AddDisplaySort adds v to the "display_sort" field.
func (u *OrgUpsertOne) AddDisplaySort(v int32) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.AddDisplaySort(v)
	})
}

// UpdateDisplaySort sets the "display_sort" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateDisplaySort() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDisplaySort()
	})
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (u *OrgUpsertOne) ClearDisplaySort() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearDisplaySort()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *OrgUpsertOne) SetCountryCode(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateCountryCode() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *OrgUpsertOne) ClearCountryCode() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearCountryCode()
	})
}

// SetTimezone sets the "timezone" field.
func (u *OrgUpsertOne) SetTimezone(v string) *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OrgUpsertOne) UpdateTimezone() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OrgUpsertOne) ClearTimezone() *OrgUpsertOne {
	return u.Update(func(s *OrgUpsert) {
		s.ClearTimezone()
	})
}

// Exec executes the query.
func (u *OrgUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgCreateBulk is the builder for creating many Org entities in bulk.
type OrgCreateBulk struct {
	config
	err      error
	builders []*OrgCreate
	conflict []sql.ConflictOption
}

// Save creates the Org entities in the database.
func (ocb *OrgCreateBulk) Save(ctx context.Context) ([]*Org, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Org, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrgCreateBulk) SaveX(ctx context.Context) []*Org {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrgCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrgCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Org.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrgCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgUpsertBulk {
	ocb.conflict = opts
	return &OrgUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrgCreateBulk) OnConflictColumns(columns ...string) *OrgUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrgUpsertBulk{
		create: ocb,
	}
}

// OrgUpsertBulk is the builder for "upsert"-ing
// a bulk of Org nodes.
type OrgUpsertBulk struct {
	create *OrgCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(org.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgUpsertBulk) UpdateNewValues() *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(org.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(org.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(org.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Org.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgUpsertBulk) Ignore() *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgUpsertBulk) DoNothing() *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgCreateBulk.OnConflict
// documentation for more info.
func (u *OrgUpsertBulk) Update(set func(*OrgUpsert)) *OrgUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgUpsertBulk) SetUpdatedBy(v int) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgUpsertBulk) AddUpdatedBy(v int) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateUpdatedBy() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgUpsertBulk) ClearUpdatedBy() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgUpsertBulk) SetUpdatedAt(v time.Time) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateUpdatedAt() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgUpsertBulk) ClearUpdatedAt() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgUpsertBulk) SetDeletedAt(v time.Time) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateDeletedAt() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgUpsertBulk) ClearDeletedAt() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearDeletedAt()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *OrgUpsertBulk) SetOwnerID(v int) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateOwnerID() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrgUpsertBulk) ClearOwnerID() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearOwnerID()
	})
}

// SetKind sets the "kind" field.
func (u *OrgUpsertBulk) SetKind(v org.Kind) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateKind() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateKind()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrgUpsertBulk) SetParentID(v int) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateParentID() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateParentID()
	})
}

// SetDomain sets the "domain" field.
func (u *OrgUpsertBulk) SetDomain(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateDomain() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *OrgUpsertBulk) ClearDomain() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearDomain()
	})
}

// SetCode sets the "code" field.
func (u *OrgUpsertBulk) SetCode(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateCode() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgUpsertBulk) ClearCode() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearCode()
	})
}

// SetName sets the "name" field.
func (u *OrgUpsertBulk) SetName(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateName() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateName()
	})
}

// SetProfile sets the "profile" field.
func (u *OrgUpsertBulk) SetProfile(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetProfile(v)
	})
}

// UpdateProfile sets the "profile" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateProfile() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateProfile()
	})
}

// ClearProfile clears the value of the "profile" field.
func (u *OrgUpsertBulk) ClearProfile() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearProfile()
	})
}

// SetStatus sets the "status" field.
func (u *OrgUpsertBulk) SetStatus(v typex.SimpleStatus) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateStatus() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OrgUpsertBulk) ClearStatus() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearStatus()
	})
}

// SetPath sets the "path" field.
func (u *OrgUpsertBulk) SetPath(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdatePath() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *OrgUpsertBulk) ClearPath() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearPath()
	})
}

// SetDisplaySort sets the "display_sort" field.
func (u *OrgUpsertBulk) SetDisplaySort(v int32) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetDisplaySort(v)
	})
}

// AddDisplaySort adds v to the "display_sort" field.
func (u *OrgUpsertBulk) AddDisplaySort(v int32) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.AddDisplaySort(v)
	})
}

// UpdateDisplaySort sets the "display_sort" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateDisplaySort() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateDisplaySort()
	})
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (u *OrgUpsertBulk) ClearDisplaySort() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearDisplaySort()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *OrgUpsertBulk) SetCountryCode(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateCountryCode() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateCountryCode()
	})
}

// ClearCountryCode clears the value of the "country_code" field.
func (u *OrgUpsertBulk) ClearCountryCode() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearCountryCode()
	})
}

// SetTimezone sets the "timezone" field.
func (u *OrgUpsertBulk) SetTimezone(v string) *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *OrgUpsertBulk) UpdateTimezone() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.UpdateTimezone()
	})
}

// ClearTimezone clears the value of the "timezone" field.
func (u *OrgUpsertBulk) ClearTimezone() *OrgUpsertBulk {
	return u.Update(func(s *OrgUpsert) {
		s.ClearTimezone()
	})
}

// Exec executes the query.
func (u *OrgUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
