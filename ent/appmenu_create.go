// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
)

// AppMenuCreate is the builder for creating a AppMenu entity.
type AppMenuCreate struct {
	config
	mutation *AppMenuMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (amc *AppMenuCreate) SetCreatedBy(i int) *AppMenuCreate {
	amc.mutation.SetCreatedBy(i)
	return amc
}

// SetCreatedAt sets the "created_at" field.
func (amc *AppMenuCreate) SetCreatedAt(t time.Time) *AppMenuCreate {
	amc.mutation.SetCreatedAt(t)
	return amc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableCreatedAt(t *time.Time) *AppMenuCreate {
	if t != nil {
		amc.SetCreatedAt(*t)
	}
	return amc
}

// SetUpdatedBy sets the "updated_by" field.
func (amc *AppMenuCreate) SetUpdatedBy(i int) *AppMenuCreate {
	amc.mutation.SetUpdatedBy(i)
	return amc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableUpdatedBy(i *int) *AppMenuCreate {
	if i != nil {
		amc.SetUpdatedBy(*i)
	}
	return amc
}

// SetUpdatedAt sets the "updated_at" field.
func (amc *AppMenuCreate) SetUpdatedAt(t time.Time) *AppMenuCreate {
	amc.mutation.SetUpdatedAt(t)
	return amc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableUpdatedAt(t *time.Time) *AppMenuCreate {
	if t != nil {
		amc.SetUpdatedAt(*t)
	}
	return amc
}

// SetAppID sets the "app_id" field.
func (amc *AppMenuCreate) SetAppID(i int) *AppMenuCreate {
	amc.mutation.SetAppID(i)
	return amc
}

// SetParentID sets the "parent_id" field.
func (amc *AppMenuCreate) SetParentID(i int) *AppMenuCreate {
	amc.mutation.SetParentID(i)
	return amc
}

// SetKind sets the "kind" field.
func (amc *AppMenuCreate) SetKind(a appmenu.Kind) *AppMenuCreate {
	amc.mutation.SetKind(a)
	return amc
}

// SetName sets the "name" field.
func (amc *AppMenuCreate) SetName(s string) *AppMenuCreate {
	amc.mutation.SetName(s)
	return amc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableName(s *string) *AppMenuCreate {
	if s != nil {
		amc.SetName(*s)
	}
	return amc
}

// SetActionID sets the "action_id" field.
func (amc *AppMenuCreate) SetActionID(i int) *AppMenuCreate {
	amc.mutation.SetActionID(i)
	return amc
}

// SetNillableActionID sets the "action_id" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableActionID(i *int) *AppMenuCreate {
	if i != nil {
		amc.SetActionID(*i)
	}
	return amc
}

// SetComments sets the "comments" field.
func (amc *AppMenuCreate) SetComments(s string) *AppMenuCreate {
	amc.mutation.SetComments(s)
	return amc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableComments(s *string) *AppMenuCreate {
	if s != nil {
		amc.SetComments(*s)
	}
	return amc
}

// SetDisplaySort sets the "display_sort" field.
func (amc *AppMenuCreate) SetDisplaySort(i int32) *AppMenuCreate {
	amc.mutation.SetDisplaySort(i)
	return amc
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableDisplaySort(i *int32) *AppMenuCreate {
	if i != nil {
		amc.SetDisplaySort(*i)
	}
	return amc
}

// SetID sets the "id" field.
func (amc *AppMenuCreate) SetID(i int) *AppMenuCreate {
	amc.mutation.SetID(i)
	return amc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amc *AppMenuCreate) SetNillableID(i *int) *AppMenuCreate {
	if i != nil {
		amc.SetID(*i)
	}
	return amc
}

// SetApp sets the "app" edge to the App entity.
func (amc *AppMenuCreate) SetApp(a *App) *AppMenuCreate {
	return amc.SetAppID(a.ID)
}

// SetAction sets the "action" edge to the AppAction entity.
func (amc *AppMenuCreate) SetAction(a *AppAction) *AppMenuCreate {
	return amc.SetActionID(a.ID)
}

// Mutation returns the AppMenuMutation object of the builder.
func (amc *AppMenuCreate) Mutation() *AppMenuMutation {
	return amc.mutation
}

// Save creates the AppMenu in the database.
func (amc *AppMenuCreate) Save(ctx context.Context) (*AppMenu, error) {
	if err := amc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*AppMenu, AppMenuMutation](ctx, amc.sqlSave, amc.mutation, amc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AppMenuCreate) SaveX(ctx context.Context) *AppMenu {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AppMenuCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AppMenuCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AppMenuCreate) defaults() error {
	if _, ok := amc.mutation.CreatedAt(); !ok {
		if appmenu.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appmenu.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appmenu.DefaultCreatedAt()
		amc.mutation.SetCreatedAt(v)
	}
	if _, ok := amc.mutation.ID(); !ok {
		if appmenu.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized appmenu.DefaultID (forgotten import ent/runtime?)")
		}
		v := appmenu.DefaultID()
		amc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (amc *AppMenuCreate) check() error {
	if _, ok := amc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AppMenu.created_by"`)}
	}
	if _, ok := amc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppMenu.created_at"`)}
	}
	if _, ok := amc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppMenu.app_id"`)}
	}
	if _, ok := amc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "AppMenu.parent_id"`)}
	}
	if _, ok := amc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "AppMenu.kind"`)}
	}
	if v, ok := amc.mutation.Kind(); ok {
		if err := appmenu.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "AppMenu.kind": %w`, err)}
		}
	}
	if v, ok := amc.mutation.Name(); ok {
		if err := appmenu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppMenu.name": %w`, err)}
		}
	}
	if _, ok := amc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "AppMenu.app"`)}
	}
	return nil
}

func (amc *AppMenuCreate) sqlSave(ctx context.Context) (*AppMenu, error) {
	if err := amc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	amc.mutation.id = &_node.ID
	amc.mutation.done = true
	return _node, nil
}

func (amc *AppMenuCreate) createSpec() (*AppMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &AppMenu{config: amc.config}
		_spec = sqlgraph.NewCreateSpec(appmenu.Table, sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt))
	)
	if id, ok := amc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amc.mutation.CreatedBy(); ok {
		_spec.SetField(appmenu.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := amc.mutation.CreatedAt(); ok {
		_spec.SetField(appmenu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := amc.mutation.UpdatedBy(); ok {
		_spec.SetField(appmenu.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := amc.mutation.UpdatedAt(); ok {
		_spec.SetField(appmenu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := amc.mutation.ParentID(); ok {
		_spec.SetField(appmenu.FieldParentID, field.TypeInt, value)
		_node.ParentID = value
	}
	if value, ok := amc.mutation.Kind(); ok {
		_spec.SetField(appmenu.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := amc.mutation.Name(); ok {
		_spec.SetField(appmenu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := amc.mutation.Comments(); ok {
		_spec.SetField(appmenu.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := amc.mutation.DisplaySort(); ok {
		_spec.SetField(appmenu.FieldDisplaySort, field.TypeInt32, value)
		_node.DisplaySort = value
	}
	if nodes := amc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appmenu.AppTable,
			Columns: []string{appmenu.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amc.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appmenu.ActionTable,
			Columns: []string{appmenu.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppMenuCreateBulk is the builder for creating many AppMenu entities in bulk.
type AppMenuCreateBulk struct {
	config
	builders []*AppMenuCreate
}

// Save creates the AppMenu entities in the database.
func (amcb *AppMenuCreateBulk) Save(ctx context.Context) ([]*AppMenu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AppMenu, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AppMenuCreateBulk) SaveX(ctx context.Context) []*AppMenu {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AppMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AppMenuCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}
