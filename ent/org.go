// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/user"
)

// Org is the model entity for the Org schema.
type Org struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 管理账户ID,如果设置则该组织将升级为根组织
	OwnerID *int `json:"owner_id,omitempty"`
	// 分类: 根节点,组织节点
	Kind org.Kind `json:"kind,omitempty"`
	// 父级ID,0为根组织.
	ParentID int `json:"parent_id,omitempty"`
	// 默认域名
	Domain string `json:"domain,omitempty"`
	// 系统代码
	Code string `json:"code,omitempty"`
	// 组织名称
	Name string `json:"name,omitempty"`
	// 简介
	Profile string `json:"profile,omitempty"`
	// 状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// 路径编码
	Path string `json:"path,omitempty"`
	// DisplaySort holds the value of the "display_sort" field.
	DisplaySort int32 `json:"display_sort,omitempty"`
	// 国家或地区2字码
	CountryCode string `json:"country_code,omitempty"`
	// 时区
	Timezone string `json:"timezone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgQuery when eager-loading is set.
	Edges        OrgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrgEdges holds the relations/edges for other nodes in the graph.
type OrgEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Org `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Org `json:"children,omitempty"`
	// 管理账户
	Owner *User `json:"owner,omitempty"`
	// 组织下用户
	Users []*User `json:"users,omitempty"`
	// 组织下角色及用户组.
	RolesAndGroups []*OrgRole `json:"roles_and_groups,omitempty"`
	// 组织授权信息
	Permissions []*Permission `json:"permissions,omitempty"`
	// 组织下权限策略
	Policies []*OrgPolicy `json:"policies,omitempty"`
	// 组织下应用
	Apps []*App `json:"apps,omitempty"`
	// OrgUser holds the value of the org_user edge.
	OrgUser []*OrgUser `json:"org_user,omitempty"`
	// OrgApp holds the value of the org_app edge.
	OrgApp []*OrgApp `json:"org_app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedChildren       map[string][]*Org
	namedUsers          map[string][]*User
	namedRolesAndGroups map[string][]*OrgRole
	namedPermissions    map[string][]*Permission
	namedPolicies       map[string][]*OrgPolicy
	namedApps           map[string][]*App
	namedOrgUser        map[string][]*OrgUser
	namedOrgApp         map[string][]*OrgApp
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgEdges) ParentOrErr() (*Org, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: org.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) ChildrenOrErr() ([]*Org, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// RolesAndGroupsOrErr returns the RolesAndGroups value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) RolesAndGroupsOrErr() ([]*OrgRole, error) {
	if e.loadedTypes[4] {
		return e.RolesAndGroups, nil
	}
	return nil, &NotLoadedError{edge: "roles_and_groups"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[5] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// PoliciesOrErr returns the Policies value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) PoliciesOrErr() ([]*OrgPolicy, error) {
	if e.loadedTypes[6] {
		return e.Policies, nil
	}
	return nil, &NotLoadedError{edge: "policies"}
}

// AppsOrErr returns the Apps value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) AppsOrErr() ([]*App, error) {
	if e.loadedTypes[7] {
		return e.Apps, nil
	}
	return nil, &NotLoadedError{edge: "apps"}
}

// OrgUserOrErr returns the OrgUser value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) OrgUserOrErr() ([]*OrgUser, error) {
	if e.loadedTypes[8] {
		return e.OrgUser, nil
	}
	return nil, &NotLoadedError{edge: "org_user"}
}

// OrgAppOrErr returns the OrgApp value or an error if the edge
// was not loaded in eager-loading.
func (e OrgEdges) OrgAppOrErr() ([]*OrgApp, error) {
	if e.loadedTypes[9] {
		return e.OrgApp, nil
	}
	return nil, &NotLoadedError{edge: "org_app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Org) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case org.FieldID, org.FieldCreatedBy, org.FieldUpdatedBy, org.FieldOwnerID, org.FieldParentID, org.FieldDisplaySort:
			values[i] = new(sql.NullInt64)
		case org.FieldKind, org.FieldDomain, org.FieldCode, org.FieldName, org.FieldProfile, org.FieldStatus, org.FieldPath, org.FieldCountryCode, org.FieldTimezone:
			values[i] = new(sql.NullString)
		case org.FieldCreatedAt, org.FieldUpdatedAt, org.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Org fields.
func (o *Org) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case org.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case org.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				o.CreatedBy = int(value.Int64)
			}
		case org.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case org.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				o.UpdatedBy = int(value.Int64)
			}
		case org.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case org.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = value.Time
			}
		case org.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				o.OwnerID = new(int)
				*o.OwnerID = int(value.Int64)
			}
		case org.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				o.Kind = org.Kind(value.String)
			}
		case org.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				o.ParentID = int(value.Int64)
			}
		case org.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				o.Domain = value.String
			}
		case org.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				o.Code = value.String
			}
		case org.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case org.FieldProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile", values[i])
			} else if value.Valid {
				o.Profile = value.String
			}
		case org.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = typex.SimpleStatus(value.String)
			}
		case org.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				o.Path = value.String
			}
		case org.FieldDisplaySort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_sort", values[i])
			} else if value.Valid {
				o.DisplaySort = int32(value.Int64)
			}
		case org.FieldCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				o.CountryCode = value.String
			}
		case org.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				o.Timezone = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Org.
// This includes values selected through modifiers, order, etc.
func (o *Org) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Org entity.
func (o *Org) QueryParent() *OrgQuery {
	return NewOrgClient(o.config).QueryParent(o)
}

// QueryChildren queries the "children" edge of the Org entity.
func (o *Org) QueryChildren() *OrgQuery {
	return NewOrgClient(o.config).QueryChildren(o)
}

// QueryOwner queries the "owner" edge of the Org entity.
func (o *Org) QueryOwner() *UserQuery {
	return NewOrgClient(o.config).QueryOwner(o)
}

// QueryUsers queries the "users" edge of the Org entity.
func (o *Org) QueryUsers() *UserQuery {
	return NewOrgClient(o.config).QueryUsers(o)
}

// QueryRolesAndGroups queries the "roles_and_groups" edge of the Org entity.
func (o *Org) QueryRolesAndGroups() *OrgRoleQuery {
	return NewOrgClient(o.config).QueryRolesAndGroups(o)
}

// QueryPermissions queries the "permissions" edge of the Org entity.
func (o *Org) QueryPermissions() *PermissionQuery {
	return NewOrgClient(o.config).QueryPermissions(o)
}

// QueryPolicies queries the "policies" edge of the Org entity.
func (o *Org) QueryPolicies() *OrgPolicyQuery {
	return NewOrgClient(o.config).QueryPolicies(o)
}

// QueryApps queries the "apps" edge of the Org entity.
func (o *Org) QueryApps() *AppQuery {
	return NewOrgClient(o.config).QueryApps(o)
}

// QueryOrgUser queries the "org_user" edge of the Org entity.
func (o *Org) QueryOrgUser() *OrgUserQuery {
	return NewOrgClient(o.config).QueryOrgUser(o)
}

// QueryOrgApp queries the "org_app" edge of the Org entity.
func (o *Org) QueryOrgApp() *OrgAppQuery {
	return NewOrgClient(o.config).QueryOrgApp(o)
}

// Update returns a builder for updating this Org.
// Note that you need to call Org.Unwrap() before calling this method if this Org
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Org) Update() *OrgUpdateOne {
	return NewOrgClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Org entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Org) Unwrap() *Org {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Org is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Org) String() string {
	var builder strings.Builder
	builder.WriteString("Org(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", o.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", o.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(o.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := o.OwnerID; v != nil {
		builder.WriteString("owner_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", o.Kind))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ParentID))
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(o.Domain)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(o.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("profile=")
	builder.WriteString(o.Profile)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(o.Path)
	builder.WriteString(", ")
	builder.WriteString("display_sort=")
	builder.WriteString(fmt.Sprintf("%v", o.DisplaySort))
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(o.CountryCode)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(o.Timezone)
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedChildren(name string) ([]*Org, error) {
	if o.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedChildren(name string, edges ...*Org) {
	if o.Edges.namedChildren == nil {
		o.Edges.namedChildren = make(map[string][]*Org)
	}
	if len(edges) == 0 {
		o.Edges.namedChildren[name] = []*Org{}
	} else {
		o.Edges.namedChildren[name] = append(o.Edges.namedChildren[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedUsers(name string) ([]*User, error) {
	if o.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedUsers(name string, edges ...*User) {
	if o.Edges.namedUsers == nil {
		o.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		o.Edges.namedUsers[name] = []*User{}
	} else {
		o.Edges.namedUsers[name] = append(o.Edges.namedUsers[name], edges...)
	}
}

// NamedRolesAndGroups returns the RolesAndGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedRolesAndGroups(name string) ([]*OrgRole, error) {
	if o.Edges.namedRolesAndGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedRolesAndGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedRolesAndGroups(name string, edges ...*OrgRole) {
	if o.Edges.namedRolesAndGroups == nil {
		o.Edges.namedRolesAndGroups = make(map[string][]*OrgRole)
	}
	if len(edges) == 0 {
		o.Edges.namedRolesAndGroups[name] = []*OrgRole{}
	} else {
		o.Edges.namedRolesAndGroups[name] = append(o.Edges.namedRolesAndGroups[name], edges...)
	}
}

// NamedPermissions returns the Permissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedPermissions(name string) ([]*Permission, error) {
	if o.Edges.namedPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedPermissions(name string, edges ...*Permission) {
	if o.Edges.namedPermissions == nil {
		o.Edges.namedPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		o.Edges.namedPermissions[name] = []*Permission{}
	} else {
		o.Edges.namedPermissions[name] = append(o.Edges.namedPermissions[name], edges...)
	}
}

// NamedPolicies returns the Policies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedPolicies(name string) ([]*OrgPolicy, error) {
	if o.Edges.namedPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedPolicies(name string, edges ...*OrgPolicy) {
	if o.Edges.namedPolicies == nil {
		o.Edges.namedPolicies = make(map[string][]*OrgPolicy)
	}
	if len(edges) == 0 {
		o.Edges.namedPolicies[name] = []*OrgPolicy{}
	} else {
		o.Edges.namedPolicies[name] = append(o.Edges.namedPolicies[name], edges...)
	}
}

// NamedApps returns the Apps named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedApps(name string) ([]*App, error) {
	if o.Edges.namedApps == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedApps[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedApps(name string, edges ...*App) {
	if o.Edges.namedApps == nil {
		o.Edges.namedApps = make(map[string][]*App)
	}
	if len(edges) == 0 {
		o.Edges.namedApps[name] = []*App{}
	} else {
		o.Edges.namedApps[name] = append(o.Edges.namedApps[name], edges...)
	}
}

// NamedOrgUser returns the OrgUser named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedOrgUser(name string) ([]*OrgUser, error) {
	if o.Edges.namedOrgUser == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedOrgUser[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedOrgUser(name string, edges ...*OrgUser) {
	if o.Edges.namedOrgUser == nil {
		o.Edges.namedOrgUser = make(map[string][]*OrgUser)
	}
	if len(edges) == 0 {
		o.Edges.namedOrgUser[name] = []*OrgUser{}
	} else {
		o.Edges.namedOrgUser[name] = append(o.Edges.namedOrgUser[name], edges...)
	}
}

// NamedOrgApp returns the OrgApp named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Org) NamedOrgApp(name string) ([]*OrgApp, error) {
	if o.Edges.namedOrgApp == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedOrgApp[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Org) appendNamedOrgApp(name string, edges ...*OrgApp) {
	if o.Edges.namedOrgApp == nil {
		o.Edges.namedOrgApp = make(map[string][]*OrgApp)
	}
	if len(edges) == 0 {
		o.Edges.namedOrgApp[name] = []*OrgApp{}
	} else {
		o.Edges.namedOrgApp[name] = append(o.Edges.namedOrgApp[name], edges...)
	}
}

// Orgs is a parsable slice of Org.
type Orgs []*Org
