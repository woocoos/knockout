// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/codegen/entgen/types"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/approlepolicy"
	"github.com/woocoos/knockout/ent/predicate"
)

// AppPolicyUpdate is the builder for updating AppPolicy entities.
type AppPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *AppPolicyMutation
}

// Where appends a list predicates to the AppPolicyUpdate builder.
func (apu *AppPolicyUpdate) Where(ps ...predicate.AppPolicy) *AppPolicyUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedBy sets the "updated_by" field.
func (apu *AppPolicyUpdate) SetUpdatedBy(i int) *AppPolicyUpdate {
	apu.mutation.ResetUpdatedBy()
	apu.mutation.SetUpdatedBy(i)
	return apu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apu *AppPolicyUpdate) SetNillableUpdatedBy(i *int) *AppPolicyUpdate {
	if i != nil {
		apu.SetUpdatedBy(*i)
	}
	return apu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (apu *AppPolicyUpdate) AddUpdatedBy(i int) *AppPolicyUpdate {
	apu.mutation.AddUpdatedBy(i)
	return apu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apu *AppPolicyUpdate) ClearUpdatedBy() *AppPolicyUpdate {
	apu.mutation.ClearUpdatedBy()
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AppPolicyUpdate) SetUpdatedAt(t time.Time) *AppPolicyUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apu *AppPolicyUpdate) SetNillableUpdatedAt(t *time.Time) *AppPolicyUpdate {
	if t != nil {
		apu.SetUpdatedAt(*t)
	}
	return apu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apu *AppPolicyUpdate) ClearUpdatedAt() *AppPolicyUpdate {
	apu.mutation.ClearUpdatedAt()
	return apu
}

// SetName sets the "name" field.
func (apu *AppPolicyUpdate) SetName(s string) *AppPolicyUpdate {
	apu.mutation.SetName(s)
	return apu
}

// SetComments sets the "comments" field.
func (apu *AppPolicyUpdate) SetComments(s string) *AppPolicyUpdate {
	apu.mutation.SetComments(s)
	return apu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (apu *AppPolicyUpdate) SetNillableComments(s *string) *AppPolicyUpdate {
	if s != nil {
		apu.SetComments(*s)
	}
	return apu
}

// ClearComments clears the value of the "comments" field.
func (apu *AppPolicyUpdate) ClearComments() *AppPolicyUpdate {
	apu.mutation.ClearComments()
	return apu
}

// SetRules sets the "rules" field.
func (apu *AppPolicyUpdate) SetRules(tr []*types.PolicyRule) *AppPolicyUpdate {
	apu.mutation.SetRules(tr)
	return apu
}

// AppendRules appends tr to the "rules" field.
func (apu *AppPolicyUpdate) AppendRules(tr []*types.PolicyRule) *AppPolicyUpdate {
	apu.mutation.AppendRules(tr)
	return apu
}

// SetVersion sets the "version" field.
func (apu *AppPolicyUpdate) SetVersion(s string) *AppPolicyUpdate {
	apu.mutation.SetVersion(s)
	return apu
}

// SetAutoGrant sets the "auto_grant" field.
func (apu *AppPolicyUpdate) SetAutoGrant(b bool) *AppPolicyUpdate {
	apu.mutation.SetAutoGrant(b)
	return apu
}

// SetNillableAutoGrant sets the "auto_grant" field if the given value is not nil.
func (apu *AppPolicyUpdate) SetNillableAutoGrant(b *bool) *AppPolicyUpdate {
	if b != nil {
		apu.SetAutoGrant(*b)
	}
	return apu
}

// SetStatus sets the "status" field.
func (apu *AppPolicyUpdate) SetStatus(ts typex.SimpleStatus) *AppPolicyUpdate {
	apu.mutation.SetStatus(ts)
	return apu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apu *AppPolicyUpdate) SetNillableStatus(ts *typex.SimpleStatus) *AppPolicyUpdate {
	if ts != nil {
		apu.SetStatus(*ts)
	}
	return apu
}

// ClearStatus clears the value of the "status" field.
func (apu *AppPolicyUpdate) ClearStatus() *AppPolicyUpdate {
	apu.mutation.ClearStatus()
	return apu
}

// AddRoleIDs adds the "roles" edge to the AppRole entity by IDs.
func (apu *AppPolicyUpdate) AddRoleIDs(ids ...int) *AppPolicyUpdate {
	apu.mutation.AddRoleIDs(ids...)
	return apu
}

// AddRoles adds the "roles" edges to the AppRole entity.
func (apu *AppPolicyUpdate) AddRoles(a ...*AppRole) *AppPolicyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddRoleIDs(ids...)
}

// AddAppRolePolicyIDs adds the "app_role_policy" edge to the AppRolePolicy entity by IDs.
func (apu *AppPolicyUpdate) AddAppRolePolicyIDs(ids ...int) *AppPolicyUpdate {
	apu.mutation.AddAppRolePolicyIDs(ids...)
	return apu
}

// AddAppRolePolicy adds the "app_role_policy" edges to the AppRolePolicy entity.
func (apu *AppPolicyUpdate) AddAppRolePolicy(a ...*AppRolePolicy) *AppPolicyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddAppRolePolicyIDs(ids...)
}

// Mutation returns the AppPolicyMutation object of the builder.
func (apu *AppPolicyUpdate) Mutation() *AppPolicyMutation {
	return apu.mutation
}

// ClearRoles clears all "roles" edges to the AppRole entity.
func (apu *AppPolicyUpdate) ClearRoles() *AppPolicyUpdate {
	apu.mutation.ClearRoles()
	return apu
}

// RemoveRoleIDs removes the "roles" edge to AppRole entities by IDs.
func (apu *AppPolicyUpdate) RemoveRoleIDs(ids ...int) *AppPolicyUpdate {
	apu.mutation.RemoveRoleIDs(ids...)
	return apu
}

// RemoveRoles removes "roles" edges to AppRole entities.
func (apu *AppPolicyUpdate) RemoveRoles(a ...*AppRole) *AppPolicyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveRoleIDs(ids...)
}

// ClearAppRolePolicy clears all "app_role_policy" edges to the AppRolePolicy entity.
func (apu *AppPolicyUpdate) ClearAppRolePolicy() *AppPolicyUpdate {
	apu.mutation.ClearAppRolePolicy()
	return apu
}

// RemoveAppRolePolicyIDs removes the "app_role_policy" edge to AppRolePolicy entities by IDs.
func (apu *AppPolicyUpdate) RemoveAppRolePolicyIDs(ids ...int) *AppPolicyUpdate {
	apu.mutation.RemoveAppRolePolicyIDs(ids...)
	return apu
}

// RemoveAppRolePolicy removes "app_role_policy" edges to AppRolePolicy entities.
func (apu *AppPolicyUpdate) RemoveAppRolePolicy(a ...*AppRolePolicy) *AppPolicyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveAppRolePolicyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AppPolicyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AppPolicyMutation](ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AppPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AppPolicyUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AppPolicyUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apu *AppPolicyUpdate) check() error {
	if v, ok := apu.mutation.Status(); ok {
		if err := apppolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AppPolicy.status": %w`, err)}
		}
	}
	return nil
}

func (apu *AppPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := apu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apppolicy.Table, apppolicy.Columns, sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.UpdatedBy(); ok {
		_spec.SetField(apppolicy.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := apu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(apppolicy.FieldUpdatedBy, field.TypeInt, value)
	}
	if apu.mutation.UpdatedByCleared() {
		_spec.ClearField(apppolicy.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(apppolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if apu.mutation.UpdatedAtCleared() {
		_spec.ClearField(apppolicy.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.Name(); ok {
		_spec.SetField(apppolicy.FieldName, field.TypeString, value)
	}
	if value, ok := apu.mutation.Comments(); ok {
		_spec.SetField(apppolicy.FieldComments, field.TypeString, value)
	}
	if apu.mutation.CommentsCleared() {
		_spec.ClearField(apppolicy.FieldComments, field.TypeString)
	}
	if value, ok := apu.mutation.Rules(); ok {
		_spec.SetField(apppolicy.FieldRules, field.TypeJSON, value)
	}
	if value, ok := apu.mutation.AppendedRules(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apppolicy.FieldRules, value)
		})
	}
	if value, ok := apu.mutation.Version(); ok {
		_spec.SetField(apppolicy.FieldVersion, field.TypeString, value)
	}
	if value, ok := apu.mutation.AutoGrant(); ok {
		_spec.SetField(apppolicy.FieldAutoGrant, field.TypeBool, value)
	}
	if value, ok := apu.mutation.Status(); ok {
		_spec.SetField(apppolicy.FieldStatus, field.TypeEnum, value)
	}
	if apu.mutation.StatusCleared() {
		_spec.ClearField(apppolicy.FieldStatus, field.TypeEnum)
	}
	if apu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apppolicy.RolesTable,
			Columns: apppolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		createE := &AppRolePolicyCreate{config: apu.config, mutation: newAppRolePolicyMutation(apu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !apu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apppolicy.RolesTable,
			Columns: apppolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePolicyCreate{config: apu.config, mutation: newAppRolePolicyMutation(apu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apppolicy.RolesTable,
			Columns: apppolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePolicyCreate{config: apu.config, mutation: newAppRolePolicyMutation(apu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.AppRolePolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   apppolicy.AppRolePolicyTable,
			Columns: []string{apppolicy.AppRolePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approlepolicy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedAppRolePolicyIDs(); len(nodes) > 0 && !apu.mutation.AppRolePolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   apppolicy.AppRolePolicyTable,
			Columns: []string{apppolicy.AppRolePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approlepolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AppRolePolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   apppolicy.AppRolePolicyTable,
			Columns: []string{apppolicy.AppRolePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approlepolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AppPolicyUpdateOne is the builder for updating a single AppPolicy entity.
type AppPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppPolicyMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (apuo *AppPolicyUpdateOne) SetUpdatedBy(i int) *AppPolicyUpdateOne {
	apuo.mutation.ResetUpdatedBy()
	apuo.mutation.SetUpdatedBy(i)
	return apuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (apuo *AppPolicyUpdateOne) SetNillableUpdatedBy(i *int) *AppPolicyUpdateOne {
	if i != nil {
		apuo.SetUpdatedBy(*i)
	}
	return apuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (apuo *AppPolicyUpdateOne) AddUpdatedBy(i int) *AppPolicyUpdateOne {
	apuo.mutation.AddUpdatedBy(i)
	return apuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (apuo *AppPolicyUpdateOne) ClearUpdatedBy() *AppPolicyUpdateOne {
	apuo.mutation.ClearUpdatedBy()
	return apuo
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AppPolicyUpdateOne) SetUpdatedAt(t time.Time) *AppPolicyUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apuo *AppPolicyUpdateOne) SetNillableUpdatedAt(t *time.Time) *AppPolicyUpdateOne {
	if t != nil {
		apuo.SetUpdatedAt(*t)
	}
	return apuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apuo *AppPolicyUpdateOne) ClearUpdatedAt() *AppPolicyUpdateOne {
	apuo.mutation.ClearUpdatedAt()
	return apuo
}

// SetName sets the "name" field.
func (apuo *AppPolicyUpdateOne) SetName(s string) *AppPolicyUpdateOne {
	apuo.mutation.SetName(s)
	return apuo
}

// SetComments sets the "comments" field.
func (apuo *AppPolicyUpdateOne) SetComments(s string) *AppPolicyUpdateOne {
	apuo.mutation.SetComments(s)
	return apuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (apuo *AppPolicyUpdateOne) SetNillableComments(s *string) *AppPolicyUpdateOne {
	if s != nil {
		apuo.SetComments(*s)
	}
	return apuo
}

// ClearComments clears the value of the "comments" field.
func (apuo *AppPolicyUpdateOne) ClearComments() *AppPolicyUpdateOne {
	apuo.mutation.ClearComments()
	return apuo
}

// SetRules sets the "rules" field.
func (apuo *AppPolicyUpdateOne) SetRules(tr []*types.PolicyRule) *AppPolicyUpdateOne {
	apuo.mutation.SetRules(tr)
	return apuo
}

// AppendRules appends tr to the "rules" field.
func (apuo *AppPolicyUpdateOne) AppendRules(tr []*types.PolicyRule) *AppPolicyUpdateOne {
	apuo.mutation.AppendRules(tr)
	return apuo
}

// SetVersion sets the "version" field.
func (apuo *AppPolicyUpdateOne) SetVersion(s string) *AppPolicyUpdateOne {
	apuo.mutation.SetVersion(s)
	return apuo
}

// SetAutoGrant sets the "auto_grant" field.
func (apuo *AppPolicyUpdateOne) SetAutoGrant(b bool) *AppPolicyUpdateOne {
	apuo.mutation.SetAutoGrant(b)
	return apuo
}

// SetNillableAutoGrant sets the "auto_grant" field if the given value is not nil.
func (apuo *AppPolicyUpdateOne) SetNillableAutoGrant(b *bool) *AppPolicyUpdateOne {
	if b != nil {
		apuo.SetAutoGrant(*b)
	}
	return apuo
}

// SetStatus sets the "status" field.
func (apuo *AppPolicyUpdateOne) SetStatus(ts typex.SimpleStatus) *AppPolicyUpdateOne {
	apuo.mutation.SetStatus(ts)
	return apuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apuo *AppPolicyUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *AppPolicyUpdateOne {
	if ts != nil {
		apuo.SetStatus(*ts)
	}
	return apuo
}

// ClearStatus clears the value of the "status" field.
func (apuo *AppPolicyUpdateOne) ClearStatus() *AppPolicyUpdateOne {
	apuo.mutation.ClearStatus()
	return apuo
}

// AddRoleIDs adds the "roles" edge to the AppRole entity by IDs.
func (apuo *AppPolicyUpdateOne) AddRoleIDs(ids ...int) *AppPolicyUpdateOne {
	apuo.mutation.AddRoleIDs(ids...)
	return apuo
}

// AddRoles adds the "roles" edges to the AppRole entity.
func (apuo *AppPolicyUpdateOne) AddRoles(a ...*AppRole) *AppPolicyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddRoleIDs(ids...)
}

// AddAppRolePolicyIDs adds the "app_role_policy" edge to the AppRolePolicy entity by IDs.
func (apuo *AppPolicyUpdateOne) AddAppRolePolicyIDs(ids ...int) *AppPolicyUpdateOne {
	apuo.mutation.AddAppRolePolicyIDs(ids...)
	return apuo
}

// AddAppRolePolicy adds the "app_role_policy" edges to the AppRolePolicy entity.
func (apuo *AppPolicyUpdateOne) AddAppRolePolicy(a ...*AppRolePolicy) *AppPolicyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddAppRolePolicyIDs(ids...)
}

// Mutation returns the AppPolicyMutation object of the builder.
func (apuo *AppPolicyUpdateOne) Mutation() *AppPolicyMutation {
	return apuo.mutation
}

// ClearRoles clears all "roles" edges to the AppRole entity.
func (apuo *AppPolicyUpdateOne) ClearRoles() *AppPolicyUpdateOne {
	apuo.mutation.ClearRoles()
	return apuo
}

// RemoveRoleIDs removes the "roles" edge to AppRole entities by IDs.
func (apuo *AppPolicyUpdateOne) RemoveRoleIDs(ids ...int) *AppPolicyUpdateOne {
	apuo.mutation.RemoveRoleIDs(ids...)
	return apuo
}

// RemoveRoles removes "roles" edges to AppRole entities.
func (apuo *AppPolicyUpdateOne) RemoveRoles(a ...*AppRole) *AppPolicyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveRoleIDs(ids...)
}

// ClearAppRolePolicy clears all "app_role_policy" edges to the AppRolePolicy entity.
func (apuo *AppPolicyUpdateOne) ClearAppRolePolicy() *AppPolicyUpdateOne {
	apuo.mutation.ClearAppRolePolicy()
	return apuo
}

// RemoveAppRolePolicyIDs removes the "app_role_policy" edge to AppRolePolicy entities by IDs.
func (apuo *AppPolicyUpdateOne) RemoveAppRolePolicyIDs(ids ...int) *AppPolicyUpdateOne {
	apuo.mutation.RemoveAppRolePolicyIDs(ids...)
	return apuo
}

// RemoveAppRolePolicy removes "app_role_policy" edges to AppRolePolicy entities.
func (apuo *AppPolicyUpdateOne) RemoveAppRolePolicy(a ...*AppRolePolicy) *AppPolicyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveAppRolePolicyIDs(ids...)
}

// Where appends a list predicates to the AppPolicyUpdate builder.
func (apuo *AppPolicyUpdateOne) Where(ps ...predicate.AppPolicy) *AppPolicyUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AppPolicyUpdateOne) Select(field string, fields ...string) *AppPolicyUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AppPolicy entity.
func (apuo *AppPolicyUpdateOne) Save(ctx context.Context) (*AppPolicy, error) {
	return withHooks[*AppPolicy, AppPolicyMutation](ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AppPolicyUpdateOne) SaveX(ctx context.Context) *AppPolicy {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AppPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AppPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AppPolicyUpdateOne) check() error {
	if v, ok := apuo.mutation.Status(); ok {
		if err := apppolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AppPolicy.status": %w`, err)}
		}
	}
	return nil
}

func (apuo *AppPolicyUpdateOne) sqlSave(ctx context.Context) (_node *AppPolicy, err error) {
	if err := apuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apppolicy.Table, apppolicy.Columns, sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apppolicy.FieldID)
		for _, f := range fields {
			if !apppolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apppolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.UpdatedBy(); ok {
		_spec.SetField(apppolicy.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := apuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(apppolicy.FieldUpdatedBy, field.TypeInt, value)
	}
	if apuo.mutation.UpdatedByCleared() {
		_spec.ClearField(apppolicy.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apppolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if apuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(apppolicy.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.Name(); ok {
		_spec.SetField(apppolicy.FieldName, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Comments(); ok {
		_spec.SetField(apppolicy.FieldComments, field.TypeString, value)
	}
	if apuo.mutation.CommentsCleared() {
		_spec.ClearField(apppolicy.FieldComments, field.TypeString)
	}
	if value, ok := apuo.mutation.Rules(); ok {
		_spec.SetField(apppolicy.FieldRules, field.TypeJSON, value)
	}
	if value, ok := apuo.mutation.AppendedRules(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, apppolicy.FieldRules, value)
		})
	}
	if value, ok := apuo.mutation.Version(); ok {
		_spec.SetField(apppolicy.FieldVersion, field.TypeString, value)
	}
	if value, ok := apuo.mutation.AutoGrant(); ok {
		_spec.SetField(apppolicy.FieldAutoGrant, field.TypeBool, value)
	}
	if value, ok := apuo.mutation.Status(); ok {
		_spec.SetField(apppolicy.FieldStatus, field.TypeEnum, value)
	}
	if apuo.mutation.StatusCleared() {
		_spec.ClearField(apppolicy.FieldStatus, field.TypeEnum)
	}
	if apuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apppolicy.RolesTable,
			Columns: apppolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		createE := &AppRolePolicyCreate{config: apuo.config, mutation: newAppRolePolicyMutation(apuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !apuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apppolicy.RolesTable,
			Columns: apppolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePolicyCreate{config: apuo.config, mutation: newAppRolePolicyMutation(apuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   apppolicy.RolesTable,
			Columns: apppolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePolicyCreate{config: apuo.config, mutation: newAppRolePolicyMutation(apuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.AppRolePolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   apppolicy.AppRolePolicyTable,
			Columns: []string{apppolicy.AppRolePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approlepolicy.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedAppRolePolicyIDs(); len(nodes) > 0 && !apuo.mutation.AppRolePolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   apppolicy.AppRolePolicyTable,
			Columns: []string{apppolicy.AppRolePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approlepolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AppRolePolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   apppolicy.AppRolePolicyTable,
			Columns: []string{apppolicy.AppRolePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approlepolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppPolicy{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
