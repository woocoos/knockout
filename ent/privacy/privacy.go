// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/woocoos/knockout/ent"

	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AppQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppQueryRuleFunc func(context.Context, *ent.AppQuery) error

// EvalQuery return f(ctx, q).
func (f AppQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppQuery", q)
}

// The AppMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppMutationRuleFunc func(context.Context, *ent.AppMutation) error

// EvalMutation calls f(ctx, m).
func (f AppMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppMutation", m)
}

// The AppActionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppActionQueryRuleFunc func(context.Context, *ent.AppActionQuery) error

// EvalQuery return f(ctx, q).
func (f AppActionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppActionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppActionQuery", q)
}

// The AppActionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppActionMutationRuleFunc func(context.Context, *ent.AppActionMutation) error

// EvalMutation calls f(ctx, m).
func (f AppActionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppActionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppActionMutation", m)
}

// The AppMenuQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppMenuQueryRuleFunc func(context.Context, *ent.AppMenuQuery) error

// EvalQuery return f(ctx, q).
func (f AppMenuQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppMenuQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppMenuQuery", q)
}

// The AppMenuMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppMenuMutationRuleFunc func(context.Context, *ent.AppMenuMutation) error

// EvalMutation calls f(ctx, m).
func (f AppMenuMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppMenuMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppMenuMutation", m)
}

// The AppPolicyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppPolicyQueryRuleFunc func(context.Context, *ent.AppPolicyQuery) error

// EvalQuery return f(ctx, q).
func (f AppPolicyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppPolicyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppPolicyQuery", q)
}

// The AppPolicyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppPolicyMutationRuleFunc func(context.Context, *ent.AppPolicyMutation) error

// EvalMutation calls f(ctx, m).
func (f AppPolicyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppPolicyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppPolicyMutation", m)
}

// The AppResQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppResQueryRuleFunc func(context.Context, *ent.AppResQuery) error

// EvalQuery return f(ctx, q).
func (f AppResQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppResQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppResQuery", q)
}

// The AppResMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppResMutationRuleFunc func(context.Context, *ent.AppResMutation) error

// EvalMutation calls f(ctx, m).
func (f AppResMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppResMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppResMutation", m)
}

// The AppRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppRoleQueryRuleFunc func(context.Context, *ent.AppRoleQuery) error

// EvalQuery return f(ctx, q).
func (f AppRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppRoleQuery", q)
}

// The AppRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppRoleMutationRuleFunc func(context.Context, *ent.AppRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f AppRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppRoleMutation", m)
}

// The AppRolePolicyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppRolePolicyQueryRuleFunc func(context.Context, *ent.AppRolePolicyQuery) error

// EvalQuery return f(ctx, q).
func (f AppRolePolicyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppRolePolicyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppRolePolicyQuery", q)
}

// The AppRolePolicyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppRolePolicyMutationRuleFunc func(context.Context, *ent.AppRolePolicyMutation) error

// EvalMutation calls f(ctx, m).
func (f AppRolePolicyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppRolePolicyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppRolePolicyMutation", m)
}

// The OrgQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgQueryRuleFunc func(context.Context, *ent.OrgQuery) error

// EvalQuery return f(ctx, q).
func (f OrgQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrgQuery", q)
}

// The OrgMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgMutationRuleFunc func(context.Context, *ent.OrgMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrgMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrgMutation", m)
}

// The OrgAppQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgAppQueryRuleFunc func(context.Context, *ent.OrgAppQuery) error

// EvalQuery return f(ctx, q).
func (f OrgAppQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgAppQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrgAppQuery", q)
}

// The OrgAppMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgAppMutationRuleFunc func(context.Context, *ent.OrgAppMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgAppMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrgAppMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrgAppMutation", m)
}

// The OrgPolicyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgPolicyQueryRuleFunc func(context.Context, *ent.OrgPolicyQuery) error

// EvalQuery return f(ctx, q).
func (f OrgPolicyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgPolicyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrgPolicyQuery", q)
}

// The OrgPolicyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgPolicyMutationRuleFunc func(context.Context, *ent.OrgPolicyMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgPolicyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrgPolicyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrgPolicyMutation", m)
}

// The OrgRoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgRoleQueryRuleFunc func(context.Context, *ent.OrgRoleQuery) error

// EvalQuery return f(ctx, q).
func (f OrgRoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgRoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrgRoleQuery", q)
}

// The OrgRoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgRoleMutationRuleFunc func(context.Context, *ent.OrgRoleMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgRoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrgRoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrgRoleMutation", m)
}

// The OrgRoleUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgRoleUserQueryRuleFunc func(context.Context, *ent.OrgRoleUserQuery) error

// EvalQuery return f(ctx, q).
func (f OrgRoleUserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgRoleUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrgRoleUserQuery", q)
}

// The OrgRoleUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgRoleUserMutationRuleFunc func(context.Context, *ent.OrgRoleUserMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgRoleUserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrgRoleUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrgRoleUserMutation", m)
}

// The OrgUserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrgUserQueryRuleFunc func(context.Context, *ent.OrgUserQuery) error

// EvalQuery return f(ctx, q).
func (f OrgUserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgUserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrgUserQuery", q)
}

// The OrgUserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrgUserMutationRuleFunc func(context.Context, *ent.OrgUserMutation) error

// EvalMutation calls f(ctx, m).
func (f OrgUserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrgUserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrgUserMutation", m)
}

// The PermissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PermissionQueryRuleFunc func(context.Context, *ent.PermissionQuery) error

// EvalQuery return f(ctx, q).
func (f PermissionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PermissionQuery", q)
}

// The PermissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PermissionMutationRuleFunc func(context.Context, *ent.PermissionMutation) error

// EvalMutation calls f(ctx, m).
func (f PermissionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PermissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PermissionMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserDeviceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserDeviceQueryRuleFunc func(context.Context, *ent.UserDeviceQuery) error

// EvalQuery return f(ctx, q).
func (f UserDeviceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserDeviceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserDeviceQuery", q)
}

// The UserDeviceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserDeviceMutationRuleFunc func(context.Context, *ent.UserDeviceMutation) error

// EvalMutation calls f(ctx, m).
func (f UserDeviceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserDeviceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserDeviceMutation", m)
}

// The UserIdentityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserIdentityQueryRuleFunc func(context.Context, *ent.UserIdentityQuery) error

// EvalQuery return f(ctx, q).
func (f UserIdentityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserIdentityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserIdentityQuery", q)
}

// The UserIdentityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserIdentityMutationRuleFunc func(context.Context, *ent.UserIdentityMutation) error

// EvalMutation calls f(ctx, m).
func (f UserIdentityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserIdentityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserIdentityMutation", m)
}

// The UserLoginProfileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserLoginProfileQueryRuleFunc func(context.Context, *ent.UserLoginProfileQuery) error

// EvalQuery return f(ctx, q).
func (f UserLoginProfileQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserLoginProfileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserLoginProfileQuery", q)
}

// The UserLoginProfileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserLoginProfileMutationRuleFunc func(context.Context, *ent.UserLoginProfileMutation) error

// EvalMutation calls f(ctx, m).
func (f UserLoginProfileMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserLoginProfileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserLoginProfileMutation", m)
}

// The UserPasswordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserPasswordQueryRuleFunc func(context.Context, *ent.UserPasswordQuery) error

// EvalQuery return f(ctx, q).
func (f UserPasswordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserPasswordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserPasswordQuery", q)
}

// The UserPasswordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserPasswordMutationRuleFunc func(context.Context, *ent.UserPasswordMutation) error

// EvalMutation calls f(ctx, m).
func (f UserPasswordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserPasswordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserPasswordMutation", m)
}
