// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationpolicy"
	"github.com/woocoos/knockout/graph/entgen/types"
)

// OrganizationPolicyCreate is the builder for creating a OrganizationPolicy entity.
type OrganizationPolicyCreate struct {
	config
	mutation *OrganizationPolicyMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (opc *OrganizationPolicyCreate) SetCreatedBy(i int) *OrganizationPolicyCreate {
	opc.mutation.SetCreatedBy(i)
	return opc
}

// SetCreatedAt sets the "created_at" field.
func (opc *OrganizationPolicyCreate) SetCreatedAt(t time.Time) *OrganizationPolicyCreate {
	opc.mutation.SetCreatedAt(t)
	return opc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opc *OrganizationPolicyCreate) SetNillableCreatedAt(t *time.Time) *OrganizationPolicyCreate {
	if t != nil {
		opc.SetCreatedAt(*t)
	}
	return opc
}

// SetUpdatedBy sets the "updated_by" field.
func (opc *OrganizationPolicyCreate) SetUpdatedBy(i int) *OrganizationPolicyCreate {
	opc.mutation.SetUpdatedBy(i)
	return opc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (opc *OrganizationPolicyCreate) SetNillableUpdatedBy(i *int) *OrganizationPolicyCreate {
	if i != nil {
		opc.SetUpdatedBy(*i)
	}
	return opc
}

// SetUpdatedAt sets the "updated_at" field.
func (opc *OrganizationPolicyCreate) SetUpdatedAt(t time.Time) *OrganizationPolicyCreate {
	opc.mutation.SetUpdatedAt(t)
	return opc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opc *OrganizationPolicyCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationPolicyCreate {
	if t != nil {
		opc.SetUpdatedAt(*t)
	}
	return opc
}

// SetOrgID sets the "org_id" field.
func (opc *OrganizationPolicyCreate) SetOrgID(i int) *OrganizationPolicyCreate {
	opc.mutation.SetOrgID(i)
	return opc
}

// SetAppID sets the "app_id" field.
func (opc *OrganizationPolicyCreate) SetAppID(i int) *OrganizationPolicyCreate {
	opc.mutation.SetAppID(i)
	return opc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (opc *OrganizationPolicyCreate) SetNillableAppID(i *int) *OrganizationPolicyCreate {
	if i != nil {
		opc.SetAppID(*i)
	}
	return opc
}

// SetAppPolicyID sets the "app_policy_id" field.
func (opc *OrganizationPolicyCreate) SetAppPolicyID(i int) *OrganizationPolicyCreate {
	opc.mutation.SetAppPolicyID(i)
	return opc
}

// SetNillableAppPolicyID sets the "app_policy_id" field if the given value is not nil.
func (opc *OrganizationPolicyCreate) SetNillableAppPolicyID(i *int) *OrganizationPolicyCreate {
	if i != nil {
		opc.SetAppPolicyID(*i)
	}
	return opc
}

// SetName sets the "name" field.
func (opc *OrganizationPolicyCreate) SetName(s string) *OrganizationPolicyCreate {
	opc.mutation.SetName(s)
	return opc
}

// SetComments sets the "comments" field.
func (opc *OrganizationPolicyCreate) SetComments(s string) *OrganizationPolicyCreate {
	opc.mutation.SetComments(s)
	return opc
}

// SetRules sets the "rules" field.
func (opc *OrganizationPolicyCreate) SetRules(tr []types.PolicyRule) *OrganizationPolicyCreate {
	opc.mutation.SetRules(tr)
	return opc
}

// SetID sets the "id" field.
func (opc *OrganizationPolicyCreate) SetID(i int) *OrganizationPolicyCreate {
	opc.mutation.SetID(i)
	return opc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (opc *OrganizationPolicyCreate) SetNillableID(i *int) *OrganizationPolicyCreate {
	if i != nil {
		opc.SetID(*i)
	}
	return opc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (opc *OrganizationPolicyCreate) SetOrganizationID(id int) *OrganizationPolicyCreate {
	opc.mutation.SetOrganizationID(id)
	return opc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (opc *OrganizationPolicyCreate) SetOrganization(o *Organization) *OrganizationPolicyCreate {
	return opc.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationPolicyMutation object of the builder.
func (opc *OrganizationPolicyCreate) Mutation() *OrganizationPolicyMutation {
	return opc.mutation
}

// Save creates the OrganizationPolicy in the database.
func (opc *OrganizationPolicyCreate) Save(ctx context.Context) (*OrganizationPolicy, error) {
	if err := opc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*OrganizationPolicy, OrganizationPolicyMutation](ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrganizationPolicyCreate) SaveX(ctx context.Context) *OrganizationPolicy {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrganizationPolicyCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrganizationPolicyCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrganizationPolicyCreate) defaults() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		if organizationpolicy.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized organizationpolicy.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := organizationpolicy.DefaultCreatedAt()
		opc.mutation.SetCreatedAt(v)
	}
	if _, ok := opc.mutation.ID(); !ok {
		if organizationpolicy.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized organizationpolicy.DefaultID (forgotten import ent/runtime?)")
		}
		v := organizationpolicy.DefaultID()
		opc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrganizationPolicyCreate) check() error {
	if _, ok := opc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "OrganizationPolicy.created_by"`)}
	}
	if _, ok := opc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrganizationPolicy.created_at"`)}
	}
	if _, ok := opc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "OrganizationPolicy.org_id"`)}
	}
	if _, ok := opc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OrganizationPolicy.name"`)}
	}
	if _, ok := opc.mutation.Comments(); !ok {
		return &ValidationError{Name: "comments", err: errors.New(`ent: missing required field "OrganizationPolicy.comments"`)}
	}
	if _, ok := opc.mutation.Rules(); !ok {
		return &ValidationError{Name: "rules", err: errors.New(`ent: missing required field "OrganizationPolicy.rules"`)}
	}
	if _, ok := opc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OrganizationPolicy.organization"`)}
	}
	return nil
}

func (opc *OrganizationPolicyCreate) sqlSave(ctx context.Context) (*OrganizationPolicy, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OrganizationPolicyCreate) createSpec() (*OrganizationPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationPolicy{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(organizationpolicy.Table, sqlgraph.NewFieldSpec(organizationpolicy.FieldID, field.TypeInt))
	)
	if id, ok := opc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := opc.mutation.CreatedBy(); ok {
		_spec.SetField(organizationpolicy.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := opc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationpolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := opc.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationpolicy.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := opc.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationpolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := opc.mutation.AppID(); ok {
		_spec.SetField(organizationpolicy.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := opc.mutation.AppPolicyID(); ok {
		_spec.SetField(organizationpolicy.FieldAppPolicyID, field.TypeInt, value)
		_node.AppPolicyID = value
	}
	if value, ok := opc.mutation.Name(); ok {
		_spec.SetField(organizationpolicy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := opc.mutation.Comments(); ok {
		_spec.SetField(organizationpolicy.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := opc.mutation.Rules(); ok {
		_spec.SetField(organizationpolicy.FieldRules, field.TypeJSON, value)
		_node.Rules = value
	}
	if nodes := opc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationpolicy.OrganizationTable,
			Columns: []string{organizationpolicy.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationPolicyCreateBulk is the builder for creating many OrganizationPolicy entities in bulk.
type OrganizationPolicyCreateBulk struct {
	config
	builders []*OrganizationPolicyCreate
}

// Save creates the OrganizationPolicy entities in the database.
func (opcb *OrganizationPolicyCreateBulk) Save(ctx context.Context) ([]*OrganizationPolicy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrganizationPolicy, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrganizationPolicyCreateBulk) SaveX(ctx context.Context) []*OrganizationPolicy {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrganizationPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrganizationPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}
