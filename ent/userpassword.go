// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userpassword"
)

// UserPassword is the model entity for the UserPassword schema.
type UserPassword struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// 场景: login 普通登陆
	Scene userpassword.Scene `json:"scene,omitempty"`
	// 密码
	Password string `json:"-"`
	// 盐
	Salt string `json:"-"`
	// 生效状态,默认生效
	Status typex.SimpleStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPasswordQuery when eager-loading is set.
	Edges UserPasswordEdges `json:"edges"`
}

// UserPasswordEdges holds the relations/edges for other nodes in the graph.
type UserPasswordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPasswordEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPassword) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpassword.FieldID, userpassword.FieldCreatedBy, userpassword.FieldUpdatedBy, userpassword.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userpassword.FieldScene, userpassword.FieldPassword, userpassword.FieldSalt, userpassword.FieldStatus:
			values[i] = new(sql.NullString)
		case userpassword.FieldCreatedAt, userpassword.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPassword", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPassword fields.
func (up *UserPassword) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpassword.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = int(value.Int64)
		case userpassword.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				up.CreatedBy = int(value.Int64)
			}
		case userpassword.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case userpassword.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				up.UpdatedBy = int(value.Int64)
			}
		case userpassword.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Time
			}
		case userpassword.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = int(value.Int64)
			}
		case userpassword.FieldScene:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scene", values[i])
			} else if value.Valid {
				up.Scene = userpassword.Scene(value.String)
			}
		case userpassword.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				up.Password = value.String
			}
		case userpassword.FieldSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value.Valid {
				up.Salt = value.String
			}
		case userpassword.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				up.Status = typex.SimpleStatus(value.String)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserPassword entity.
func (up *UserPassword) QueryUser() *UserQuery {
	return NewUserPasswordClient(up.config).QueryUser(up)
}

// Update returns a builder for updating this UserPassword.
// Note that you need to call UserPassword.Unwrap() before calling this method if this UserPassword
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPassword) Update() *UserPasswordUpdateOne {
	return NewUserPasswordClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPassword entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPassword) Unwrap() *UserPassword {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPassword is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPassword) String() string {
	var builder strings.Builder
	builder.WriteString("UserPassword(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", up.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", up.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(up.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteString(", ")
	builder.WriteString("scene=")
	builder.WriteString(fmt.Sprintf("%v", up.Scene))
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("salt=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", up.Status))
	builder.WriteByte(')')
	return builder.String()
}

// UserPasswords is a parsable slice of UserPassword.
type UserPasswords []*UserPassword
