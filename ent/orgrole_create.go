// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgrole"
	"github.com/woocoos/knockout/ent/orgroleuser"
	"github.com/woocoos/knockout/ent/orguser"
)

// OrgRoleCreate is the builder for creating a OrgRole entity.
type OrgRoleCreate struct {
	config
	mutation *OrgRoleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (orc *OrgRoleCreate) SetCreatedBy(i int) *OrgRoleCreate {
	orc.mutation.SetCreatedBy(i)
	return orc
}

// SetCreatedAt sets the "created_at" field.
func (orc *OrgRoleCreate) SetCreatedAt(t time.Time) *OrgRoleCreate {
	orc.mutation.SetCreatedAt(t)
	return orc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (orc *OrgRoleCreate) SetNillableCreatedAt(t *time.Time) *OrgRoleCreate {
	if t != nil {
		orc.SetCreatedAt(*t)
	}
	return orc
}

// SetUpdatedBy sets the "updated_by" field.
func (orc *OrgRoleCreate) SetUpdatedBy(i int) *OrgRoleCreate {
	orc.mutation.SetUpdatedBy(i)
	return orc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (orc *OrgRoleCreate) SetNillableUpdatedBy(i *int) *OrgRoleCreate {
	if i != nil {
		orc.SetUpdatedBy(*i)
	}
	return orc
}

// SetUpdatedAt sets the "updated_at" field.
func (orc *OrgRoleCreate) SetUpdatedAt(t time.Time) *OrgRoleCreate {
	orc.mutation.SetUpdatedAt(t)
	return orc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (orc *OrgRoleCreate) SetNillableUpdatedAt(t *time.Time) *OrgRoleCreate {
	if t != nil {
		orc.SetUpdatedAt(*t)
	}
	return orc
}

// SetOrgID sets the "org_id" field.
func (orc *OrgRoleCreate) SetOrgID(i int) *OrgRoleCreate {
	orc.mutation.SetOrgID(i)
	return orc
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (orc *OrgRoleCreate) SetNillableOrgID(i *int) *OrgRoleCreate {
	if i != nil {
		orc.SetOrgID(*i)
	}
	return orc
}

// SetKind sets the "kind" field.
func (orc *OrgRoleCreate) SetKind(o orgrole.Kind) *OrgRoleCreate {
	orc.mutation.SetKind(o)
	return orc
}

// SetName sets the "name" field.
func (orc *OrgRoleCreate) SetName(s string) *OrgRoleCreate {
	orc.mutation.SetName(s)
	return orc
}

// SetAppRoleID sets the "app_role_id" field.
func (orc *OrgRoleCreate) SetAppRoleID(i int) *OrgRoleCreate {
	orc.mutation.SetAppRoleID(i)
	return orc
}

// SetNillableAppRoleID sets the "app_role_id" field if the given value is not nil.
func (orc *OrgRoleCreate) SetNillableAppRoleID(i *int) *OrgRoleCreate {
	if i != nil {
		orc.SetAppRoleID(*i)
	}
	return orc
}

// SetComments sets the "comments" field.
func (orc *OrgRoleCreate) SetComments(s string) *OrgRoleCreate {
	orc.mutation.SetComments(s)
	return orc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (orc *OrgRoleCreate) SetNillableComments(s *string) *OrgRoleCreate {
	if s != nil {
		orc.SetComments(*s)
	}
	return orc
}

// SetID sets the "id" field.
func (orc *OrgRoleCreate) SetID(i int) *OrgRoleCreate {
	orc.mutation.SetID(i)
	return orc
}

// SetOrg sets the "org" edge to the Org entity.
func (orc *OrgRoleCreate) SetOrg(o *Org) *OrgRoleCreate {
	return orc.SetOrgID(o.ID)
}

// AddOrgUserIDs adds the "org_users" edge to the OrgUser entity by IDs.
func (orc *OrgRoleCreate) AddOrgUserIDs(ids ...int) *OrgRoleCreate {
	orc.mutation.AddOrgUserIDs(ids...)
	return orc
}

// AddOrgUsers adds the "org_users" edges to the OrgUser entity.
func (orc *OrgRoleCreate) AddOrgUsers(o ...*OrgUser) *OrgRoleCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return orc.AddOrgUserIDs(ids...)
}

// AddOrgRoleUserIDs adds the "org_role_user" edge to the OrgRoleUser entity by IDs.
func (orc *OrgRoleCreate) AddOrgRoleUserIDs(ids ...int) *OrgRoleCreate {
	orc.mutation.AddOrgRoleUserIDs(ids...)
	return orc
}

// AddOrgRoleUser adds the "org_role_user" edges to the OrgRoleUser entity.
func (orc *OrgRoleCreate) AddOrgRoleUser(o ...*OrgRoleUser) *OrgRoleCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return orc.AddOrgRoleUserIDs(ids...)
}

// Mutation returns the OrgRoleMutation object of the builder.
func (orc *OrgRoleCreate) Mutation() *OrgRoleMutation {
	return orc.mutation
}

// Save creates the OrgRole in the database.
func (orc *OrgRoleCreate) Save(ctx context.Context) (*OrgRole, error) {
	if err := orc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*OrgRole, OrgRoleMutation](ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OrgRoleCreate) SaveX(ctx context.Context) *OrgRole {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OrgRoleCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OrgRoleCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OrgRoleCreate) defaults() error {
	if _, ok := orc.mutation.CreatedAt(); !ok {
		if orgrole.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orgrole.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orgrole.DefaultCreatedAt()
		orc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (orc *OrgRoleCreate) check() error {
	if _, ok := orc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "OrgRole.created_by"`)}
	}
	if _, ok := orc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrgRole.created_at"`)}
	}
	if _, ok := orc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "OrgRole.kind"`)}
	}
	if v, ok := orc.mutation.Kind(); ok {
		if err := orgrole.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "OrgRole.kind": %w`, err)}
		}
	}
	if _, ok := orc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OrgRole.name"`)}
	}
	return nil
}

func (orc *OrgRoleCreate) sqlSave(ctx context.Context) (*OrgRole, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OrgRoleCreate) createSpec() (*OrgRole, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgRole{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(orgrole.Table, sqlgraph.NewFieldSpec(orgrole.FieldID, field.TypeInt))
	)
	_spec.OnConflict = orc.conflict
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := orc.mutation.CreatedBy(); ok {
		_spec.SetField(orgrole.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := orc.mutation.CreatedAt(); ok {
		_spec.SetField(orgrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := orc.mutation.UpdatedBy(); ok {
		_spec.SetField(orgrole.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := orc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgrole.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := orc.mutation.Kind(); ok {
		_spec.SetField(orgrole.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := orc.mutation.Name(); ok {
		_spec.SetField(orgrole.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := orc.mutation.AppRoleID(); ok {
		_spec.SetField(orgrole.FieldAppRoleID, field.TypeInt, value)
		_node.AppRoleID = value
	}
	if value, ok := orc.mutation.Comments(); ok {
		_spec.SetField(orgrole.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if nodes := orc.mutation.OrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgrole.OrgTable,
			Columns: []string{orgrole.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.OrgUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgrole.OrgUsersTable,
			Columns: orgrole.OrgUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgRoleUserCreate{config: orc.config, mutation: newOrgRoleUserMutation(orc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.OrgRoleUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orgrole.OrgRoleUserTable,
			Columns: []string{orgrole.OrgRoleUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgroleuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgRole.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgRoleUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (orc *OrgRoleCreate) OnConflict(opts ...sql.ConflictOption) *OrgRoleUpsertOne {
	orc.conflict = opts
	return &OrgRoleUpsertOne{
		create: orc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orc *OrgRoleCreate) OnConflictColumns(columns ...string) *OrgRoleUpsertOne {
	orc.conflict = append(orc.conflict, sql.ConflictColumns(columns...))
	return &OrgRoleUpsertOne{
		create: orc,
	}
}

type (
	// OrgRoleUpsertOne is the builder for "upsert"-ing
	//  one OrgRole node.
	OrgRoleUpsertOne struct {
		create *OrgRoleCreate
	}

	// OrgRoleUpsert is the "OnConflict" setter.
	OrgRoleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgRoleUpsert) SetUpdatedBy(v int) *OrgRoleUpsert {
	u.Set(orgrole.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgRoleUpsert) UpdateUpdatedBy() *OrgRoleUpsert {
	u.SetExcluded(orgrole.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgRoleUpsert) AddUpdatedBy(v int) *OrgRoleUpsert {
	u.Add(orgrole.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgRoleUpsert) ClearUpdatedBy() *OrgRoleUpsert {
	u.SetNull(orgrole.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgRoleUpsert) SetUpdatedAt(v time.Time) *OrgRoleUpsert {
	u.Set(orgrole.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgRoleUpsert) UpdateUpdatedAt() *OrgRoleUpsert {
	u.SetExcluded(orgrole.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgRoleUpsert) ClearUpdatedAt() *OrgRoleUpsert {
	u.SetNull(orgrole.FieldUpdatedAt)
	return u
}

// SetKind sets the "kind" field.
func (u *OrgRoleUpsert) SetKind(v orgrole.Kind) *OrgRoleUpsert {
	u.Set(orgrole.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OrgRoleUpsert) UpdateKind() *OrgRoleUpsert {
	u.SetExcluded(orgrole.FieldKind)
	return u
}

// SetName sets the "name" field.
func (u *OrgRoleUpsert) SetName(v string) *OrgRoleUpsert {
	u.Set(orgrole.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgRoleUpsert) UpdateName() *OrgRoleUpsert {
	u.SetExcluded(orgrole.FieldName)
	return u
}

// SetAppRoleID sets the "app_role_id" field.
func (u *OrgRoleUpsert) SetAppRoleID(v int) *OrgRoleUpsert {
	u.Set(orgrole.FieldAppRoleID, v)
	return u
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *OrgRoleUpsert) UpdateAppRoleID() *OrgRoleUpsert {
	u.SetExcluded(orgrole.FieldAppRoleID)
	return u
}

// AddAppRoleID adds v to the "app_role_id" field.
func (u *OrgRoleUpsert) AddAppRoleID(v int) *OrgRoleUpsert {
	u.Add(orgrole.FieldAppRoleID, v)
	return u
}

// ClearAppRoleID clears the value of the "app_role_id" field.
func (u *OrgRoleUpsert) ClearAppRoleID() *OrgRoleUpsert {
	u.SetNull(orgrole.FieldAppRoleID)
	return u
}

// SetComments sets the "comments" field.
func (u *OrgRoleUpsert) SetComments(v string) *OrgRoleUpsert {
	u.Set(orgrole.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *OrgRoleUpsert) UpdateComments() *OrgRoleUpsert {
	u.SetExcluded(orgrole.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *OrgRoleUpsert) ClearComments() *OrgRoleUpsert {
	u.SetNull(orgrole.FieldComments)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrgRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgrole.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgRoleUpsertOne) UpdateNewValues() *OrgRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orgrole.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(orgrole.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orgrole.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.OrgID(); exists {
			s.SetIgnore(orgrole.FieldOrgID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgRole.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgRoleUpsertOne) Ignore() *OrgRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgRoleUpsertOne) DoNothing() *OrgRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgRoleCreate.OnConflict
// documentation for more info.
func (u *OrgRoleUpsertOne) Update(set func(*OrgRoleUpsert)) *OrgRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgRoleUpsertOne) SetUpdatedBy(v int) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgRoleUpsertOne) AddUpdatedBy(v int) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgRoleUpsertOne) UpdateUpdatedBy() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgRoleUpsertOne) ClearUpdatedBy() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgRoleUpsertOne) SetUpdatedAt(v time.Time) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgRoleUpsertOne) UpdateUpdatedAt() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgRoleUpsertOne) ClearUpdatedAt() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetKind sets the "kind" field.
func (u *OrgRoleUpsertOne) SetKind(v orgrole.Kind) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OrgRoleUpsertOne) UpdateKind() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateKind()
	})
}

// SetName sets the "name" field.
func (u *OrgRoleUpsertOne) SetName(v string) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgRoleUpsertOne) UpdateName() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateName()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *OrgRoleUpsertOne) SetAppRoleID(v int) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetAppRoleID(v)
	})
}

// AddAppRoleID adds v to the "app_role_id" field.
func (u *OrgRoleUpsertOne) AddAppRoleID(v int) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.AddAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *OrgRoleUpsertOne) UpdateAppRoleID() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateAppRoleID()
	})
}

// ClearAppRoleID clears the value of the "app_role_id" field.
func (u *OrgRoleUpsertOne) ClearAppRoleID() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearAppRoleID()
	})
}

// SetComments sets the "comments" field.
func (u *OrgRoleUpsertOne) SetComments(v string) *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *OrgRoleUpsertOne) UpdateComments() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *OrgRoleUpsertOne) ClearComments() *OrgRoleUpsertOne {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *OrgRoleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgRoleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgRoleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgRoleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgRoleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgRoleCreateBulk is the builder for creating many OrgRole entities in bulk.
type OrgRoleCreateBulk struct {
	config
	builders []*OrgRoleCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgRole entities in the database.
func (orcb *OrgRoleCreateBulk) Save(ctx context.Context) ([]*OrgRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OrgRole, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = orcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OrgRoleCreateBulk) SaveX(ctx context.Context) []*OrgRole {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OrgRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OrgRoleCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgRole.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgRoleUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (orcb *OrgRoleCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgRoleUpsertBulk {
	orcb.conflict = opts
	return &OrgRoleUpsertBulk{
		create: orcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orcb *OrgRoleCreateBulk) OnConflictColumns(columns ...string) *OrgRoleUpsertBulk {
	orcb.conflict = append(orcb.conflict, sql.ConflictColumns(columns...))
	return &OrgRoleUpsertBulk{
		create: orcb,
	}
}

// OrgRoleUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgRole nodes.
type OrgRoleUpsertBulk struct {
	create *OrgRoleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgrole.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgRoleUpsertBulk) UpdateNewValues() *OrgRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orgrole.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(orgrole.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orgrole.FieldCreatedAt)
			}
			if _, exists := b.mutation.OrgID(); exists {
				s.SetIgnore(orgrole.FieldOrgID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgRole.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgRoleUpsertBulk) Ignore() *OrgRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgRoleUpsertBulk) DoNothing() *OrgRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgRoleCreateBulk.OnConflict
// documentation for more info.
func (u *OrgRoleUpsertBulk) Update(set func(*OrgRoleUpsert)) *OrgRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgRoleUpsertBulk) SetUpdatedBy(v int) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgRoleUpsertBulk) AddUpdatedBy(v int) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgRoleUpsertBulk) UpdateUpdatedBy() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgRoleUpsertBulk) ClearUpdatedBy() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgRoleUpsertBulk) SetUpdatedAt(v time.Time) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgRoleUpsertBulk) UpdateUpdatedAt() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgRoleUpsertBulk) ClearUpdatedAt() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetKind sets the "kind" field.
func (u *OrgRoleUpsertBulk) SetKind(v orgrole.Kind) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *OrgRoleUpsertBulk) UpdateKind() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateKind()
	})
}

// SetName sets the "name" field.
func (u *OrgRoleUpsertBulk) SetName(v string) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgRoleUpsertBulk) UpdateName() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateName()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *OrgRoleUpsertBulk) SetAppRoleID(v int) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetAppRoleID(v)
	})
}

// AddAppRoleID adds v to the "app_role_id" field.
func (u *OrgRoleUpsertBulk) AddAppRoleID(v int) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.AddAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *OrgRoleUpsertBulk) UpdateAppRoleID() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateAppRoleID()
	})
}

// ClearAppRoleID clears the value of the "app_role_id" field.
func (u *OrgRoleUpsertBulk) ClearAppRoleID() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearAppRoleID()
	})
}

// SetComments sets the "comments" field.
func (u *OrgRoleUpsertBulk) SetComments(v string) *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *OrgRoleUpsertBulk) UpdateComments() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *OrgRoleUpsertBulk) ClearComments() *OrgRoleUpsertBulk {
	return u.Update(func(s *OrgRoleUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *OrgRoleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgRoleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgRoleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgRoleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
