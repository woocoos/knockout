// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/appdict"
	"github.com/woocoos/knockout/ent/appdictitem"
)

// AppDictItem is the model entity for the AppDictItem schema.
type AppDictItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 所属应用
	AppID int `json:"app_id,omitempty"`
	// 组织ID
	OrgID int `json:"org_id,omitempty"`
	// 所属字典
	DictID int `json:"dict_id,omitempty"`
	// 用于标识应用资源的唯一代码,尽量简短
	Code string `json:"code,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// DisplaySort holds the value of the "display_sort" field.
	DisplaySort int32 `json:"display_sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppDictItemQuery when eager-loading is set.
	Edges        AppDictItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppDictItemEdges holds the relations/edges for other nodes in the graph.
type AppDictItemEdges struct {
	// Dict holds the value of the dict edge.
	Dict *AppDict `json:"dict,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// DictOrErr returns the Dict value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppDictItemEdges) DictOrErr() (*AppDict, error) {
	if e.loadedTypes[0] {
		if e.Dict == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: appdict.Label}
		}
		return e.Dict, nil
	}
	return nil, &NotLoadedError{edge: "dict"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppDictItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appdictitem.FieldID, appdictitem.FieldCreatedBy, appdictitem.FieldUpdatedBy, appdictitem.FieldAppID, appdictitem.FieldOrgID, appdictitem.FieldDictID, appdictitem.FieldDisplaySort:
			values[i] = new(sql.NullInt64)
		case appdictitem.FieldCode, appdictitem.FieldName, appdictitem.FieldComments:
			values[i] = new(sql.NullString)
		case appdictitem.FieldCreatedAt, appdictitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppDictItem fields.
func (adi *AppDictItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appdictitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			adi.ID = int(value.Int64)
		case appdictitem.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				adi.CreatedBy = int(value.Int64)
			}
		case appdictitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				adi.CreatedAt = value.Time
			}
		case appdictitem.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				adi.UpdatedBy = int(value.Int64)
			}
		case appdictitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				adi.UpdatedAt = value.Time
			}
		case appdictitem.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				adi.AppID = int(value.Int64)
			}
		case appdictitem.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				adi.OrgID = int(value.Int64)
			}
		case appdictitem.FieldDictID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dict_id", values[i])
			} else if value.Valid {
				adi.DictID = int(value.Int64)
			}
		case appdictitem.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				adi.Code = value.String
			}
		case appdictitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				adi.Name = value.String
			}
		case appdictitem.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				adi.Comments = value.String
			}
		case appdictitem.FieldDisplaySort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_sort", values[i])
			} else if value.Valid {
				adi.DisplaySort = int32(value.Int64)
			}
		default:
			adi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppDictItem.
// This includes values selected through modifiers, order, etc.
func (adi *AppDictItem) Value(name string) (ent.Value, error) {
	return adi.selectValues.Get(name)
}

// QueryDict queries the "dict" edge of the AppDictItem entity.
func (adi *AppDictItem) QueryDict() *AppDictQuery {
	return NewAppDictItemClient(adi.config).QueryDict(adi)
}

// Update returns a builder for updating this AppDictItem.
// Note that you need to call AppDictItem.Unwrap() before calling this method if this AppDictItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (adi *AppDictItem) Update() *AppDictItemUpdateOne {
	return NewAppDictItemClient(adi.config).UpdateOne(adi)
}

// Unwrap unwraps the AppDictItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (adi *AppDictItem) Unwrap() *AppDictItem {
	_tx, ok := adi.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppDictItem is not a transactional entity")
	}
	adi.config.driver = _tx.drv
	return adi
}

// String implements the fmt.Stringer.
func (adi *AppDictItem) String() string {
	var builder strings.Builder
	builder.WriteString("AppDictItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", adi.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", adi.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(adi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", adi.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(adi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", adi.AppID))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", adi.OrgID))
	builder.WriteString(", ")
	builder.WriteString("dict_id=")
	builder.WriteString(fmt.Sprintf("%v", adi.DictID))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(adi.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(adi.Name)
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(adi.Comments)
	builder.WriteString(", ")
	builder.WriteString("display_sort=")
	builder.WriteString(fmt.Sprintf("%v", adi.DisplaySort))
	builder.WriteByte(')')
	return builder.String()
}

// AppDictItems is a parsable slice of AppDictItem.
type AppDictItems []*AppDictItem
