// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/appres"
)

// AppActionCreate is the builder for creating a AppAction entity.
type AppActionCreate struct {
	config
	mutation *AppActionMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (aac *AppActionCreate) SetCreatedBy(i int) *AppActionCreate {
	aac.mutation.SetCreatedBy(i)
	return aac
}

// SetCreatedAt sets the "created_at" field.
func (aac *AppActionCreate) SetCreatedAt(t time.Time) *AppActionCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *AppActionCreate) SetNillableCreatedAt(t *time.Time) *AppActionCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetUpdatedBy sets the "updated_by" field.
func (aac *AppActionCreate) SetUpdatedBy(i int) *AppActionCreate {
	aac.mutation.SetUpdatedBy(i)
	return aac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aac *AppActionCreate) SetNillableUpdatedBy(i *int) *AppActionCreate {
	if i != nil {
		aac.SetUpdatedBy(*i)
	}
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *AppActionCreate) SetUpdatedAt(t time.Time) *AppActionCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *AppActionCreate) SetNillableUpdatedAt(t *time.Time) *AppActionCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetAppID sets the "app_id" field.
func (aac *AppActionCreate) SetAppID(i int) *AppActionCreate {
	aac.mutation.SetAppID(i)
	return aac
}

// SetName sets the "name" field.
func (aac *AppActionCreate) SetName(s string) *AppActionCreate {
	aac.mutation.SetName(s)
	return aac
}

// SetKind sets the "kind" field.
func (aac *AppActionCreate) SetKind(a appaction.Kind) *AppActionCreate {
	aac.mutation.SetKind(a)
	return aac
}

// SetMethod sets the "method" field.
func (aac *AppActionCreate) SetMethod(a appaction.Method) *AppActionCreate {
	aac.mutation.SetMethod(a)
	return aac
}

// SetComments sets the "comments" field.
func (aac *AppActionCreate) SetComments(s string) *AppActionCreate {
	aac.mutation.SetComments(s)
	return aac
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (aac *AppActionCreate) SetNillableComments(s *string) *AppActionCreate {
	if s != nil {
		aac.SetComments(*s)
	}
	return aac
}

// SetID sets the "id" field.
func (aac *AppActionCreate) SetID(i int) *AppActionCreate {
	aac.mutation.SetID(i)
	return aac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aac *AppActionCreate) SetNillableID(i *int) *AppActionCreate {
	if i != nil {
		aac.SetID(*i)
	}
	return aac
}

// SetApp sets the "app" edge to the App entity.
func (aac *AppActionCreate) SetApp(a *App) *AppActionCreate {
	return aac.SetAppID(a.ID)
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (aac *AppActionCreate) AddMenuIDs(ids ...int) *AppActionCreate {
	aac.mutation.AddMenuIDs(ids...)
	return aac
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (aac *AppActionCreate) AddMenus(a ...*AppMenu) *AppActionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aac.AddMenuIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the AppRes entity by IDs.
func (aac *AppActionCreate) AddResourceIDs(ids ...int) *AppActionCreate {
	aac.mutation.AddResourceIDs(ids...)
	return aac
}

// AddResources adds the "resources" edges to the AppRes entity.
func (aac *AppActionCreate) AddResources(a ...*AppRes) *AppActionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aac.AddResourceIDs(ids...)
}

// Mutation returns the AppActionMutation object of the builder.
func (aac *AppActionCreate) Mutation() *AppActionMutation {
	return aac.mutation
}

// Save creates the AppAction in the database.
func (aac *AppActionCreate) Save(ctx context.Context) (*AppAction, error) {
	if err := aac.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*AppAction, AppActionMutation](ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AppActionCreate) SaveX(ctx context.Context) *AppAction {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AppActionCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AppActionCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *AppActionCreate) defaults() error {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		if appaction.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appaction.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appaction.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.ID(); !ok {
		if appaction.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized appaction.DefaultID (forgotten import ent/runtime?)")
		}
		v := appaction.DefaultID()
		aac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (aac *AppActionCreate) check() error {
	if _, ok := aac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AppAction.created_by"`)}
	}
	if _, ok := aac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppAction.created_at"`)}
	}
	if _, ok := aac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppAction.app_id"`)}
	}
	if _, ok := aac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AppAction.name"`)}
	}
	if v, ok := aac.mutation.Name(); ok {
		if err := appaction.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppAction.name": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "AppAction.kind"`)}
	}
	if v, ok := aac.mutation.Kind(); ok {
		if err := appaction.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "AppAction.kind": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "AppAction.method"`)}
	}
	if v, ok := aac.mutation.Method(); ok {
		if err := appaction.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "AppAction.method": %w`, err)}
		}
	}
	if _, ok := aac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "AppAction.app"`)}
	}
	return nil
}

func (aac *AppActionCreate) sqlSave(ctx context.Context) (*AppAction, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *AppActionCreate) createSpec() (*AppAction, *sqlgraph.CreateSpec) {
	var (
		_node = &AppAction{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(appaction.Table, sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt))
	)
	if id, ok := aac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aac.mutation.CreatedBy(); ok {
		_spec.SetField(appaction.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.SetField(appaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aac.mutation.UpdatedBy(); ok {
		_spec.SetField(appaction.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.SetField(appaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aac.mutation.Name(); ok {
		_spec.SetField(appaction.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := aac.mutation.Kind(); ok {
		_spec.SetField(appaction.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := aac.mutation.Method(); ok {
		_spec.SetField(appaction.FieldMethod, field.TypeEnum, value)
		_node.Method = value
	}
	if value, ok := aac.mutation.Comments(); ok {
		_spec.SetField(appaction.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if nodes := aac.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appaction.AppTable,
			Columns: []string{appaction.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aac.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appaction.MenusTable,
			Columns: []string{appaction.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aac.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appaction.ResourcesTable,
			Columns: []string{appaction.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppActionCreateBulk is the builder for creating many AppAction entities in bulk.
type AppActionCreateBulk struct {
	config
	builders []*AppActionCreate
}

// Save creates the AppAction entities in the database.
func (aacb *AppActionCreateBulk) Save(ctx context.Context) ([]*AppAction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AppAction, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AppActionCreateBulk) SaveX(ctx context.Context) []*AppAction {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AppActionCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AppActionCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}
