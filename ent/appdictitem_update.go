// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/appdictitem"
	"github.com/woocoos/knockout/ent/predicate"
)

// AppDictItemUpdate is the builder for updating AppDictItem entities.
type AppDictItemUpdate struct {
	config
	hooks    []Hook
	mutation *AppDictItemMutation
}

// Where appends a list predicates to the AppDictItemUpdate builder.
func (adiu *AppDictItemUpdate) Where(ps ...predicate.AppDictItem) *AppDictItemUpdate {
	adiu.mutation.Where(ps...)
	return adiu
}

// SetUpdatedBy sets the "updated_by" field.
func (adiu *AppDictItemUpdate) SetUpdatedBy(i int) *AppDictItemUpdate {
	adiu.mutation.ResetUpdatedBy()
	adiu.mutation.SetUpdatedBy(i)
	return adiu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (adiu *AppDictItemUpdate) SetNillableUpdatedBy(i *int) *AppDictItemUpdate {
	if i != nil {
		adiu.SetUpdatedBy(*i)
	}
	return adiu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (adiu *AppDictItemUpdate) AddUpdatedBy(i int) *AppDictItemUpdate {
	adiu.mutation.AddUpdatedBy(i)
	return adiu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (adiu *AppDictItemUpdate) ClearUpdatedBy() *AppDictItemUpdate {
	adiu.mutation.ClearUpdatedBy()
	return adiu
}

// SetUpdatedAt sets the "updated_at" field.
func (adiu *AppDictItemUpdate) SetUpdatedAt(t time.Time) *AppDictItemUpdate {
	adiu.mutation.SetUpdatedAt(t)
	return adiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adiu *AppDictItemUpdate) SetNillableUpdatedAt(t *time.Time) *AppDictItemUpdate {
	if t != nil {
		adiu.SetUpdatedAt(*t)
	}
	return adiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (adiu *AppDictItemUpdate) ClearUpdatedAt() *AppDictItemUpdate {
	adiu.mutation.ClearUpdatedAt()
	return adiu
}

// SetRefCode sets the "ref_code" field.
func (adiu *AppDictItemUpdate) SetRefCode(s string) *AppDictItemUpdate {
	adiu.mutation.SetRefCode(s)
	return adiu
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (adiu *AppDictItemUpdate) SetNillableRefCode(s *string) *AppDictItemUpdate {
	if s != nil {
		adiu.SetRefCode(*s)
	}
	return adiu
}

// SetName sets the "name" field.
func (adiu *AppDictItemUpdate) SetName(s string) *AppDictItemUpdate {
	adiu.mutation.SetName(s)
	return adiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (adiu *AppDictItemUpdate) SetNillableName(s *string) *AppDictItemUpdate {
	if s != nil {
		adiu.SetName(*s)
	}
	return adiu
}

// SetComments sets the "comments" field.
func (adiu *AppDictItemUpdate) SetComments(s string) *AppDictItemUpdate {
	adiu.mutation.SetComments(s)
	return adiu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (adiu *AppDictItemUpdate) SetNillableComments(s *string) *AppDictItemUpdate {
	if s != nil {
		adiu.SetComments(*s)
	}
	return adiu
}

// ClearComments clears the value of the "comments" field.
func (adiu *AppDictItemUpdate) ClearComments() *AppDictItemUpdate {
	adiu.mutation.ClearComments()
	return adiu
}

// SetDisplaySort sets the "display_sort" field.
func (adiu *AppDictItemUpdate) SetDisplaySort(i int32) *AppDictItemUpdate {
	adiu.mutation.ResetDisplaySort()
	adiu.mutation.SetDisplaySort(i)
	return adiu
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (adiu *AppDictItemUpdate) SetNillableDisplaySort(i *int32) *AppDictItemUpdate {
	if i != nil {
		adiu.SetDisplaySort(*i)
	}
	return adiu
}

// AddDisplaySort adds i to the "display_sort" field.
func (adiu *AppDictItemUpdate) AddDisplaySort(i int32) *AppDictItemUpdate {
	adiu.mutation.AddDisplaySort(i)
	return adiu
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (adiu *AppDictItemUpdate) ClearDisplaySort() *AppDictItemUpdate {
	adiu.mutation.ClearDisplaySort()
	return adiu
}

// SetStatus sets the "status" field.
func (adiu *AppDictItemUpdate) SetStatus(ts typex.SimpleStatus) *AppDictItemUpdate {
	adiu.mutation.SetStatus(ts)
	return adiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (adiu *AppDictItemUpdate) SetNillableStatus(ts *typex.SimpleStatus) *AppDictItemUpdate {
	if ts != nil {
		adiu.SetStatus(*ts)
	}
	return adiu
}

// ClearStatus clears the value of the "status" field.
func (adiu *AppDictItemUpdate) ClearStatus() *AppDictItemUpdate {
	adiu.mutation.ClearStatus()
	return adiu
}

// Mutation returns the AppDictItemMutation object of the builder.
func (adiu *AppDictItemUpdate) Mutation() *AppDictItemMutation {
	return adiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adiu *AppDictItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, adiu.sqlSave, adiu.mutation, adiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adiu *AppDictItemUpdate) SaveX(ctx context.Context) int {
	affected, err := adiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adiu *AppDictItemUpdate) Exec(ctx context.Context) error {
	_, err := adiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adiu *AppDictItemUpdate) ExecX(ctx context.Context) {
	if err := adiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adiu *AppDictItemUpdate) check() error {
	if v, ok := adiu.mutation.Name(); ok {
		if err := appdictitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppDictItem.name": %w`, err)}
		}
	}
	if v, ok := adiu.mutation.Status(); ok {
		if err := appdictitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AppDictItem.status": %w`, err)}
		}
	}
	return nil
}

func (adiu *AppDictItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := adiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appdictitem.Table, appdictitem.Columns, sqlgraph.NewFieldSpec(appdictitem.FieldID, field.TypeInt))
	if ps := adiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adiu.mutation.UpdatedBy(); ok {
		_spec.SetField(appdictitem.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := adiu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(appdictitem.FieldUpdatedBy, field.TypeInt, value)
	}
	if adiu.mutation.UpdatedByCleared() {
		_spec.ClearField(appdictitem.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := adiu.mutation.UpdatedAt(); ok {
		_spec.SetField(appdictitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if adiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(appdictitem.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := adiu.mutation.RefCode(); ok {
		_spec.SetField(appdictitem.FieldRefCode, field.TypeString, value)
	}
	if value, ok := adiu.mutation.Name(); ok {
		_spec.SetField(appdictitem.FieldName, field.TypeString, value)
	}
	if value, ok := adiu.mutation.Comments(); ok {
		_spec.SetField(appdictitem.FieldComments, field.TypeString, value)
	}
	if adiu.mutation.CommentsCleared() {
		_spec.ClearField(appdictitem.FieldComments, field.TypeString)
	}
	if value, ok := adiu.mutation.DisplaySort(); ok {
		_spec.SetField(appdictitem.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := adiu.mutation.AddedDisplaySort(); ok {
		_spec.AddField(appdictitem.FieldDisplaySort, field.TypeInt32, value)
	}
	if adiu.mutation.DisplaySortCleared() {
		_spec.ClearField(appdictitem.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := adiu.mutation.Status(); ok {
		_spec.SetField(appdictitem.FieldStatus, field.TypeEnum, value)
	}
	if adiu.mutation.StatusCleared() {
		_spec.ClearField(appdictitem.FieldStatus, field.TypeEnum)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appdictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adiu.mutation.done = true
	return n, nil
}

// AppDictItemUpdateOne is the builder for updating a single AppDictItem entity.
type AppDictItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppDictItemMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (adiuo *AppDictItemUpdateOne) SetUpdatedBy(i int) *AppDictItemUpdateOne {
	adiuo.mutation.ResetUpdatedBy()
	adiuo.mutation.SetUpdatedBy(i)
	return adiuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (adiuo *AppDictItemUpdateOne) SetNillableUpdatedBy(i *int) *AppDictItemUpdateOne {
	if i != nil {
		adiuo.SetUpdatedBy(*i)
	}
	return adiuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (adiuo *AppDictItemUpdateOne) AddUpdatedBy(i int) *AppDictItemUpdateOne {
	adiuo.mutation.AddUpdatedBy(i)
	return adiuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (adiuo *AppDictItemUpdateOne) ClearUpdatedBy() *AppDictItemUpdateOne {
	adiuo.mutation.ClearUpdatedBy()
	return adiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (adiuo *AppDictItemUpdateOne) SetUpdatedAt(t time.Time) *AppDictItemUpdateOne {
	adiuo.mutation.SetUpdatedAt(t)
	return adiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adiuo *AppDictItemUpdateOne) SetNillableUpdatedAt(t *time.Time) *AppDictItemUpdateOne {
	if t != nil {
		adiuo.SetUpdatedAt(*t)
	}
	return adiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (adiuo *AppDictItemUpdateOne) ClearUpdatedAt() *AppDictItemUpdateOne {
	adiuo.mutation.ClearUpdatedAt()
	return adiuo
}

// SetRefCode sets the "ref_code" field.
func (adiuo *AppDictItemUpdateOne) SetRefCode(s string) *AppDictItemUpdateOne {
	adiuo.mutation.SetRefCode(s)
	return adiuo
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (adiuo *AppDictItemUpdateOne) SetNillableRefCode(s *string) *AppDictItemUpdateOne {
	if s != nil {
		adiuo.SetRefCode(*s)
	}
	return adiuo
}

// SetName sets the "name" field.
func (adiuo *AppDictItemUpdateOne) SetName(s string) *AppDictItemUpdateOne {
	adiuo.mutation.SetName(s)
	return adiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (adiuo *AppDictItemUpdateOne) SetNillableName(s *string) *AppDictItemUpdateOne {
	if s != nil {
		adiuo.SetName(*s)
	}
	return adiuo
}

// SetComments sets the "comments" field.
func (adiuo *AppDictItemUpdateOne) SetComments(s string) *AppDictItemUpdateOne {
	adiuo.mutation.SetComments(s)
	return adiuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (adiuo *AppDictItemUpdateOne) SetNillableComments(s *string) *AppDictItemUpdateOne {
	if s != nil {
		adiuo.SetComments(*s)
	}
	return adiuo
}

// ClearComments clears the value of the "comments" field.
func (adiuo *AppDictItemUpdateOne) ClearComments() *AppDictItemUpdateOne {
	adiuo.mutation.ClearComments()
	return adiuo
}

// SetDisplaySort sets the "display_sort" field.
func (adiuo *AppDictItemUpdateOne) SetDisplaySort(i int32) *AppDictItemUpdateOne {
	adiuo.mutation.ResetDisplaySort()
	adiuo.mutation.SetDisplaySort(i)
	return adiuo
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (adiuo *AppDictItemUpdateOne) SetNillableDisplaySort(i *int32) *AppDictItemUpdateOne {
	if i != nil {
		adiuo.SetDisplaySort(*i)
	}
	return adiuo
}

// AddDisplaySort adds i to the "display_sort" field.
func (adiuo *AppDictItemUpdateOne) AddDisplaySort(i int32) *AppDictItemUpdateOne {
	adiuo.mutation.AddDisplaySort(i)
	return adiuo
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (adiuo *AppDictItemUpdateOne) ClearDisplaySort() *AppDictItemUpdateOne {
	adiuo.mutation.ClearDisplaySort()
	return adiuo
}

// SetStatus sets the "status" field.
func (adiuo *AppDictItemUpdateOne) SetStatus(ts typex.SimpleStatus) *AppDictItemUpdateOne {
	adiuo.mutation.SetStatus(ts)
	return adiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (adiuo *AppDictItemUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *AppDictItemUpdateOne {
	if ts != nil {
		adiuo.SetStatus(*ts)
	}
	return adiuo
}

// ClearStatus clears the value of the "status" field.
func (adiuo *AppDictItemUpdateOne) ClearStatus() *AppDictItemUpdateOne {
	adiuo.mutation.ClearStatus()
	return adiuo
}

// Mutation returns the AppDictItemMutation object of the builder.
func (adiuo *AppDictItemUpdateOne) Mutation() *AppDictItemMutation {
	return adiuo.mutation
}

// Where appends a list predicates to the AppDictItemUpdate builder.
func (adiuo *AppDictItemUpdateOne) Where(ps ...predicate.AppDictItem) *AppDictItemUpdateOne {
	adiuo.mutation.Where(ps...)
	return adiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (adiuo *AppDictItemUpdateOne) Select(field string, fields ...string) *AppDictItemUpdateOne {
	adiuo.fields = append([]string{field}, fields...)
	return adiuo
}

// Save executes the query and returns the updated AppDictItem entity.
func (adiuo *AppDictItemUpdateOne) Save(ctx context.Context) (*AppDictItem, error) {
	return withHooks(ctx, adiuo.sqlSave, adiuo.mutation, adiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adiuo *AppDictItemUpdateOne) SaveX(ctx context.Context) *AppDictItem {
	node, err := adiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (adiuo *AppDictItemUpdateOne) Exec(ctx context.Context) error {
	_, err := adiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adiuo *AppDictItemUpdateOne) ExecX(ctx context.Context) {
	if err := adiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adiuo *AppDictItemUpdateOne) check() error {
	if v, ok := adiuo.mutation.Name(); ok {
		if err := appdictitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppDictItem.name": %w`, err)}
		}
	}
	if v, ok := adiuo.mutation.Status(); ok {
		if err := appdictitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AppDictItem.status": %w`, err)}
		}
	}
	return nil
}

func (adiuo *AppDictItemUpdateOne) sqlSave(ctx context.Context) (_node *AppDictItem, err error) {
	if err := adiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appdictitem.Table, appdictitem.Columns, sqlgraph.NewFieldSpec(appdictitem.FieldID, field.TypeInt))
	id, ok := adiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppDictItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := adiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appdictitem.FieldID)
		for _, f := range fields {
			if !appdictitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appdictitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := adiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(appdictitem.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := adiuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(appdictitem.FieldUpdatedBy, field.TypeInt, value)
	}
	if adiuo.mutation.UpdatedByCleared() {
		_spec.ClearField(appdictitem.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := adiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appdictitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if adiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(appdictitem.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := adiuo.mutation.RefCode(); ok {
		_spec.SetField(appdictitem.FieldRefCode, field.TypeString, value)
	}
	if value, ok := adiuo.mutation.Name(); ok {
		_spec.SetField(appdictitem.FieldName, field.TypeString, value)
	}
	if value, ok := adiuo.mutation.Comments(); ok {
		_spec.SetField(appdictitem.FieldComments, field.TypeString, value)
	}
	if adiuo.mutation.CommentsCleared() {
		_spec.ClearField(appdictitem.FieldComments, field.TypeString)
	}
	if value, ok := adiuo.mutation.DisplaySort(); ok {
		_spec.SetField(appdictitem.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := adiuo.mutation.AddedDisplaySort(); ok {
		_spec.AddField(appdictitem.FieldDisplaySort, field.TypeInt32, value)
	}
	if adiuo.mutation.DisplaySortCleared() {
		_spec.ClearField(appdictitem.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := adiuo.mutation.Status(); ok {
		_spec.SetField(appdictitem.FieldStatus, field.TypeEnum, value)
	}
	if adiuo.mutation.StatusCleared() {
		_spec.ClearField(appdictitem.FieldStatus, field.TypeEnum)
	}
	_node = &AppDictItem{config: adiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, adiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appdictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	adiuo.mutation.done = true
	return _node, nil
}
