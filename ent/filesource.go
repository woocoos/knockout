// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/filesource"
)

// FileSource is the model entity for the FileSource schema.
type FileSource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 文件来源
	Kind filesource.Kind `json:"kind,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// 对外服务的访问域名
	Endpoint string `json:"endpoint,omitempty"`
	// 地域，数据存储的物理位置。本地存储为：localhost
	Region string `json:"region,omitempty"`
	// 文件存储空间
	Bucket string `json:"bucket,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileSourceQuery when eager-loading is set.
	Edges        FileSourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileSourceEdges holds the relations/edges for other nodes in the graph.
type FileSourceEdges struct {
	// 所有文件
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedFiles map[string][]*File
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FileSourceEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileSource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filesource.FieldID, filesource.FieldCreatedBy, filesource.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case filesource.FieldKind, filesource.FieldComments, filesource.FieldEndpoint, filesource.FieldRegion, filesource.FieldBucket:
			values[i] = new(sql.NullString)
		case filesource.FieldCreatedAt, filesource.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileSource fields.
func (fs *FileSource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filesource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fs.ID = int(value.Int64)
		case filesource.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fs.CreatedBy = int(value.Int64)
			}
		case filesource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fs.CreatedAt = value.Time
			}
		case filesource.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fs.UpdatedBy = int(value.Int64)
			}
		case filesource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fs.UpdatedAt = value.Time
			}
		case filesource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				fs.Kind = filesource.Kind(value.String)
			}
		case filesource.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				fs.Comments = value.String
			}
		case filesource.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				fs.Endpoint = value.String
			}
		case filesource.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				fs.Region = value.String
			}
		case filesource.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				fs.Bucket = value.String
			}
		default:
			fs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileSource.
// This includes values selected through modifiers, order, etc.
func (fs *FileSource) Value(name string) (ent.Value, error) {
	return fs.selectValues.Get(name)
}

// QueryFiles queries the "files" edge of the FileSource entity.
func (fs *FileSource) QueryFiles() *FileQuery {
	return NewFileSourceClient(fs.config).QueryFiles(fs)
}

// Update returns a builder for updating this FileSource.
// Note that you need to call FileSource.Unwrap() before calling this method if this FileSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FileSource) Update() *FileSourceUpdateOne {
	return NewFileSourceClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FileSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FileSource) Unwrap() *FileSource {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileSource is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FileSource) String() string {
	var builder strings.Builder
	builder.WriteString("FileSource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fs.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fs.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", fs.Kind))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(fs.Comments)
	builder.WriteString(", ")
	builder.WriteString("endpoint=")
	builder.WriteString(fs.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(fs.Region)
	builder.WriteString(", ")
	builder.WriteString("bucket=")
	builder.WriteString(fs.Bucket)
	builder.WriteByte(')')
	return builder.String()
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (fs *FileSource) NamedFiles(name string) ([]*File, error) {
	if fs.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := fs.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (fs *FileSource) appendNamedFiles(name string, edges ...*File) {
	if fs.Edges.namedFiles == nil {
		fs.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		fs.Edges.namedFiles[name] = []*File{}
	} else {
		fs.Edges.namedFiles[name] = append(fs.Edges.namedFiles[name], edges...)
	}
}

// FileSources is a parsable slice of FileSource.
type FileSources []*FileSource
