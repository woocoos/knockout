// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/codegen/entgen/types"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/apppolicy"
)

// AppPolicy is the model entity for the AppPolicy schema.
type AppPolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 所属应用
	AppID int `json:"app_id,omitempty"`
	// 策略名称
	Name string `json:"name,omitempty"`
	// 描述
	Comments string `json:"comments,omitempty"`
	// 策略规则
	Rules []*types.PolicyRule `json:"rules,omitempty"`
	// 版本号
	Version string `json:"version,omitempty"`
	// 标识是否自动授予到账户
	AutoGrant bool `json:"auto_grant,omitempty"`
	// 状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppPolicyQuery when eager-loading is set.
	Edges        AppPolicyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppPolicyEdges holds the relations/edges for other nodes in the graph.
type AppPolicyEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*AppRole `json:"roles,omitempty"`
	// AppRolePolicy holds the value of the app_role_policy edge.
	AppRolePolicy []*AppRolePolicy `json:"app_role_policy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedRoles         map[string][]*AppRole
	namedAppRolePolicy map[string][]*AppRolePolicy
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppPolicyEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e AppPolicyEdges) RolesOrErr() ([]*AppRole, error) {
	if e.loadedTypes[1] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// AppRolePolicyOrErr returns the AppRolePolicy value or an error if the edge
// was not loaded in eager-loading.
func (e AppPolicyEdges) AppRolePolicyOrErr() ([]*AppRolePolicy, error) {
	if e.loadedTypes[2] {
		return e.AppRolePolicy, nil
	}
	return nil, &NotLoadedError{edge: "app_role_policy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppPolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apppolicy.FieldRules:
			values[i] = new([]byte)
		case apppolicy.FieldAutoGrant:
			values[i] = new(sql.NullBool)
		case apppolicy.FieldID, apppolicy.FieldCreatedBy, apppolicy.FieldUpdatedBy, apppolicy.FieldAppID:
			values[i] = new(sql.NullInt64)
		case apppolicy.FieldName, apppolicy.FieldComments, apppolicy.FieldVersion, apppolicy.FieldStatus:
			values[i] = new(sql.NullString)
		case apppolicy.FieldCreatedAt, apppolicy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppPolicy fields.
func (ap *AppPolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apppolicy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int(value.Int64)
		case apppolicy.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ap.CreatedBy = int(value.Int64)
			}
		case apppolicy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = value.Time
			}
		case apppolicy.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ap.UpdatedBy = int(value.Int64)
			}
		case apppolicy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = value.Time
			}
		case apppolicy.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ap.AppID = int(value.Int64)
			}
		case apppolicy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ap.Name = value.String
			}
		case apppolicy.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				ap.Comments = value.String
			}
		case apppolicy.FieldRules:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rules", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ap.Rules); err != nil {
					return fmt.Errorf("unmarshal field rules: %w", err)
				}
			}
		case apppolicy.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ap.Version = value.String
			}
		case apppolicy.FieldAutoGrant:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_grant", values[i])
			} else if value.Valid {
				ap.AutoGrant = value.Bool
			}
		case apppolicy.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ap.Status = typex.SimpleStatus(value.String)
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppPolicy.
// This includes values selected through modifiers, order, etc.
func (ap *AppPolicy) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// QueryApp queries the "app" edge of the AppPolicy entity.
func (ap *AppPolicy) QueryApp() *AppQuery {
	return NewAppPolicyClient(ap.config).QueryApp(ap)
}

// QueryRoles queries the "roles" edge of the AppPolicy entity.
func (ap *AppPolicy) QueryRoles() *AppRoleQuery {
	return NewAppPolicyClient(ap.config).QueryRoles(ap)
}

// QueryAppRolePolicy queries the "app_role_policy" edge of the AppPolicy entity.
func (ap *AppPolicy) QueryAppRolePolicy() *AppRolePolicyQuery {
	return NewAppPolicyClient(ap.config).QueryAppRolePolicy(ap)
}

// Update returns a builder for updating this AppPolicy.
// Note that you need to call AppPolicy.Unwrap() before calling this method if this AppPolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AppPolicy) Update() *AppPolicyUpdateOne {
	return NewAppPolicyClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AppPolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AppPolicy) Unwrap() *AppPolicy {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppPolicy is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AppPolicy) String() string {
	var builder strings.Builder
	builder.WriteString("AppPolicy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ap.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ap.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ap.AppID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ap.Name)
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(ap.Comments)
	builder.WriteString(", ")
	builder.WriteString("rules=")
	builder.WriteString(fmt.Sprintf("%v", ap.Rules))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ap.Version)
	builder.WriteString(", ")
	builder.WriteString("auto_grant=")
	builder.WriteString(fmt.Sprintf("%v", ap.AutoGrant))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ap.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ap *AppPolicy) NamedRoles(name string) ([]*AppRole, error) {
	if ap.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ap.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ap *AppPolicy) appendNamedRoles(name string, edges ...*AppRole) {
	if ap.Edges.namedRoles == nil {
		ap.Edges.namedRoles = make(map[string][]*AppRole)
	}
	if len(edges) == 0 {
		ap.Edges.namedRoles[name] = []*AppRole{}
	} else {
		ap.Edges.namedRoles[name] = append(ap.Edges.namedRoles[name], edges...)
	}
}

// NamedAppRolePolicy returns the AppRolePolicy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ap *AppPolicy) NamedAppRolePolicy(name string) ([]*AppRolePolicy, error) {
	if ap.Edges.namedAppRolePolicy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ap.Edges.namedAppRolePolicy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ap *AppPolicy) appendNamedAppRolePolicy(name string, edges ...*AppRolePolicy) {
	if ap.Edges.namedAppRolePolicy == nil {
		ap.Edges.namedAppRolePolicy = make(map[string][]*AppRolePolicy)
	}
	if len(edges) == 0 {
		ap.Edges.namedAppRolePolicy[name] = []*AppRolePolicy{}
	} else {
		ap.Edges.namedAppRolePolicy[name] = append(ap.Edges.namedAppRolePolicy[name], edges...)
	}
}

// AppPolicies is a parsable slice of AppPolicy.
type AppPolicies []*AppPolicy
