// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationrole"
	"github.com/woocoos/knockout/ent/organizationuser"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/permissionpolicy"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/user"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OrganizationUpdate) SetUpdatedBy(i int) *OrganizationUpdate {
	ou.mutation.ResetUpdatedBy()
	ou.mutation.SetUpdatedBy(i)
	return ou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableUpdatedBy(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetUpdatedBy(*i)
	}
	return ou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ou *OrganizationUpdate) AddUpdatedBy(i int) *OrganizationUpdate {
	ou.mutation.AddUpdatedBy(i)
	return ou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ou *OrganizationUpdate) ClearUpdatedBy() *OrganizationUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableUpdatedAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrganizationUpdate) ClearUpdatedAt() *OrganizationUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrganizationUpdate) SetDeletedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDeletedAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrganizationUpdate) ClearDeletedAt() *OrganizationUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetOwnerID sets the "owner_id" field.
func (ou *OrganizationUpdate) SetOwnerID(i int) *OrganizationUpdate {
	ou.mutation.SetOwnerID(i)
	return ou
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableOwnerID(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetOwnerID(*i)
	}
	return ou
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ou *OrganizationUpdate) ClearOwnerID() *OrganizationUpdate {
	ou.mutation.ClearOwnerID()
	return ou
}

// SetKind sets the "kind" field.
func (ou *OrganizationUpdate) SetKind(o organization.Kind) *OrganizationUpdate {
	ou.mutation.SetKind(o)
	return ou
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableKind(o *organization.Kind) *OrganizationUpdate {
	if o != nil {
		ou.SetKind(*o)
	}
	return ou
}

// ClearKind clears the value of the "kind" field.
func (ou *OrganizationUpdate) ClearKind() *OrganizationUpdate {
	ou.mutation.ClearKind()
	return ou
}

// SetParentID sets the "parent_id" field.
func (ou *OrganizationUpdate) SetParentID(i int) *OrganizationUpdate {
	ou.mutation.SetParentID(i)
	return ou
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableParentID(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetParentID(*i)
	}
	return ou
}

// SetDomain sets the "domain" field.
func (ou *OrganizationUpdate) SetDomain(s string) *OrganizationUpdate {
	ou.mutation.SetDomain(s)
	return ou
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDomain(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDomain(*s)
	}
	return ou
}

// ClearDomain clears the value of the "domain" field.
func (ou *OrganizationUpdate) ClearDomain() *OrganizationUpdate {
	ou.mutation.ClearDomain()
	return ou
}

// SetCode sets the "code" field.
func (ou *OrganizationUpdate) SetCode(s string) *OrganizationUpdate {
	ou.mutation.SetCode(s)
	return ou
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCode(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCode(*s)
	}
	return ou
}

// ClearCode clears the value of the "code" field.
func (ou *OrganizationUpdate) ClearCode() *OrganizationUpdate {
	ou.mutation.ClearCode()
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetProfile sets the "profile" field.
func (ou *OrganizationUpdate) SetProfile(s string) *OrganizationUpdate {
	ou.mutation.SetProfile(s)
	return ou
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableProfile(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetProfile(*s)
	}
	return ou
}

// ClearProfile clears the value of the "profile" field.
func (ou *OrganizationUpdate) ClearProfile() *OrganizationUpdate {
	ou.mutation.ClearProfile()
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrganizationUpdate) SetStatus(ts typex.SimpleStatus) *OrganizationUpdate {
	ou.mutation.SetStatus(ts)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableStatus(ts *typex.SimpleStatus) *OrganizationUpdate {
	if ts != nil {
		ou.SetStatus(*ts)
	}
	return ou
}

// ClearStatus clears the value of the "status" field.
func (ou *OrganizationUpdate) ClearStatus() *OrganizationUpdate {
	ou.mutation.ClearStatus()
	return ou
}

// SetPath sets the "path" field.
func (ou *OrganizationUpdate) SetPath(s string) *OrganizationUpdate {
	ou.mutation.SetPath(s)
	return ou
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillablePath(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetPath(*s)
	}
	return ou
}

// ClearPath clears the value of the "path" field.
func (ou *OrganizationUpdate) ClearPath() *OrganizationUpdate {
	ou.mutation.ClearPath()
	return ou
}

// SetDisplaySort sets the "display_sort" field.
func (ou *OrganizationUpdate) SetDisplaySort(i int32) *OrganizationUpdate {
	ou.mutation.ResetDisplaySort()
	ou.mutation.SetDisplaySort(i)
	return ou
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDisplaySort(i *int32) *OrganizationUpdate {
	if i != nil {
		ou.SetDisplaySort(*i)
	}
	return ou
}

// AddDisplaySort adds i to the "display_sort" field.
func (ou *OrganizationUpdate) AddDisplaySort(i int32) *OrganizationUpdate {
	ou.mutation.AddDisplaySort(i)
	return ou
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (ou *OrganizationUpdate) ClearDisplaySort() *OrganizationUpdate {
	ou.mutation.ClearDisplaySort()
	return ou
}

// SetCountryCode sets the "country_code" field.
func (ou *OrganizationUpdate) SetCountryCode(s string) *OrganizationUpdate {
	ou.mutation.SetCountryCode(s)
	return ou
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCountryCode(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCountryCode(*s)
	}
	return ou
}

// ClearCountryCode clears the value of the "country_code" field.
func (ou *OrganizationUpdate) ClearCountryCode() *OrganizationUpdate {
	ou.mutation.ClearCountryCode()
	return ou
}

// SetTimezone sets the "timezone" field.
func (ou *OrganizationUpdate) SetTimezone(s string) *OrganizationUpdate {
	ou.mutation.SetTimezone(s)
	return ou
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableTimezone(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetTimezone(*s)
	}
	return ou
}

// ClearTimezone clears the value of the "timezone" field.
func (ou *OrganizationUpdate) ClearTimezone() *OrganizationUpdate {
	ou.mutation.ClearTimezone()
	return ou
}

// SetParent sets the "parent" edge to the Organization entity.
func (ou *OrganizationUpdate) SetParent(o *Organization) *OrganizationUpdate {
	return ou.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (ou *OrganizationUpdate) AddChildIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddChildIDs(ids...)
	return ou
}

// AddChildren adds the "children" edges to the Organization entity.
func (ou *OrganizationUpdate) AddChildren(o ...*Organization) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddChildIDs(ids...)
}

// SetOwner sets the "owner" edge to the User entity.
func (ou *OrganizationUpdate) SetOwner(u *User) *OrganizationUpdate {
	return ou.SetOwnerID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ou *OrganizationUpdate) AddUserIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddUserIDs(ids...)
	return ou
}

// AddUsers adds the "users" edges to the User entity.
func (ou *OrganizationUpdate) AddUsers(u ...*User) *OrganizationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserIDs(ids...)
}

// AddRolesAndGroupIDs adds the "rolesAndGroups" edge to the OrganizationRole entity by IDs.
func (ou *OrganizationUpdate) AddRolesAndGroupIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddRolesAndGroupIDs(ids...)
	return ou
}

// AddRolesAndGroups adds the "rolesAndGroups" edges to the OrganizationRole entity.
func (ou *OrganizationUpdate) AddRolesAndGroups(o ...*OrganizationRole) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddRolesAndGroupIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ou *OrganizationUpdate) AddPermissionIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddPermissionIDs(ids...)
	return ou
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ou *OrganizationUpdate) AddPermissions(p ...*Permission) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPermissionIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the PermissionPolicy entity by IDs.
func (ou *OrganizationUpdate) AddPolicyIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddPolicyIDs(ids...)
	return ou
}

// AddPolicies adds the "policies" edges to the PermissionPolicy entity.
func (ou *OrganizationUpdate) AddPolicies(p ...*PermissionPolicy) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPolicyIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the App entity by IDs.
func (ou *OrganizationUpdate) AddAppIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddAppIDs(ids...)
	return ou
}

// AddApps adds the "apps" edges to the App entity.
func (ou *OrganizationUpdate) AddApps(a ...*App) *OrganizationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.AddAppIDs(ids...)
}

// AddOrganizationUserIDs adds the "organization_user" edge to the OrganizationUser entity by IDs.
func (ou *OrganizationUpdate) AddOrganizationUserIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddOrganizationUserIDs(ids...)
	return ou
}

// AddOrganizationUser adds the "organization_user" edges to the OrganizationUser entity.
func (ou *OrganizationUpdate) AddOrganizationUser(o ...*OrganizationUser) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrganizationUserIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearParent clears the "parent" edge to the Organization entity.
func (ou *OrganizationUpdate) ClearParent() *OrganizationUpdate {
	ou.mutation.ClearParent()
	return ou
}

// ClearChildren clears all "children" edges to the Organization entity.
func (ou *OrganizationUpdate) ClearChildren() *OrganizationUpdate {
	ou.mutation.ClearChildren()
	return ou
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (ou *OrganizationUpdate) RemoveChildIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveChildIDs(ids...)
	return ou
}

// RemoveChildren removes "children" edges to Organization entities.
func (ou *OrganizationUpdate) RemoveChildren(o ...*Organization) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveChildIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (ou *OrganizationUpdate) ClearOwner() *OrganizationUpdate {
	ou.mutation.ClearOwner()
	return ou
}

// ClearUsers clears all "users" edges to the User entity.
func (ou *OrganizationUpdate) ClearUsers() *OrganizationUpdate {
	ou.mutation.ClearUsers()
	return ou
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ou *OrganizationUpdate) RemoveUserIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveUserIDs(ids...)
	return ou
}

// RemoveUsers removes "users" edges to User entities.
func (ou *OrganizationUpdate) RemoveUsers(u ...*User) *OrganizationUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserIDs(ids...)
}

// ClearRolesAndGroups clears all "rolesAndGroups" edges to the OrganizationRole entity.
func (ou *OrganizationUpdate) ClearRolesAndGroups() *OrganizationUpdate {
	ou.mutation.ClearRolesAndGroups()
	return ou
}

// RemoveRolesAndGroupIDs removes the "rolesAndGroups" edge to OrganizationRole entities by IDs.
func (ou *OrganizationUpdate) RemoveRolesAndGroupIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveRolesAndGroupIDs(ids...)
	return ou
}

// RemoveRolesAndGroups removes "rolesAndGroups" edges to OrganizationRole entities.
func (ou *OrganizationUpdate) RemoveRolesAndGroups(o ...*OrganizationRole) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveRolesAndGroupIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ou *OrganizationUpdate) ClearPermissions() *OrganizationUpdate {
	ou.mutation.ClearPermissions()
	return ou
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ou *OrganizationUpdate) RemovePermissionIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemovePermissionIDs(ids...)
	return ou
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ou *OrganizationUpdate) RemovePermissions(p ...*Permission) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePermissionIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the PermissionPolicy entity.
func (ou *OrganizationUpdate) ClearPolicies() *OrganizationUpdate {
	ou.mutation.ClearPolicies()
	return ou
}

// RemovePolicyIDs removes the "policies" edge to PermissionPolicy entities by IDs.
func (ou *OrganizationUpdate) RemovePolicyIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemovePolicyIDs(ids...)
	return ou
}

// RemovePolicies removes "policies" edges to PermissionPolicy entities.
func (ou *OrganizationUpdate) RemovePolicies(p ...*PermissionPolicy) *OrganizationUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePolicyIDs(ids...)
}

// ClearApps clears all "apps" edges to the App entity.
func (ou *OrganizationUpdate) ClearApps() *OrganizationUpdate {
	ou.mutation.ClearApps()
	return ou
}

// RemoveAppIDs removes the "apps" edge to App entities by IDs.
func (ou *OrganizationUpdate) RemoveAppIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveAppIDs(ids...)
	return ou
}

// RemoveApps removes "apps" edges to App entities.
func (ou *OrganizationUpdate) RemoveApps(a ...*App) *OrganizationUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.RemoveAppIDs(ids...)
}

// ClearOrganizationUser clears all "organization_user" edges to the OrganizationUser entity.
func (ou *OrganizationUpdate) ClearOrganizationUser() *OrganizationUpdate {
	ou.mutation.ClearOrganizationUser()
	return ou
}

// RemoveOrganizationUserIDs removes the "organization_user" edge to OrganizationUser entities by IDs.
func (ou *OrganizationUpdate) RemoveOrganizationUserIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveOrganizationUserIDs(ids...)
	return ou
}

// RemoveOrganizationUser removes "organization_user" edges to OrganizationUser entities.
func (ou *OrganizationUpdate) RemoveOrganizationUser(o ...*OrganizationUser) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrganizationUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrganizationMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrganizationUpdate) check() error {
	if v, ok := ou.mutation.Kind(); ok {
		if err := organization.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Organization.kind": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Domain(); ok {
		if err := organization.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Organization.domain": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Code(); ok {
		if err := organization.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Organization.code": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := organization.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Organization.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.CountryCode(); ok {
		if err := organization.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`ent: validator failed for field "Organization.country_code": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Timezone(); ok {
		if err := organization.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "Organization.timezone": %w`, err)}
		}
	}
	if _, ok := ou.mutation.ParentID(); ou.mutation.ParentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Organization.parent"`)
	}
	return nil
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(organization.FieldUpdatedBy, field.TypeInt, value)
	}
	if ou.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Kind(); ok {
		_spec.SetField(organization.FieldKind, field.TypeEnum, value)
	}
	if ou.mutation.KindCleared() {
		_spec.ClearField(organization.FieldKind, field.TypeEnum)
	}
	if value, ok := ou.mutation.Domain(); ok {
		_spec.SetField(organization.FieldDomain, field.TypeString, value)
	}
	if ou.mutation.DomainCleared() {
		_spec.ClearField(organization.FieldDomain, field.TypeString)
	}
	if value, ok := ou.mutation.Code(); ok {
		_spec.SetField(organization.FieldCode, field.TypeString, value)
	}
	if ou.mutation.CodeCleared() {
		_spec.ClearField(organization.FieldCode, field.TypeString)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Profile(); ok {
		_spec.SetField(organization.FieldProfile, field.TypeString, value)
	}
	if ou.mutation.ProfileCleared() {
		_spec.ClearField(organization.FieldProfile, field.TypeString)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(organization.FieldStatus, field.TypeEnum, value)
	}
	if ou.mutation.StatusCleared() {
		_spec.ClearField(organization.FieldStatus, field.TypeEnum)
	}
	if value, ok := ou.mutation.Path(); ok {
		_spec.SetField(organization.FieldPath, field.TypeString, value)
	}
	if ou.mutation.PathCleared() {
		_spec.ClearField(organization.FieldPath, field.TypeString)
	}
	if value, ok := ou.mutation.DisplaySort(); ok {
		_spec.SetField(organization.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedDisplaySort(); ok {
		_spec.AddField(organization.FieldDisplaySort, field.TypeInt32, value)
	}
	if ou.mutation.DisplaySortCleared() {
		_spec.ClearField(organization.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := ou.mutation.CountryCode(); ok {
		_spec.SetField(organization.FieldCountryCode, field.TypeString, value)
	}
	if ou.mutation.CountryCodeCleared() {
		_spec.ClearField(organization.FieldCountryCode, field.TypeString)
	}
	if value, ok := ou.mutation.Timezone(); ok {
		_spec.SetField(organization.FieldTimezone, field.TypeString, value)
	}
	if ou.mutation.TimezoneCleared() {
		_spec.ClearField(organization.FieldTimezone, field.TypeString)
	}
	if ou.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.OwnerTable,
			Columns: []string{organization.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.OwnerTable,
			Columns: []string{organization.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		createE := &OrganizationUserCreate{config: ou.config, mutation: newOrganizationUserMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationUserCreate{config: ou.config, mutation: newOrganizationUserMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationUserCreate{config: ou.config, mutation: newOrganizationUserMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesAndGroupsTable,
			Columns: []string{organization.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRolesAndGroupsIDs(); len(nodes) > 0 && !ou.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesAndGroupsTable,
			Columns: []string{organization.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RolesAndGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesAndGroupsTable,
			Columns: []string{organization.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PermissionsTable,
			Columns: []string{organization.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ou.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PermissionsTable,
			Columns: []string{organization.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PermissionsTable,
			Columns: []string{organization.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PoliciesTable,
			Columns: []string{organization.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionpolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !ou.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PoliciesTable,
			Columns: []string{organization.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PoliciesTable,
			Columns: []string{organization.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.AppsTable,
			Columns: organization.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		createE := &OrganizationAppCreate{config: ou.config, mutation: newOrganizationAppMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAppsIDs(); len(nodes) > 0 && !ou.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.AppsTable,
			Columns: organization.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationAppCreate{config: ou.config, mutation: newOrganizationAppMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.AppsTable,
			Columns: organization.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationAppCreate{config: ou.config, mutation: newOrganizationAppMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrganizationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.OrganizationUserTable,
			Columns: []string{organization.OrganizationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrganizationUserIDs(); len(nodes) > 0 && !ou.mutation.OrganizationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.OrganizationUserTable,
			Columns: []string{organization.OrganizationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrganizationUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.OrganizationUserTable,
			Columns: []string{organization.OrganizationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OrganizationUpdateOne) SetUpdatedBy(i int) *OrganizationUpdateOne {
	ouo.mutation.ResetUpdatedBy()
	ouo.mutation.SetUpdatedBy(i)
	return ouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableUpdatedBy(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetUpdatedBy(*i)
	}
	return ouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ouo *OrganizationUpdateOne) AddUpdatedBy(i int) *OrganizationUpdateOne {
	ouo.mutation.AddUpdatedBy(i)
	return ouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ouo *OrganizationUpdateOne) ClearUpdatedBy() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrganizationUpdateOne) ClearUpdatedAt() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrganizationUpdateOne) SetDeletedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDeletedAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrganizationUpdateOne) ClearDeletedAt() *OrganizationUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetOwnerID sets the "owner_id" field.
func (ouo *OrganizationUpdateOne) SetOwnerID(i int) *OrganizationUpdateOne {
	ouo.mutation.SetOwnerID(i)
	return ouo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableOwnerID(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetOwnerID(*i)
	}
	return ouo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ouo *OrganizationUpdateOne) ClearOwnerID() *OrganizationUpdateOne {
	ouo.mutation.ClearOwnerID()
	return ouo
}

// SetKind sets the "kind" field.
func (ouo *OrganizationUpdateOne) SetKind(o organization.Kind) *OrganizationUpdateOne {
	ouo.mutation.SetKind(o)
	return ouo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableKind(o *organization.Kind) *OrganizationUpdateOne {
	if o != nil {
		ouo.SetKind(*o)
	}
	return ouo
}

// ClearKind clears the value of the "kind" field.
func (ouo *OrganizationUpdateOne) ClearKind() *OrganizationUpdateOne {
	ouo.mutation.ClearKind()
	return ouo
}

// SetParentID sets the "parent_id" field.
func (ouo *OrganizationUpdateOne) SetParentID(i int) *OrganizationUpdateOne {
	ouo.mutation.SetParentID(i)
	return ouo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableParentID(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetParentID(*i)
	}
	return ouo
}

// SetDomain sets the "domain" field.
func (ouo *OrganizationUpdateOne) SetDomain(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDomain(s)
	return ouo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDomain(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDomain(*s)
	}
	return ouo
}

// ClearDomain clears the value of the "domain" field.
func (ouo *OrganizationUpdateOne) ClearDomain() *OrganizationUpdateOne {
	ouo.mutation.ClearDomain()
	return ouo
}

// SetCode sets the "code" field.
func (ouo *OrganizationUpdateOne) SetCode(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCode(s)
	return ouo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCode(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCode(*s)
	}
	return ouo
}

// ClearCode clears the value of the "code" field.
func (ouo *OrganizationUpdateOne) ClearCode() *OrganizationUpdateOne {
	ouo.mutation.ClearCode()
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetProfile sets the "profile" field.
func (ouo *OrganizationUpdateOne) SetProfile(s string) *OrganizationUpdateOne {
	ouo.mutation.SetProfile(s)
	return ouo
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableProfile(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetProfile(*s)
	}
	return ouo
}

// ClearProfile clears the value of the "profile" field.
func (ouo *OrganizationUpdateOne) ClearProfile() *OrganizationUpdateOne {
	ouo.mutation.ClearProfile()
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrganizationUpdateOne) SetStatus(ts typex.SimpleStatus) *OrganizationUpdateOne {
	ouo.mutation.SetStatus(ts)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *OrganizationUpdateOne {
	if ts != nil {
		ouo.SetStatus(*ts)
	}
	return ouo
}

// ClearStatus clears the value of the "status" field.
func (ouo *OrganizationUpdateOne) ClearStatus() *OrganizationUpdateOne {
	ouo.mutation.ClearStatus()
	return ouo
}

// SetPath sets the "path" field.
func (ouo *OrganizationUpdateOne) SetPath(s string) *OrganizationUpdateOne {
	ouo.mutation.SetPath(s)
	return ouo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillablePath(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetPath(*s)
	}
	return ouo
}

// ClearPath clears the value of the "path" field.
func (ouo *OrganizationUpdateOne) ClearPath() *OrganizationUpdateOne {
	ouo.mutation.ClearPath()
	return ouo
}

// SetDisplaySort sets the "display_sort" field.
func (ouo *OrganizationUpdateOne) SetDisplaySort(i int32) *OrganizationUpdateOne {
	ouo.mutation.ResetDisplaySort()
	ouo.mutation.SetDisplaySort(i)
	return ouo
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDisplaySort(i *int32) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetDisplaySort(*i)
	}
	return ouo
}

// AddDisplaySort adds i to the "display_sort" field.
func (ouo *OrganizationUpdateOne) AddDisplaySort(i int32) *OrganizationUpdateOne {
	ouo.mutation.AddDisplaySort(i)
	return ouo
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (ouo *OrganizationUpdateOne) ClearDisplaySort() *OrganizationUpdateOne {
	ouo.mutation.ClearDisplaySort()
	return ouo
}

// SetCountryCode sets the "country_code" field.
func (ouo *OrganizationUpdateOne) SetCountryCode(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCountryCode(s)
	return ouo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCountryCode(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCountryCode(*s)
	}
	return ouo
}

// ClearCountryCode clears the value of the "country_code" field.
func (ouo *OrganizationUpdateOne) ClearCountryCode() *OrganizationUpdateOne {
	ouo.mutation.ClearCountryCode()
	return ouo
}

// SetTimezone sets the "timezone" field.
func (ouo *OrganizationUpdateOne) SetTimezone(s string) *OrganizationUpdateOne {
	ouo.mutation.SetTimezone(s)
	return ouo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableTimezone(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetTimezone(*s)
	}
	return ouo
}

// ClearTimezone clears the value of the "timezone" field.
func (ouo *OrganizationUpdateOne) ClearTimezone() *OrganizationUpdateOne {
	ouo.mutation.ClearTimezone()
	return ouo
}

// SetParent sets the "parent" edge to the Organization entity.
func (ouo *OrganizationUpdateOne) SetParent(o *Organization) *OrganizationUpdateOne {
	return ouo.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (ouo *OrganizationUpdateOne) AddChildIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddChildIDs(ids...)
	return ouo
}

// AddChildren adds the "children" edges to the Organization entity.
func (ouo *OrganizationUpdateOne) AddChildren(o ...*Organization) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddChildIDs(ids...)
}

// SetOwner sets the "owner" edge to the User entity.
func (ouo *OrganizationUpdateOne) SetOwner(u *User) *OrganizationUpdateOne {
	return ouo.SetOwnerID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ouo *OrganizationUpdateOne) AddUserIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddUserIDs(ids...)
	return ouo
}

// AddUsers adds the "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) AddUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserIDs(ids...)
}

// AddRolesAndGroupIDs adds the "rolesAndGroups" edge to the OrganizationRole entity by IDs.
func (ouo *OrganizationUpdateOne) AddRolesAndGroupIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddRolesAndGroupIDs(ids...)
	return ouo
}

// AddRolesAndGroups adds the "rolesAndGroups" edges to the OrganizationRole entity.
func (ouo *OrganizationUpdateOne) AddRolesAndGroups(o ...*OrganizationRole) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddRolesAndGroupIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ouo *OrganizationUpdateOne) AddPermissionIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddPermissionIDs(ids...)
	return ouo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ouo *OrganizationUpdateOne) AddPermissions(p ...*Permission) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPermissionIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the PermissionPolicy entity by IDs.
func (ouo *OrganizationUpdateOne) AddPolicyIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddPolicyIDs(ids...)
	return ouo
}

// AddPolicies adds the "policies" edges to the PermissionPolicy entity.
func (ouo *OrganizationUpdateOne) AddPolicies(p ...*PermissionPolicy) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPolicyIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the App entity by IDs.
func (ouo *OrganizationUpdateOne) AddAppIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddAppIDs(ids...)
	return ouo
}

// AddApps adds the "apps" edges to the App entity.
func (ouo *OrganizationUpdateOne) AddApps(a ...*App) *OrganizationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.AddAppIDs(ids...)
}

// AddOrganizationUserIDs adds the "organization_user" edge to the OrganizationUser entity by IDs.
func (ouo *OrganizationUpdateOne) AddOrganizationUserIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddOrganizationUserIDs(ids...)
	return ouo
}

// AddOrganizationUser adds the "organization_user" edges to the OrganizationUser entity.
func (ouo *OrganizationUpdateOne) AddOrganizationUser(o ...*OrganizationUser) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrganizationUserIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearParent clears the "parent" edge to the Organization entity.
func (ouo *OrganizationUpdateOne) ClearParent() *OrganizationUpdateOne {
	ouo.mutation.ClearParent()
	return ouo
}

// ClearChildren clears all "children" edges to the Organization entity.
func (ouo *OrganizationUpdateOne) ClearChildren() *OrganizationUpdateOne {
	ouo.mutation.ClearChildren()
	return ouo
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveChildIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveChildIDs(ids...)
	return ouo
}

// RemoveChildren removes "children" edges to Organization entities.
func (ouo *OrganizationUpdateOne) RemoveChildren(o ...*Organization) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveChildIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (ouo *OrganizationUpdateOne) ClearOwner() *OrganizationUpdateOne {
	ouo.mutation.ClearOwner()
	return ouo
}

// ClearUsers clears all "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) ClearUsers() *OrganizationUpdateOne {
	ouo.mutation.ClearUsers()
	return ouo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveUserIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveUserIDs(ids...)
	return ouo
}

// RemoveUsers removes "users" edges to User entities.
func (ouo *OrganizationUpdateOne) RemoveUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserIDs(ids...)
}

// ClearRolesAndGroups clears all "rolesAndGroups" edges to the OrganizationRole entity.
func (ouo *OrganizationUpdateOne) ClearRolesAndGroups() *OrganizationUpdateOne {
	ouo.mutation.ClearRolesAndGroups()
	return ouo
}

// RemoveRolesAndGroupIDs removes the "rolesAndGroups" edge to OrganizationRole entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveRolesAndGroupIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveRolesAndGroupIDs(ids...)
	return ouo
}

// RemoveRolesAndGroups removes "rolesAndGroups" edges to OrganizationRole entities.
func (ouo *OrganizationUpdateOne) RemoveRolesAndGroups(o ...*OrganizationRole) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveRolesAndGroupIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ouo *OrganizationUpdateOne) ClearPermissions() *OrganizationUpdateOne {
	ouo.mutation.ClearPermissions()
	return ouo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ouo *OrganizationUpdateOne) RemovePermissionIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemovePermissionIDs(ids...)
	return ouo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ouo *OrganizationUpdateOne) RemovePermissions(p ...*Permission) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePermissionIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the PermissionPolicy entity.
func (ouo *OrganizationUpdateOne) ClearPolicies() *OrganizationUpdateOne {
	ouo.mutation.ClearPolicies()
	return ouo
}

// RemovePolicyIDs removes the "policies" edge to PermissionPolicy entities by IDs.
func (ouo *OrganizationUpdateOne) RemovePolicyIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemovePolicyIDs(ids...)
	return ouo
}

// RemovePolicies removes "policies" edges to PermissionPolicy entities.
func (ouo *OrganizationUpdateOne) RemovePolicies(p ...*PermissionPolicy) *OrganizationUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePolicyIDs(ids...)
}

// ClearApps clears all "apps" edges to the App entity.
func (ouo *OrganizationUpdateOne) ClearApps() *OrganizationUpdateOne {
	ouo.mutation.ClearApps()
	return ouo
}

// RemoveAppIDs removes the "apps" edge to App entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveAppIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveAppIDs(ids...)
	return ouo
}

// RemoveApps removes "apps" edges to App entities.
func (ouo *OrganizationUpdateOne) RemoveApps(a ...*App) *OrganizationUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.RemoveAppIDs(ids...)
}

// ClearOrganizationUser clears all "organization_user" edges to the OrganizationUser entity.
func (ouo *OrganizationUpdateOne) ClearOrganizationUser() *OrganizationUpdateOne {
	ouo.mutation.ClearOrganizationUser()
	return ouo
}

// RemoveOrganizationUserIDs removes the "organization_user" edge to OrganizationUser entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveOrganizationUserIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveOrganizationUserIDs(ids...)
	return ouo
}

// RemoveOrganizationUser removes "organization_user" edges to OrganizationUser entities.
func (ouo *OrganizationUpdateOne) RemoveOrganizationUser(o ...*OrganizationUser) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrganizationUserIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	return withHooks[*Organization, OrganizationMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrganizationUpdateOne) check() error {
	if v, ok := ouo.mutation.Kind(); ok {
		if err := organization.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Organization.kind": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Domain(); ok {
		if err := organization.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Organization.domain": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Code(); ok {
		if err := organization.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Organization.code": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := organization.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Organization.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.CountryCode(); ok {
		if err := organization.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`ent: validator failed for field "Organization.country_code": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Timezone(); ok {
		if err := organization.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "Organization.timezone": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.ParentID(); ouo.mutation.ParentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Organization.parent"`)
	}
	return nil
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(organization.FieldUpdatedBy, field.TypeInt, value)
	}
	if ouo.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Kind(); ok {
		_spec.SetField(organization.FieldKind, field.TypeEnum, value)
	}
	if ouo.mutation.KindCleared() {
		_spec.ClearField(organization.FieldKind, field.TypeEnum)
	}
	if value, ok := ouo.mutation.Domain(); ok {
		_spec.SetField(organization.FieldDomain, field.TypeString, value)
	}
	if ouo.mutation.DomainCleared() {
		_spec.ClearField(organization.FieldDomain, field.TypeString)
	}
	if value, ok := ouo.mutation.Code(); ok {
		_spec.SetField(organization.FieldCode, field.TypeString, value)
	}
	if ouo.mutation.CodeCleared() {
		_spec.ClearField(organization.FieldCode, field.TypeString)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Profile(); ok {
		_spec.SetField(organization.FieldProfile, field.TypeString, value)
	}
	if ouo.mutation.ProfileCleared() {
		_spec.ClearField(organization.FieldProfile, field.TypeString)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(organization.FieldStatus, field.TypeEnum, value)
	}
	if ouo.mutation.StatusCleared() {
		_spec.ClearField(organization.FieldStatus, field.TypeEnum)
	}
	if value, ok := ouo.mutation.Path(); ok {
		_spec.SetField(organization.FieldPath, field.TypeString, value)
	}
	if ouo.mutation.PathCleared() {
		_spec.ClearField(organization.FieldPath, field.TypeString)
	}
	if value, ok := ouo.mutation.DisplaySort(); ok {
		_spec.SetField(organization.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedDisplaySort(); ok {
		_spec.AddField(organization.FieldDisplaySort, field.TypeInt32, value)
	}
	if ouo.mutation.DisplaySortCleared() {
		_spec.ClearField(organization.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := ouo.mutation.CountryCode(); ok {
		_spec.SetField(organization.FieldCountryCode, field.TypeString, value)
	}
	if ouo.mutation.CountryCodeCleared() {
		_spec.ClearField(organization.FieldCountryCode, field.TypeString)
	}
	if value, ok := ouo.mutation.Timezone(); ok {
		_spec.SetField(organization.FieldTimezone, field.TypeString, value)
	}
	if ouo.mutation.TimezoneCleared() {
		_spec.ClearField(organization.FieldTimezone, field.TypeString)
	}
	if ouo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.OwnerTable,
			Columns: []string{organization.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.OwnerTable,
			Columns: []string{organization.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		createE := &OrganizationUserCreate{config: ouo.config, mutation: newOrganizationUserMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationUserCreate{config: ouo.config, mutation: newOrganizationUserMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationUserCreate{config: ouo.config, mutation: newOrganizationUserMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesAndGroupsTable,
			Columns: []string{organization.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRolesAndGroupsIDs(); len(nodes) > 0 && !ouo.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesAndGroupsTable,
			Columns: []string{organization.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RolesAndGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RolesAndGroupsTable,
			Columns: []string{organization.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PermissionsTable,
			Columns: []string{organization.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ouo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PermissionsTable,
			Columns: []string{organization.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PermissionsTable,
			Columns: []string{organization.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PoliciesTable,
			Columns: []string{organization.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionpolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !ouo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PoliciesTable,
			Columns: []string{organization.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.PoliciesTable,
			Columns: []string{organization.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permissionpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.AppsTable,
			Columns: organization.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		createE := &OrganizationAppCreate{config: ouo.config, mutation: newOrganizationAppMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAppsIDs(); len(nodes) > 0 && !ouo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.AppsTable,
			Columns: organization.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationAppCreate{config: ouo.config, mutation: newOrganizationAppMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.AppsTable,
			Columns: organization.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrganizationAppCreate{config: ouo.config, mutation: newOrganizationAppMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrganizationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.OrganizationUserTable,
			Columns: []string{organization.OrganizationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrganizationUserIDs(); len(nodes) > 0 && !ouo.mutation.OrganizationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.OrganizationUserTable,
			Columns: []string{organization.OrganizationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrganizationUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.OrganizationUserTable,
			Columns: []string{organization.OrganizationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organizationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
