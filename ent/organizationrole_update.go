// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationrole"
	"github.com/woocoos/knockout/ent/predicate"
)

// OrganizationRoleUpdate is the builder for updating OrganizationRole entities.
type OrganizationRoleUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationRoleMutation
}

// Where appends a list predicates to the OrganizationRoleUpdate builder.
func (oru *OrganizationRoleUpdate) Where(ps ...predicate.OrganizationRole) *OrganizationRoleUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetUpdatedBy sets the "updated_by" field.
func (oru *OrganizationRoleUpdate) SetUpdatedBy(i int) *OrganizationRoleUpdate {
	oru.mutation.ResetUpdatedBy()
	oru.mutation.SetUpdatedBy(i)
	return oru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableUpdatedBy(i *int) *OrganizationRoleUpdate {
	if i != nil {
		oru.SetUpdatedBy(*i)
	}
	return oru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (oru *OrganizationRoleUpdate) AddUpdatedBy(i int) *OrganizationRoleUpdate {
	oru.mutation.AddUpdatedBy(i)
	return oru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oru *OrganizationRoleUpdate) ClearUpdatedBy() *OrganizationRoleUpdate {
	oru.mutation.ClearUpdatedBy()
	return oru
}

// SetUpdatedAt sets the "updated_at" field.
func (oru *OrganizationRoleUpdate) SetUpdatedAt(t time.Time) *OrganizationRoleUpdate {
	oru.mutation.SetUpdatedAt(t)
	return oru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableUpdatedAt(t *time.Time) *OrganizationRoleUpdate {
	if t != nil {
		oru.SetUpdatedAt(*t)
	}
	return oru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oru *OrganizationRoleUpdate) ClearUpdatedAt() *OrganizationRoleUpdate {
	oru.mutation.ClearUpdatedAt()
	return oru
}

// SetOrgID sets the "org_id" field.
func (oru *OrganizationRoleUpdate) SetOrgID(i int) *OrganizationRoleUpdate {
	oru.mutation.SetOrgID(i)
	return oru
}

// SetKind sets the "kind" field.
func (oru *OrganizationRoleUpdate) SetKind(o organizationrole.Kind) *OrganizationRoleUpdate {
	oru.mutation.SetKind(o)
	return oru
}

// SetName sets the "name" field.
func (oru *OrganizationRoleUpdate) SetName(s string) *OrganizationRoleUpdate {
	oru.mutation.SetName(s)
	return oru
}

// SetAppRoleID sets the "app_role_id" field.
func (oru *OrganizationRoleUpdate) SetAppRoleID(i int) *OrganizationRoleUpdate {
	oru.mutation.ResetAppRoleID()
	oru.mutation.SetAppRoleID(i)
	return oru
}

// SetNillableAppRoleID sets the "app_role_id" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableAppRoleID(i *int) *OrganizationRoleUpdate {
	if i != nil {
		oru.SetAppRoleID(*i)
	}
	return oru
}

// AddAppRoleID adds i to the "app_role_id" field.
func (oru *OrganizationRoleUpdate) AddAppRoleID(i int) *OrganizationRoleUpdate {
	oru.mutation.AddAppRoleID(i)
	return oru
}

// ClearAppRoleID clears the value of the "app_role_id" field.
func (oru *OrganizationRoleUpdate) ClearAppRoleID() *OrganizationRoleUpdate {
	oru.mutation.ClearAppRoleID()
	return oru
}

// SetComments sets the "comments" field.
func (oru *OrganizationRoleUpdate) SetComments(s string) *OrganizationRoleUpdate {
	oru.mutation.SetComments(s)
	return oru
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (oru *OrganizationRoleUpdate) SetNillableComments(s *string) *OrganizationRoleUpdate {
	if s != nil {
		oru.SetComments(*s)
	}
	return oru
}

// ClearComments clears the value of the "comments" field.
func (oru *OrganizationRoleUpdate) ClearComments() *OrganizationRoleUpdate {
	oru.mutation.ClearComments()
	return oru
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oru *OrganizationRoleUpdate) SetOrganizationID(id int) *OrganizationRoleUpdate {
	oru.mutation.SetOrganizationID(id)
	return oru
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oru *OrganizationRoleUpdate) SetOrganization(o *Organization) *OrganizationRoleUpdate {
	return oru.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationRoleMutation object of the builder.
func (oru *OrganizationRoleUpdate) Mutation() *OrganizationRoleMutation {
	return oru.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oru *OrganizationRoleUpdate) ClearOrganization() *OrganizationRoleUpdate {
	oru.mutation.ClearOrganization()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OrganizationRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrganizationRoleMutation](ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OrganizationRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OrganizationRoleUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OrganizationRoleUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OrganizationRoleUpdate) check() error {
	if v, ok := oru.mutation.Kind(); ok {
		if err := organizationrole.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "OrganizationRole.kind": %w`, err)}
		}
	}
	if _, ok := oru.mutation.OrganizationID(); oru.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationRole.organization"`)
	}
	return nil
}

func (oru *OrganizationRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationrole.Table, organizationrole.Columns, sqlgraph.NewFieldSpec(organizationrole.FieldID, field.TypeInt))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationrole.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(organizationrole.FieldUpdatedBy, field.TypeInt, value)
	}
	if oru.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := oru.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if oru.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := oru.mutation.Kind(); ok {
		_spec.SetField(organizationrole.FieldKind, field.TypeEnum, value)
	}
	if value, ok := oru.mutation.Name(); ok {
		_spec.SetField(organizationrole.FieldName, field.TypeString, value)
	}
	if value, ok := oru.mutation.AppRoleID(); ok {
		_spec.SetField(organizationrole.FieldAppRoleID, field.TypeInt, value)
	}
	if value, ok := oru.mutation.AddedAppRoleID(); ok {
		_spec.AddField(organizationrole.FieldAppRoleID, field.TypeInt, value)
	}
	if oru.mutation.AppRoleIDCleared() {
		_spec.ClearField(organizationrole.FieldAppRoleID, field.TypeInt)
	}
	if value, ok := oru.mutation.Comments(); ok {
		_spec.SetField(organizationrole.FieldComments, field.TypeString, value)
	}
	if oru.mutation.CommentsCleared() {
		_spec.ClearField(organizationrole.FieldComments, field.TypeString)
	}
	if oru.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationrole.OrganizationTable,
			Columns: []string{organizationrole.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationrole.OrganizationTable,
			Columns: []string{organizationrole.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OrganizationRoleUpdateOne is the builder for updating a single OrganizationRole entity.
type OrganizationRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationRoleMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (oruo *OrganizationRoleUpdateOne) SetUpdatedBy(i int) *OrganizationRoleUpdateOne {
	oruo.mutation.ResetUpdatedBy()
	oruo.mutation.SetUpdatedBy(i)
	return oruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableUpdatedBy(i *int) *OrganizationRoleUpdateOne {
	if i != nil {
		oruo.SetUpdatedBy(*i)
	}
	return oruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (oruo *OrganizationRoleUpdateOne) AddUpdatedBy(i int) *OrganizationRoleUpdateOne {
	oruo.mutation.AddUpdatedBy(i)
	return oruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (oruo *OrganizationRoleUpdateOne) ClearUpdatedBy() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearUpdatedBy()
	return oruo
}

// SetUpdatedAt sets the "updated_at" field.
func (oruo *OrganizationRoleUpdateOne) SetUpdatedAt(t time.Time) *OrganizationRoleUpdateOne {
	oruo.mutation.SetUpdatedAt(t)
	return oruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrganizationRoleUpdateOne {
	if t != nil {
		oruo.SetUpdatedAt(*t)
	}
	return oruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oruo *OrganizationRoleUpdateOne) ClearUpdatedAt() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearUpdatedAt()
	return oruo
}

// SetOrgID sets the "org_id" field.
func (oruo *OrganizationRoleUpdateOne) SetOrgID(i int) *OrganizationRoleUpdateOne {
	oruo.mutation.SetOrgID(i)
	return oruo
}

// SetKind sets the "kind" field.
func (oruo *OrganizationRoleUpdateOne) SetKind(o organizationrole.Kind) *OrganizationRoleUpdateOne {
	oruo.mutation.SetKind(o)
	return oruo
}

// SetName sets the "name" field.
func (oruo *OrganizationRoleUpdateOne) SetName(s string) *OrganizationRoleUpdateOne {
	oruo.mutation.SetName(s)
	return oruo
}

// SetAppRoleID sets the "app_role_id" field.
func (oruo *OrganizationRoleUpdateOne) SetAppRoleID(i int) *OrganizationRoleUpdateOne {
	oruo.mutation.ResetAppRoleID()
	oruo.mutation.SetAppRoleID(i)
	return oruo
}

// SetNillableAppRoleID sets the "app_role_id" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableAppRoleID(i *int) *OrganizationRoleUpdateOne {
	if i != nil {
		oruo.SetAppRoleID(*i)
	}
	return oruo
}

// AddAppRoleID adds i to the "app_role_id" field.
func (oruo *OrganizationRoleUpdateOne) AddAppRoleID(i int) *OrganizationRoleUpdateOne {
	oruo.mutation.AddAppRoleID(i)
	return oruo
}

// ClearAppRoleID clears the value of the "app_role_id" field.
func (oruo *OrganizationRoleUpdateOne) ClearAppRoleID() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearAppRoleID()
	return oruo
}

// SetComments sets the "comments" field.
func (oruo *OrganizationRoleUpdateOne) SetComments(s string) *OrganizationRoleUpdateOne {
	oruo.mutation.SetComments(s)
	return oruo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (oruo *OrganizationRoleUpdateOne) SetNillableComments(s *string) *OrganizationRoleUpdateOne {
	if s != nil {
		oruo.SetComments(*s)
	}
	return oruo
}

// ClearComments clears the value of the "comments" field.
func (oruo *OrganizationRoleUpdateOne) ClearComments() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearComments()
	return oruo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oruo *OrganizationRoleUpdateOne) SetOrganizationID(id int) *OrganizationRoleUpdateOne {
	oruo.mutation.SetOrganizationID(id)
	return oruo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oruo *OrganizationRoleUpdateOne) SetOrganization(o *Organization) *OrganizationRoleUpdateOne {
	return oruo.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationRoleMutation object of the builder.
func (oruo *OrganizationRoleUpdateOne) Mutation() *OrganizationRoleMutation {
	return oruo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oruo *OrganizationRoleUpdateOne) ClearOrganization() *OrganizationRoleUpdateOne {
	oruo.mutation.ClearOrganization()
	return oruo
}

// Where appends a list predicates to the OrganizationRoleUpdate builder.
func (oruo *OrganizationRoleUpdateOne) Where(ps ...predicate.OrganizationRole) *OrganizationRoleUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OrganizationRoleUpdateOne) Select(field string, fields ...string) *OrganizationRoleUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OrganizationRole entity.
func (oruo *OrganizationRoleUpdateOne) Save(ctx context.Context) (*OrganizationRole, error) {
	return withHooks[*OrganizationRole, OrganizationRoleMutation](ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OrganizationRoleUpdateOne) SaveX(ctx context.Context) *OrganizationRole {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OrganizationRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OrganizationRoleUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OrganizationRoleUpdateOne) check() error {
	if v, ok := oruo.mutation.Kind(); ok {
		if err := organizationrole.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "OrganizationRole.kind": %w`, err)}
		}
	}
	if _, ok := oruo.mutation.OrganizationID(); oruo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrganizationRole.organization"`)
	}
	return nil
}

func (oruo *OrganizationRoleUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationRole, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationrole.Table, organizationrole.Columns, sqlgraph.NewFieldSpec(organizationrole.FieldID, field.TypeInt))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationrole.FieldID)
		for _, f := range fields {
			if !organizationrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationrole.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(organizationrole.FieldUpdatedBy, field.TypeInt, value)
	}
	if oruo.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := oruo.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if oruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := oruo.mutation.Kind(); ok {
		_spec.SetField(organizationrole.FieldKind, field.TypeEnum, value)
	}
	if value, ok := oruo.mutation.Name(); ok {
		_spec.SetField(organizationrole.FieldName, field.TypeString, value)
	}
	if value, ok := oruo.mutation.AppRoleID(); ok {
		_spec.SetField(organizationrole.FieldAppRoleID, field.TypeInt, value)
	}
	if value, ok := oruo.mutation.AddedAppRoleID(); ok {
		_spec.AddField(organizationrole.FieldAppRoleID, field.TypeInt, value)
	}
	if oruo.mutation.AppRoleIDCleared() {
		_spec.ClearField(organizationrole.FieldAppRoleID, field.TypeInt)
	}
	if value, ok := oruo.mutation.Comments(); ok {
		_spec.SetField(organizationrole.FieldComments, field.TypeString, value)
	}
	if oruo.mutation.CommentsCleared() {
		_spec.ClearField(organizationrole.FieldComments, field.TypeString)
	}
	if oruo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationrole.OrganizationTable,
			Columns: []string{organizationrole.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationrole.OrganizationTable,
			Columns: []string{organizationrole.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationRole{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
