// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/region"
	"github.com/woocoos/knockout/ent/useraddr"
)

// UserAddrUpdate is the builder for updating UserAddr entities.
type UserAddrUpdate struct {
	config
	hooks    []Hook
	mutation *UserAddrMutation
}

// Where appends a list predicates to the UserAddrUpdate builder.
func (uau *UserAddrUpdate) Where(ps ...predicate.UserAddr) *UserAddrUpdate {
	uau.mutation.Where(ps...)
	return uau
}

// SetUpdatedBy sets the "updated_by" field.
func (uau *UserAddrUpdate) SetUpdatedBy(i int) *UserAddrUpdate {
	uau.mutation.ResetUpdatedBy()
	uau.mutation.SetUpdatedBy(i)
	return uau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableUpdatedBy(i *int) *UserAddrUpdate {
	if i != nil {
		uau.SetUpdatedBy(*i)
	}
	return uau
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uau *UserAddrUpdate) AddUpdatedBy(i int) *UserAddrUpdate {
	uau.mutation.AddUpdatedBy(i)
	return uau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uau *UserAddrUpdate) ClearUpdatedBy() *UserAddrUpdate {
	uau.mutation.ClearUpdatedBy()
	return uau
}

// SetUpdatedAt sets the "updated_at" field.
func (uau *UserAddrUpdate) SetUpdatedAt(t time.Time) *UserAddrUpdate {
	uau.mutation.SetUpdatedAt(t)
	return uau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableUpdatedAt(t *time.Time) *UserAddrUpdate {
	if t != nil {
		uau.SetUpdatedAt(*t)
	}
	return uau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uau *UserAddrUpdate) ClearUpdatedAt() *UserAddrUpdate {
	uau.mutation.ClearUpdatedAt()
	return uau
}

// SetAddrType sets the "addr_type" field.
func (uau *UserAddrUpdate) SetAddrType(ut useraddr.AddrType) *UserAddrUpdate {
	uau.mutation.SetAddrType(ut)
	return uau
}

// SetNillableAddrType sets the "addr_type" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableAddrType(ut *useraddr.AddrType) *UserAddrUpdate {
	if ut != nil {
		uau.SetAddrType(*ut)
	}
	return uau
}

// SetRegionID sets the "region_id" field.
func (uau *UserAddrUpdate) SetRegionID(i int) *UserAddrUpdate {
	uau.mutation.SetRegionID(i)
	return uau
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableRegionID(i *int) *UserAddrUpdate {
	if i != nil {
		uau.SetRegionID(*i)
	}
	return uau
}

// ClearRegionID clears the value of the "region_id" field.
func (uau *UserAddrUpdate) ClearRegionID() *UserAddrUpdate {
	uau.mutation.ClearRegionID()
	return uau
}

// SetAddr sets the "addr" field.
func (uau *UserAddrUpdate) SetAddr(s string) *UserAddrUpdate {
	uau.mutation.SetAddr(s)
	return uau
}

// SetNillableAddr sets the "addr" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableAddr(s *string) *UserAddrUpdate {
	if s != nil {
		uau.SetAddr(*s)
	}
	return uau
}

// ClearAddr clears the value of the "addr" field.
func (uau *UserAddrUpdate) ClearAddr() *UserAddrUpdate {
	uau.mutation.ClearAddr()
	return uau
}

// SetEmail sets the "email" field.
func (uau *UserAddrUpdate) SetEmail(s string) *UserAddrUpdate {
	uau.mutation.SetEmail(s)
	return uau
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableEmail(s *string) *UserAddrUpdate {
	if s != nil {
		uau.SetEmail(*s)
	}
	return uau
}

// ClearEmail clears the value of the "email" field.
func (uau *UserAddrUpdate) ClearEmail() *UserAddrUpdate {
	uau.mutation.ClearEmail()
	return uau
}

// SetFax sets the "fax" field.
func (uau *UserAddrUpdate) SetFax(s string) *UserAddrUpdate {
	uau.mutation.SetFax(s)
	return uau
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableFax(s *string) *UserAddrUpdate {
	if s != nil {
		uau.SetFax(*s)
	}
	return uau
}

// ClearFax clears the value of the "fax" field.
func (uau *UserAddrUpdate) ClearFax() *UserAddrUpdate {
	uau.mutation.ClearFax()
	return uau
}

// SetTel sets the "tel" field.
func (uau *UserAddrUpdate) SetTel(s string) *UserAddrUpdate {
	uau.mutation.SetTel(s)
	return uau
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableTel(s *string) *UserAddrUpdate {
	if s != nil {
		uau.SetTel(*s)
	}
	return uau
}

// ClearTel clears the value of the "tel" field.
func (uau *UserAddrUpdate) ClearTel() *UserAddrUpdate {
	uau.mutation.ClearTel()
	return uau
}

// SetMobile sets the "mobile" field.
func (uau *UserAddrUpdate) SetMobile(s string) *UserAddrUpdate {
	uau.mutation.SetMobile(s)
	return uau
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableMobile(s *string) *UserAddrUpdate {
	if s != nil {
		uau.SetMobile(*s)
	}
	return uau
}

// ClearMobile clears the value of the "mobile" field.
func (uau *UserAddrUpdate) ClearMobile() *UserAddrUpdate {
	uau.mutation.ClearMobile()
	return uau
}

// SetName sets the "name" field.
func (uau *UserAddrUpdate) SetName(s string) *UserAddrUpdate {
	uau.mutation.SetName(s)
	return uau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableName(s *string) *UserAddrUpdate {
	if s != nil {
		uau.SetName(*s)
	}
	return uau
}

// ClearName clears the value of the "name" field.
func (uau *UserAddrUpdate) ClearName() *UserAddrUpdate {
	uau.mutation.ClearName()
	return uau
}

// SetIsDefault sets the "is_default" field.
func (uau *UserAddrUpdate) SetIsDefault(b bool) *UserAddrUpdate {
	uau.mutation.SetIsDefault(b)
	return uau
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (uau *UserAddrUpdate) SetNillableIsDefault(b *bool) *UserAddrUpdate {
	if b != nil {
		uau.SetIsDefault(*b)
	}
	return uau
}

// SetRegion sets the "region" edge to the Region entity.
func (uau *UserAddrUpdate) SetRegion(r *Region) *UserAddrUpdate {
	return uau.SetRegionID(r.ID)
}

// Mutation returns the UserAddrMutation object of the builder.
func (uau *UserAddrUpdate) Mutation() *UserAddrMutation {
	return uau.mutation
}

// ClearRegion clears the "region" edge to the Region entity.
func (uau *UserAddrUpdate) ClearRegion() *UserAddrUpdate {
	uau.mutation.ClearRegion()
	return uau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uau *UserAddrUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uau.sqlSave, uau.mutation, uau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uau *UserAddrUpdate) SaveX(ctx context.Context) int {
	affected, err := uau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uau *UserAddrUpdate) Exec(ctx context.Context) error {
	_, err := uau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uau *UserAddrUpdate) ExecX(ctx context.Context) {
	if err := uau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uau *UserAddrUpdate) check() error {
	if v, ok := uau.mutation.AddrType(); ok {
		if err := useraddr.AddrTypeValidator(v); err != nil {
			return &ValidationError{Name: "addr_type", err: fmt.Errorf(`ent: validator failed for field "UserAddr.addr_type": %w`, err)}
		}
	}
	if v, ok := uau.mutation.Email(); ok {
		if err := useraddr.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "UserAddr.email": %w`, err)}
		}
	}
	if v, ok := uau.mutation.Fax(); ok {
		if err := useraddr.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`ent: validator failed for field "UserAddr.fax": %w`, err)}
		}
	}
	if v, ok := uau.mutation.Tel(); ok {
		if err := useraddr.TelValidator(v); err != nil {
			return &ValidationError{Name: "tel", err: fmt.Errorf(`ent: validator failed for field "UserAddr.tel": %w`, err)}
		}
	}
	if v, ok := uau.mutation.Mobile(); ok {
		if err := useraddr.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "UserAddr.mobile": %w`, err)}
		}
	}
	if v, ok := uau.mutation.Name(); ok {
		if err := useraddr.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserAddr.name": %w`, err)}
		}
	}
	return nil
}

func (uau *UserAddrUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraddr.Table, useraddr.Columns, sqlgraph.NewFieldSpec(useraddr.FieldID, field.TypeInt))
	if ps := uau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uau.mutation.UpdatedBy(); ok {
		_spec.SetField(useraddr.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uau.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(useraddr.FieldUpdatedBy, field.TypeInt, value)
	}
	if uau.mutation.UpdatedByCleared() {
		_spec.ClearField(useraddr.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := uau.mutation.UpdatedAt(); ok {
		_spec.SetField(useraddr.FieldUpdatedAt, field.TypeTime, value)
	}
	if uau.mutation.UpdatedAtCleared() {
		_spec.ClearField(useraddr.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uau.mutation.AddrType(); ok {
		_spec.SetField(useraddr.FieldAddrType, field.TypeEnum, value)
	}
	if value, ok := uau.mutation.Addr(); ok {
		_spec.SetField(useraddr.FieldAddr, field.TypeString, value)
	}
	if uau.mutation.AddrCleared() {
		_spec.ClearField(useraddr.FieldAddr, field.TypeString)
	}
	if value, ok := uau.mutation.Email(); ok {
		_spec.SetField(useraddr.FieldEmail, field.TypeString, value)
	}
	if uau.mutation.EmailCleared() {
		_spec.ClearField(useraddr.FieldEmail, field.TypeString)
	}
	if value, ok := uau.mutation.Fax(); ok {
		_spec.SetField(useraddr.FieldFax, field.TypeString, value)
	}
	if uau.mutation.FaxCleared() {
		_spec.ClearField(useraddr.FieldFax, field.TypeString)
	}
	if value, ok := uau.mutation.Tel(); ok {
		_spec.SetField(useraddr.FieldTel, field.TypeString, value)
	}
	if uau.mutation.TelCleared() {
		_spec.ClearField(useraddr.FieldTel, field.TypeString)
	}
	if value, ok := uau.mutation.Mobile(); ok {
		_spec.SetField(useraddr.FieldMobile, field.TypeString, value)
	}
	if uau.mutation.MobileCleared() {
		_spec.ClearField(useraddr.FieldMobile, field.TypeString)
	}
	if value, ok := uau.mutation.Name(); ok {
		_spec.SetField(useraddr.FieldName, field.TypeString, value)
	}
	if uau.mutation.NameCleared() {
		_spec.ClearField(useraddr.FieldName, field.TypeString)
	}
	if value, ok := uau.mutation.IsDefault(); ok {
		_spec.SetField(useraddr.FieldIsDefault, field.TypeBool, value)
	}
	if uau.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddr.RegionTable,
			Columns: []string{useraddr.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uau.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddr.RegionTable,
			Columns: []string{useraddr.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraddr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uau.mutation.done = true
	return n, nil
}

// UserAddrUpdateOne is the builder for updating a single UserAddr entity.
type UserAddrUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAddrMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (uauo *UserAddrUpdateOne) SetUpdatedBy(i int) *UserAddrUpdateOne {
	uauo.mutation.ResetUpdatedBy()
	uauo.mutation.SetUpdatedBy(i)
	return uauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableUpdatedBy(i *int) *UserAddrUpdateOne {
	if i != nil {
		uauo.SetUpdatedBy(*i)
	}
	return uauo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uauo *UserAddrUpdateOne) AddUpdatedBy(i int) *UserAddrUpdateOne {
	uauo.mutation.AddUpdatedBy(i)
	return uauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uauo *UserAddrUpdateOne) ClearUpdatedBy() *UserAddrUpdateOne {
	uauo.mutation.ClearUpdatedBy()
	return uauo
}

// SetUpdatedAt sets the "updated_at" field.
func (uauo *UserAddrUpdateOne) SetUpdatedAt(t time.Time) *UserAddrUpdateOne {
	uauo.mutation.SetUpdatedAt(t)
	return uauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserAddrUpdateOne {
	if t != nil {
		uauo.SetUpdatedAt(*t)
	}
	return uauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uauo *UserAddrUpdateOne) ClearUpdatedAt() *UserAddrUpdateOne {
	uauo.mutation.ClearUpdatedAt()
	return uauo
}

// SetAddrType sets the "addr_type" field.
func (uauo *UserAddrUpdateOne) SetAddrType(ut useraddr.AddrType) *UserAddrUpdateOne {
	uauo.mutation.SetAddrType(ut)
	return uauo
}

// SetNillableAddrType sets the "addr_type" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableAddrType(ut *useraddr.AddrType) *UserAddrUpdateOne {
	if ut != nil {
		uauo.SetAddrType(*ut)
	}
	return uauo
}

// SetRegionID sets the "region_id" field.
func (uauo *UserAddrUpdateOne) SetRegionID(i int) *UserAddrUpdateOne {
	uauo.mutation.SetRegionID(i)
	return uauo
}

// SetNillableRegionID sets the "region_id" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableRegionID(i *int) *UserAddrUpdateOne {
	if i != nil {
		uauo.SetRegionID(*i)
	}
	return uauo
}

// ClearRegionID clears the value of the "region_id" field.
func (uauo *UserAddrUpdateOne) ClearRegionID() *UserAddrUpdateOne {
	uauo.mutation.ClearRegionID()
	return uauo
}

// SetAddr sets the "addr" field.
func (uauo *UserAddrUpdateOne) SetAddr(s string) *UserAddrUpdateOne {
	uauo.mutation.SetAddr(s)
	return uauo
}

// SetNillableAddr sets the "addr" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableAddr(s *string) *UserAddrUpdateOne {
	if s != nil {
		uauo.SetAddr(*s)
	}
	return uauo
}

// ClearAddr clears the value of the "addr" field.
func (uauo *UserAddrUpdateOne) ClearAddr() *UserAddrUpdateOne {
	uauo.mutation.ClearAddr()
	return uauo
}

// SetEmail sets the "email" field.
func (uauo *UserAddrUpdateOne) SetEmail(s string) *UserAddrUpdateOne {
	uauo.mutation.SetEmail(s)
	return uauo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableEmail(s *string) *UserAddrUpdateOne {
	if s != nil {
		uauo.SetEmail(*s)
	}
	return uauo
}

// ClearEmail clears the value of the "email" field.
func (uauo *UserAddrUpdateOne) ClearEmail() *UserAddrUpdateOne {
	uauo.mutation.ClearEmail()
	return uauo
}

// SetFax sets the "fax" field.
func (uauo *UserAddrUpdateOne) SetFax(s string) *UserAddrUpdateOne {
	uauo.mutation.SetFax(s)
	return uauo
}

// SetNillableFax sets the "fax" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableFax(s *string) *UserAddrUpdateOne {
	if s != nil {
		uauo.SetFax(*s)
	}
	return uauo
}

// ClearFax clears the value of the "fax" field.
func (uauo *UserAddrUpdateOne) ClearFax() *UserAddrUpdateOne {
	uauo.mutation.ClearFax()
	return uauo
}

// SetTel sets the "tel" field.
func (uauo *UserAddrUpdateOne) SetTel(s string) *UserAddrUpdateOne {
	uauo.mutation.SetTel(s)
	return uauo
}

// SetNillableTel sets the "tel" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableTel(s *string) *UserAddrUpdateOne {
	if s != nil {
		uauo.SetTel(*s)
	}
	return uauo
}

// ClearTel clears the value of the "tel" field.
func (uauo *UserAddrUpdateOne) ClearTel() *UserAddrUpdateOne {
	uauo.mutation.ClearTel()
	return uauo
}

// SetMobile sets the "mobile" field.
func (uauo *UserAddrUpdateOne) SetMobile(s string) *UserAddrUpdateOne {
	uauo.mutation.SetMobile(s)
	return uauo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableMobile(s *string) *UserAddrUpdateOne {
	if s != nil {
		uauo.SetMobile(*s)
	}
	return uauo
}

// ClearMobile clears the value of the "mobile" field.
func (uauo *UserAddrUpdateOne) ClearMobile() *UserAddrUpdateOne {
	uauo.mutation.ClearMobile()
	return uauo
}

// SetName sets the "name" field.
func (uauo *UserAddrUpdateOne) SetName(s string) *UserAddrUpdateOne {
	uauo.mutation.SetName(s)
	return uauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableName(s *string) *UserAddrUpdateOne {
	if s != nil {
		uauo.SetName(*s)
	}
	return uauo
}

// ClearName clears the value of the "name" field.
func (uauo *UserAddrUpdateOne) ClearName() *UserAddrUpdateOne {
	uauo.mutation.ClearName()
	return uauo
}

// SetIsDefault sets the "is_default" field.
func (uauo *UserAddrUpdateOne) SetIsDefault(b bool) *UserAddrUpdateOne {
	uauo.mutation.SetIsDefault(b)
	return uauo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (uauo *UserAddrUpdateOne) SetNillableIsDefault(b *bool) *UserAddrUpdateOne {
	if b != nil {
		uauo.SetIsDefault(*b)
	}
	return uauo
}

// SetRegion sets the "region" edge to the Region entity.
func (uauo *UserAddrUpdateOne) SetRegion(r *Region) *UserAddrUpdateOne {
	return uauo.SetRegionID(r.ID)
}

// Mutation returns the UserAddrMutation object of the builder.
func (uauo *UserAddrUpdateOne) Mutation() *UserAddrMutation {
	return uauo.mutation
}

// ClearRegion clears the "region" edge to the Region entity.
func (uauo *UserAddrUpdateOne) ClearRegion() *UserAddrUpdateOne {
	uauo.mutation.ClearRegion()
	return uauo
}

// Where appends a list predicates to the UserAddrUpdate builder.
func (uauo *UserAddrUpdateOne) Where(ps ...predicate.UserAddr) *UserAddrUpdateOne {
	uauo.mutation.Where(ps...)
	return uauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uauo *UserAddrUpdateOne) Select(field string, fields ...string) *UserAddrUpdateOne {
	uauo.fields = append([]string{field}, fields...)
	return uauo
}

// Save executes the query and returns the updated UserAddr entity.
func (uauo *UserAddrUpdateOne) Save(ctx context.Context) (*UserAddr, error) {
	return withHooks(ctx, uauo.sqlSave, uauo.mutation, uauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uauo *UserAddrUpdateOne) SaveX(ctx context.Context) *UserAddr {
	node, err := uauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uauo *UserAddrUpdateOne) Exec(ctx context.Context) error {
	_, err := uauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uauo *UserAddrUpdateOne) ExecX(ctx context.Context) {
	if err := uauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uauo *UserAddrUpdateOne) check() error {
	if v, ok := uauo.mutation.AddrType(); ok {
		if err := useraddr.AddrTypeValidator(v); err != nil {
			return &ValidationError{Name: "addr_type", err: fmt.Errorf(`ent: validator failed for field "UserAddr.addr_type": %w`, err)}
		}
	}
	if v, ok := uauo.mutation.Email(); ok {
		if err := useraddr.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "UserAddr.email": %w`, err)}
		}
	}
	if v, ok := uauo.mutation.Fax(); ok {
		if err := useraddr.FaxValidator(v); err != nil {
			return &ValidationError{Name: "fax", err: fmt.Errorf(`ent: validator failed for field "UserAddr.fax": %w`, err)}
		}
	}
	if v, ok := uauo.mutation.Tel(); ok {
		if err := useraddr.TelValidator(v); err != nil {
			return &ValidationError{Name: "tel", err: fmt.Errorf(`ent: validator failed for field "UserAddr.tel": %w`, err)}
		}
	}
	if v, ok := uauo.mutation.Mobile(); ok {
		if err := useraddr.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "UserAddr.mobile": %w`, err)}
		}
	}
	if v, ok := uauo.mutation.Name(); ok {
		if err := useraddr.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserAddr.name": %w`, err)}
		}
	}
	return nil
}

func (uauo *UserAddrUpdateOne) sqlSave(ctx context.Context) (_node *UserAddr, err error) {
	if err := uauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useraddr.Table, useraddr.Columns, sqlgraph.NewFieldSpec(useraddr.FieldID, field.TypeInt))
	id, ok := uauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAddr.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useraddr.FieldID)
		for _, f := range fields {
			if !useraddr.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useraddr.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uauo.mutation.UpdatedBy(); ok {
		_spec.SetField(useraddr.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uauo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(useraddr.FieldUpdatedBy, field.TypeInt, value)
	}
	if uauo.mutation.UpdatedByCleared() {
		_spec.ClearField(useraddr.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := uauo.mutation.UpdatedAt(); ok {
		_spec.SetField(useraddr.FieldUpdatedAt, field.TypeTime, value)
	}
	if uauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(useraddr.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uauo.mutation.AddrType(); ok {
		_spec.SetField(useraddr.FieldAddrType, field.TypeEnum, value)
	}
	if value, ok := uauo.mutation.Addr(); ok {
		_spec.SetField(useraddr.FieldAddr, field.TypeString, value)
	}
	if uauo.mutation.AddrCleared() {
		_spec.ClearField(useraddr.FieldAddr, field.TypeString)
	}
	if value, ok := uauo.mutation.Email(); ok {
		_spec.SetField(useraddr.FieldEmail, field.TypeString, value)
	}
	if uauo.mutation.EmailCleared() {
		_spec.ClearField(useraddr.FieldEmail, field.TypeString)
	}
	if value, ok := uauo.mutation.Fax(); ok {
		_spec.SetField(useraddr.FieldFax, field.TypeString, value)
	}
	if uauo.mutation.FaxCleared() {
		_spec.ClearField(useraddr.FieldFax, field.TypeString)
	}
	if value, ok := uauo.mutation.Tel(); ok {
		_spec.SetField(useraddr.FieldTel, field.TypeString, value)
	}
	if uauo.mutation.TelCleared() {
		_spec.ClearField(useraddr.FieldTel, field.TypeString)
	}
	if value, ok := uauo.mutation.Mobile(); ok {
		_spec.SetField(useraddr.FieldMobile, field.TypeString, value)
	}
	if uauo.mutation.MobileCleared() {
		_spec.ClearField(useraddr.FieldMobile, field.TypeString)
	}
	if value, ok := uauo.mutation.Name(); ok {
		_spec.SetField(useraddr.FieldName, field.TypeString, value)
	}
	if uauo.mutation.NameCleared() {
		_spec.ClearField(useraddr.FieldName, field.TypeString)
	}
	if value, ok := uauo.mutation.IsDefault(); ok {
		_spec.SetField(useraddr.FieldIsDefault, field.TypeBool, value)
	}
	if uauo.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddr.RegionTable,
			Columns: []string{useraddr.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uauo.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   useraddr.RegionTable,
			Columns: []string{useraddr.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserAddr{config: uauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useraddr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uauo.mutation.done = true
	return _node, nil
}
