// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/file"
	"github.com/woocoos/knockout/ent/filesource"
	"github.com/woocoos/knockout/ent/predicate"
)

// FileSourceUpdate is the builder for updating FileSource entities.
type FileSourceUpdate struct {
	config
	hooks    []Hook
	mutation *FileSourceMutation
}

// Where appends a list predicates to the FileSourceUpdate builder.
func (fsu *FileSourceUpdate) Where(ps ...predicate.FileSource) *FileSourceUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetUpdatedBy sets the "updated_by" field.
func (fsu *FileSourceUpdate) SetUpdatedBy(i int) *FileSourceUpdate {
	fsu.mutation.ResetUpdatedBy()
	fsu.mutation.SetUpdatedBy(i)
	return fsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableUpdatedBy(i *int) *FileSourceUpdate {
	if i != nil {
		fsu.SetUpdatedBy(*i)
	}
	return fsu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fsu *FileSourceUpdate) AddUpdatedBy(i int) *FileSourceUpdate {
	fsu.mutation.AddUpdatedBy(i)
	return fsu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fsu *FileSourceUpdate) ClearUpdatedBy() *FileSourceUpdate {
	fsu.mutation.ClearUpdatedBy()
	return fsu
}

// SetUpdatedAt sets the "updated_at" field.
func (fsu *FileSourceUpdate) SetUpdatedAt(t time.Time) *FileSourceUpdate {
	fsu.mutation.SetUpdatedAt(t)
	return fsu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableUpdatedAt(t *time.Time) *FileSourceUpdate {
	if t != nil {
		fsu.SetUpdatedAt(*t)
	}
	return fsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fsu *FileSourceUpdate) ClearUpdatedAt() *FileSourceUpdate {
	fsu.mutation.ClearUpdatedAt()
	return fsu
}

// SetTenantID sets the "tenant_id" field.
func (fsu *FileSourceUpdate) SetTenantID(i int) *FileSourceUpdate {
	fsu.mutation.ResetTenantID()
	fsu.mutation.SetTenantID(i)
	return fsu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableTenantID(i *int) *FileSourceUpdate {
	if i != nil {
		fsu.SetTenantID(*i)
	}
	return fsu
}

// AddTenantID adds i to the "tenant_id" field.
func (fsu *FileSourceUpdate) AddTenantID(i int) *FileSourceUpdate {
	fsu.mutation.AddTenantID(i)
	return fsu
}

// SetKind sets the "kind" field.
func (fsu *FileSourceUpdate) SetKind(f filesource.Kind) *FileSourceUpdate {
	fsu.mutation.SetKind(f)
	return fsu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableKind(f *filesource.Kind) *FileSourceUpdate {
	if f != nil {
		fsu.SetKind(*f)
	}
	return fsu
}

// SetComments sets the "comments" field.
func (fsu *FileSourceUpdate) SetComments(s string) *FileSourceUpdate {
	fsu.mutation.SetComments(s)
	return fsu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableComments(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetComments(*s)
	}
	return fsu
}

// ClearComments clears the value of the "comments" field.
func (fsu *FileSourceUpdate) ClearComments() *FileSourceUpdate {
	fsu.mutation.ClearComments()
	return fsu
}

// SetAccessKeyID sets the "access_key_id" field.
func (fsu *FileSourceUpdate) SetAccessKeyID(s string) *FileSourceUpdate {
	fsu.mutation.SetAccessKeyID(s)
	return fsu
}

// SetNillableAccessKeyID sets the "access_key_id" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableAccessKeyID(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetAccessKeyID(*s)
	}
	return fsu
}

// SetAccessKeySecret sets the "access_key_secret" field.
func (fsu *FileSourceUpdate) SetAccessKeySecret(s string) *FileSourceUpdate {
	fsu.mutation.SetAccessKeySecret(s)
	return fsu
}

// SetNillableAccessKeySecret sets the "access_key_secret" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableAccessKeySecret(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetAccessKeySecret(*s)
	}
	return fsu
}

// SetEndpoint sets the "endpoint" field.
func (fsu *FileSourceUpdate) SetEndpoint(s string) *FileSourceUpdate {
	fsu.mutation.SetEndpoint(s)
	return fsu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableEndpoint(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetEndpoint(*s)
	}
	return fsu
}

// SetStsEndpoint sets the "sts_endpoint" field.
func (fsu *FileSourceUpdate) SetStsEndpoint(s string) *FileSourceUpdate {
	fsu.mutation.SetStsEndpoint(s)
	return fsu
}

// SetNillableStsEndpoint sets the "sts_endpoint" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableStsEndpoint(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetStsEndpoint(*s)
	}
	return fsu
}

// SetRegion sets the "region" field.
func (fsu *FileSourceUpdate) SetRegion(s string) *FileSourceUpdate {
	fsu.mutation.SetRegion(s)
	return fsu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableRegion(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetRegion(*s)
	}
	return fsu
}

// SetBucket sets the "bucket" field.
func (fsu *FileSourceUpdate) SetBucket(s string) *FileSourceUpdate {
	fsu.mutation.SetBucket(s)
	return fsu
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableBucket(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetBucket(*s)
	}
	return fsu
}

// SetBucketUrl sets the "bucketUrl" field.
func (fsu *FileSourceUpdate) SetBucketUrl(s string) *FileSourceUpdate {
	fsu.mutation.SetBucketUrl(s)
	return fsu
}

// SetNillableBucketUrl sets the "bucketUrl" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableBucketUrl(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetBucketUrl(*s)
	}
	return fsu
}

// ClearBucketUrl clears the value of the "bucketUrl" field.
func (fsu *FileSourceUpdate) ClearBucketUrl() *FileSourceUpdate {
	fsu.mutation.ClearBucketUrl()
	return fsu
}

// SetRoleArn sets the "role_arn" field.
func (fsu *FileSourceUpdate) SetRoleArn(s string) *FileSourceUpdate {
	fsu.mutation.SetRoleArn(s)
	return fsu
}

// SetNillableRoleArn sets the "role_arn" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableRoleArn(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetRoleArn(*s)
	}
	return fsu
}

// SetPolicy sets the "policy" field.
func (fsu *FileSourceUpdate) SetPolicy(s string) *FileSourceUpdate {
	fsu.mutation.SetPolicy(s)
	return fsu
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillablePolicy(s *string) *FileSourceUpdate {
	if s != nil {
		fsu.SetPolicy(*s)
	}
	return fsu
}

// ClearPolicy clears the value of the "policy" field.
func (fsu *FileSourceUpdate) ClearPolicy() *FileSourceUpdate {
	fsu.mutation.ClearPolicy()
	return fsu
}

// SetDurationSeconds sets the "duration_seconds" field.
func (fsu *FileSourceUpdate) SetDurationSeconds(i int) *FileSourceUpdate {
	fsu.mutation.ResetDurationSeconds()
	fsu.mutation.SetDurationSeconds(i)
	return fsu
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (fsu *FileSourceUpdate) SetNillableDurationSeconds(i *int) *FileSourceUpdate {
	if i != nil {
		fsu.SetDurationSeconds(*i)
	}
	return fsu
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (fsu *FileSourceUpdate) AddDurationSeconds(i int) *FileSourceUpdate {
	fsu.mutation.AddDurationSeconds(i)
	return fsu
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (fsu *FileSourceUpdate) ClearDurationSeconds() *FileSourceUpdate {
	fsu.mutation.ClearDurationSeconds()
	return fsu
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (fsu *FileSourceUpdate) AddFileIDs(ids ...int) *FileSourceUpdate {
	fsu.mutation.AddFileIDs(ids...)
	return fsu
}

// AddFiles adds the "files" edges to the File entity.
func (fsu *FileSourceUpdate) AddFiles(f ...*File) *FileSourceUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fsu.AddFileIDs(ids...)
}

// Mutation returns the FileSourceMutation object of the builder.
func (fsu *FileSourceUpdate) Mutation() *FileSourceMutation {
	return fsu.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (fsu *FileSourceUpdate) ClearFiles() *FileSourceUpdate {
	fsu.mutation.ClearFiles()
	return fsu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (fsu *FileSourceUpdate) RemoveFileIDs(ids ...int) *FileSourceUpdate {
	fsu.mutation.RemoveFileIDs(ids...)
	return fsu
}

// RemoveFiles removes "files" edges to File entities.
func (fsu *FileSourceUpdate) RemoveFiles(f ...*File) *FileSourceUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fsu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FileSourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fsu.sqlSave, fsu.mutation, fsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FileSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FileSourceUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FileSourceUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsu *FileSourceUpdate) check() error {
	if v, ok := fsu.mutation.Kind(); ok {
		if err := filesource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "FileSource.kind": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.AccessKeyID(); ok {
		if err := filesource.AccessKeyIDValidator(v); err != nil {
			return &ValidationError{Name: "access_key_id", err: fmt.Errorf(`ent: validator failed for field "FileSource.access_key_id": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.AccessKeySecret(); ok {
		if err := filesource.AccessKeySecretValidator(v); err != nil {
			return &ValidationError{Name: "access_key_secret", err: fmt.Errorf(`ent: validator failed for field "FileSource.access_key_secret": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.Endpoint(); ok {
		if err := filesource.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "FileSource.endpoint": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.StsEndpoint(); ok {
		if err := filesource.StsEndpointValidator(v); err != nil {
			return &ValidationError{Name: "sts_endpoint", err: fmt.Errorf(`ent: validator failed for field "FileSource.sts_endpoint": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.Region(); ok {
		if err := filesource.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "FileSource.region": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.Bucket(); ok {
		if err := filesource.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "FileSource.bucket": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.BucketUrl(); ok {
		if err := filesource.BucketUrlValidator(v); err != nil {
			return &ValidationError{Name: "bucketUrl", err: fmt.Errorf(`ent: validator failed for field "FileSource.bucketUrl": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.RoleArn(); ok {
		if err := filesource.RoleArnValidator(v); err != nil {
			return &ValidationError{Name: "role_arn", err: fmt.Errorf(`ent: validator failed for field "FileSource.role_arn": %w`, err)}
		}
	}
	return nil
}

func (fsu *FileSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(filesource.Table, filesource.Columns, sqlgraph.NewFieldSpec(filesource.FieldID, field.TypeInt))
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.UpdatedBy(); ok {
		_spec.SetField(filesource.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fsu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(filesource.FieldUpdatedBy, field.TypeInt, value)
	}
	if fsu.mutation.UpdatedByCleared() {
		_spec.ClearField(filesource.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := fsu.mutation.UpdatedAt(); ok {
		_spec.SetField(filesource.FieldUpdatedAt, field.TypeTime, value)
	}
	if fsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(filesource.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fsu.mutation.TenantID(); ok {
		_spec.SetField(filesource.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := fsu.mutation.AddedTenantID(); ok {
		_spec.AddField(filesource.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := fsu.mutation.Kind(); ok {
		_spec.SetField(filesource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := fsu.mutation.Comments(); ok {
		_spec.SetField(filesource.FieldComments, field.TypeString, value)
	}
	if fsu.mutation.CommentsCleared() {
		_spec.ClearField(filesource.FieldComments, field.TypeString)
	}
	if value, ok := fsu.mutation.AccessKeyID(); ok {
		_spec.SetField(filesource.FieldAccessKeyID, field.TypeString, value)
	}
	if value, ok := fsu.mutation.AccessKeySecret(); ok {
		_spec.SetField(filesource.FieldAccessKeySecret, field.TypeString, value)
	}
	if value, ok := fsu.mutation.Endpoint(); ok {
		_spec.SetField(filesource.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := fsu.mutation.StsEndpoint(); ok {
		_spec.SetField(filesource.FieldStsEndpoint, field.TypeString, value)
	}
	if value, ok := fsu.mutation.Region(); ok {
		_spec.SetField(filesource.FieldRegion, field.TypeString, value)
	}
	if value, ok := fsu.mutation.Bucket(); ok {
		_spec.SetField(filesource.FieldBucket, field.TypeString, value)
	}
	if value, ok := fsu.mutation.BucketUrl(); ok {
		_spec.SetField(filesource.FieldBucketUrl, field.TypeString, value)
	}
	if fsu.mutation.BucketUrlCleared() {
		_spec.ClearField(filesource.FieldBucketUrl, field.TypeString)
	}
	if value, ok := fsu.mutation.RoleArn(); ok {
		_spec.SetField(filesource.FieldRoleArn, field.TypeString, value)
	}
	if value, ok := fsu.mutation.Policy(); ok {
		_spec.SetField(filesource.FieldPolicy, field.TypeString, value)
	}
	if fsu.mutation.PolicyCleared() {
		_spec.ClearField(filesource.FieldPolicy, field.TypeString)
	}
	if value, ok := fsu.mutation.DurationSeconds(); ok {
		_spec.SetField(filesource.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := fsu.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(filesource.FieldDurationSeconds, field.TypeInt, value)
	}
	if fsu.mutation.DurationSecondsCleared() {
		_spec.ClearField(filesource.FieldDurationSeconds, field.TypeInt)
	}
	if fsu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filesource.FilesTable,
			Columns: []string{filesource.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !fsu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filesource.FilesTable,
			Columns: []string{filesource.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filesource.FilesTable,
			Columns: []string{filesource.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filesource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsu.mutation.done = true
	return n, nil
}

// FileSourceUpdateOne is the builder for updating a single FileSource entity.
type FileSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileSourceMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (fsuo *FileSourceUpdateOne) SetUpdatedBy(i int) *FileSourceUpdateOne {
	fsuo.mutation.ResetUpdatedBy()
	fsuo.mutation.SetUpdatedBy(i)
	return fsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableUpdatedBy(i *int) *FileSourceUpdateOne {
	if i != nil {
		fsuo.SetUpdatedBy(*i)
	}
	return fsuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fsuo *FileSourceUpdateOne) AddUpdatedBy(i int) *FileSourceUpdateOne {
	fsuo.mutation.AddUpdatedBy(i)
	return fsuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fsuo *FileSourceUpdateOne) ClearUpdatedBy() *FileSourceUpdateOne {
	fsuo.mutation.ClearUpdatedBy()
	return fsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fsuo *FileSourceUpdateOne) SetUpdatedAt(t time.Time) *FileSourceUpdateOne {
	fsuo.mutation.SetUpdatedAt(t)
	return fsuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableUpdatedAt(t *time.Time) *FileSourceUpdateOne {
	if t != nil {
		fsuo.SetUpdatedAt(*t)
	}
	return fsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fsuo *FileSourceUpdateOne) ClearUpdatedAt() *FileSourceUpdateOne {
	fsuo.mutation.ClearUpdatedAt()
	return fsuo
}

// SetTenantID sets the "tenant_id" field.
func (fsuo *FileSourceUpdateOne) SetTenantID(i int) *FileSourceUpdateOne {
	fsuo.mutation.ResetTenantID()
	fsuo.mutation.SetTenantID(i)
	return fsuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableTenantID(i *int) *FileSourceUpdateOne {
	if i != nil {
		fsuo.SetTenantID(*i)
	}
	return fsuo
}

// AddTenantID adds i to the "tenant_id" field.
func (fsuo *FileSourceUpdateOne) AddTenantID(i int) *FileSourceUpdateOne {
	fsuo.mutation.AddTenantID(i)
	return fsuo
}

// SetKind sets the "kind" field.
func (fsuo *FileSourceUpdateOne) SetKind(f filesource.Kind) *FileSourceUpdateOne {
	fsuo.mutation.SetKind(f)
	return fsuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableKind(f *filesource.Kind) *FileSourceUpdateOne {
	if f != nil {
		fsuo.SetKind(*f)
	}
	return fsuo
}

// SetComments sets the "comments" field.
func (fsuo *FileSourceUpdateOne) SetComments(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetComments(s)
	return fsuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableComments(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetComments(*s)
	}
	return fsuo
}

// ClearComments clears the value of the "comments" field.
func (fsuo *FileSourceUpdateOne) ClearComments() *FileSourceUpdateOne {
	fsuo.mutation.ClearComments()
	return fsuo
}

// SetAccessKeyID sets the "access_key_id" field.
func (fsuo *FileSourceUpdateOne) SetAccessKeyID(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetAccessKeyID(s)
	return fsuo
}

// SetNillableAccessKeyID sets the "access_key_id" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableAccessKeyID(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetAccessKeyID(*s)
	}
	return fsuo
}

// SetAccessKeySecret sets the "access_key_secret" field.
func (fsuo *FileSourceUpdateOne) SetAccessKeySecret(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetAccessKeySecret(s)
	return fsuo
}

// SetNillableAccessKeySecret sets the "access_key_secret" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableAccessKeySecret(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetAccessKeySecret(*s)
	}
	return fsuo
}

// SetEndpoint sets the "endpoint" field.
func (fsuo *FileSourceUpdateOne) SetEndpoint(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetEndpoint(s)
	return fsuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableEndpoint(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetEndpoint(*s)
	}
	return fsuo
}

// SetStsEndpoint sets the "sts_endpoint" field.
func (fsuo *FileSourceUpdateOne) SetStsEndpoint(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetStsEndpoint(s)
	return fsuo
}

// SetNillableStsEndpoint sets the "sts_endpoint" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableStsEndpoint(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetStsEndpoint(*s)
	}
	return fsuo
}

// SetRegion sets the "region" field.
func (fsuo *FileSourceUpdateOne) SetRegion(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetRegion(s)
	return fsuo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableRegion(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetRegion(*s)
	}
	return fsuo
}

// SetBucket sets the "bucket" field.
func (fsuo *FileSourceUpdateOne) SetBucket(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetBucket(s)
	return fsuo
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableBucket(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetBucket(*s)
	}
	return fsuo
}

// SetBucketUrl sets the "bucketUrl" field.
func (fsuo *FileSourceUpdateOne) SetBucketUrl(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetBucketUrl(s)
	return fsuo
}

// SetNillableBucketUrl sets the "bucketUrl" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableBucketUrl(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetBucketUrl(*s)
	}
	return fsuo
}

// ClearBucketUrl clears the value of the "bucketUrl" field.
func (fsuo *FileSourceUpdateOne) ClearBucketUrl() *FileSourceUpdateOne {
	fsuo.mutation.ClearBucketUrl()
	return fsuo
}

// SetRoleArn sets the "role_arn" field.
func (fsuo *FileSourceUpdateOne) SetRoleArn(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetRoleArn(s)
	return fsuo
}

// SetNillableRoleArn sets the "role_arn" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableRoleArn(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetRoleArn(*s)
	}
	return fsuo
}

// SetPolicy sets the "policy" field.
func (fsuo *FileSourceUpdateOne) SetPolicy(s string) *FileSourceUpdateOne {
	fsuo.mutation.SetPolicy(s)
	return fsuo
}

// SetNillablePolicy sets the "policy" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillablePolicy(s *string) *FileSourceUpdateOne {
	if s != nil {
		fsuo.SetPolicy(*s)
	}
	return fsuo
}

// ClearPolicy clears the value of the "policy" field.
func (fsuo *FileSourceUpdateOne) ClearPolicy() *FileSourceUpdateOne {
	fsuo.mutation.ClearPolicy()
	return fsuo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (fsuo *FileSourceUpdateOne) SetDurationSeconds(i int) *FileSourceUpdateOne {
	fsuo.mutation.ResetDurationSeconds()
	fsuo.mutation.SetDurationSeconds(i)
	return fsuo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (fsuo *FileSourceUpdateOne) SetNillableDurationSeconds(i *int) *FileSourceUpdateOne {
	if i != nil {
		fsuo.SetDurationSeconds(*i)
	}
	return fsuo
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (fsuo *FileSourceUpdateOne) AddDurationSeconds(i int) *FileSourceUpdateOne {
	fsuo.mutation.AddDurationSeconds(i)
	return fsuo
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (fsuo *FileSourceUpdateOne) ClearDurationSeconds() *FileSourceUpdateOne {
	fsuo.mutation.ClearDurationSeconds()
	return fsuo
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (fsuo *FileSourceUpdateOne) AddFileIDs(ids ...int) *FileSourceUpdateOne {
	fsuo.mutation.AddFileIDs(ids...)
	return fsuo
}

// AddFiles adds the "files" edges to the File entity.
func (fsuo *FileSourceUpdateOne) AddFiles(f ...*File) *FileSourceUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fsuo.AddFileIDs(ids...)
}

// Mutation returns the FileSourceMutation object of the builder.
func (fsuo *FileSourceUpdateOne) Mutation() *FileSourceMutation {
	return fsuo.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (fsuo *FileSourceUpdateOne) ClearFiles() *FileSourceUpdateOne {
	fsuo.mutation.ClearFiles()
	return fsuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (fsuo *FileSourceUpdateOne) RemoveFileIDs(ids ...int) *FileSourceUpdateOne {
	fsuo.mutation.RemoveFileIDs(ids...)
	return fsuo
}

// RemoveFiles removes "files" edges to File entities.
func (fsuo *FileSourceUpdateOne) RemoveFiles(f ...*File) *FileSourceUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fsuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the FileSourceUpdate builder.
func (fsuo *FileSourceUpdateOne) Where(ps ...predicate.FileSource) *FileSourceUpdateOne {
	fsuo.mutation.Where(ps...)
	return fsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FileSourceUpdateOne) Select(field string, fields ...string) *FileSourceUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FileSource entity.
func (fsuo *FileSourceUpdateOne) Save(ctx context.Context) (*FileSource, error) {
	return withHooks(ctx, fsuo.sqlSave, fsuo.mutation, fsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FileSourceUpdateOne) SaveX(ctx context.Context) *FileSource {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FileSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FileSourceUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsuo *FileSourceUpdateOne) check() error {
	if v, ok := fsuo.mutation.Kind(); ok {
		if err := filesource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "FileSource.kind": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.AccessKeyID(); ok {
		if err := filesource.AccessKeyIDValidator(v); err != nil {
			return &ValidationError{Name: "access_key_id", err: fmt.Errorf(`ent: validator failed for field "FileSource.access_key_id": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.AccessKeySecret(); ok {
		if err := filesource.AccessKeySecretValidator(v); err != nil {
			return &ValidationError{Name: "access_key_secret", err: fmt.Errorf(`ent: validator failed for field "FileSource.access_key_secret": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.Endpoint(); ok {
		if err := filesource.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "FileSource.endpoint": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.StsEndpoint(); ok {
		if err := filesource.StsEndpointValidator(v); err != nil {
			return &ValidationError{Name: "sts_endpoint", err: fmt.Errorf(`ent: validator failed for field "FileSource.sts_endpoint": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.Region(); ok {
		if err := filesource.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "FileSource.region": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.Bucket(); ok {
		if err := filesource.BucketValidator(v); err != nil {
			return &ValidationError{Name: "bucket", err: fmt.Errorf(`ent: validator failed for field "FileSource.bucket": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.BucketUrl(); ok {
		if err := filesource.BucketUrlValidator(v); err != nil {
			return &ValidationError{Name: "bucketUrl", err: fmt.Errorf(`ent: validator failed for field "FileSource.bucketUrl": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.RoleArn(); ok {
		if err := filesource.RoleArnValidator(v); err != nil {
			return &ValidationError{Name: "role_arn", err: fmt.Errorf(`ent: validator failed for field "FileSource.role_arn": %w`, err)}
		}
	}
	return nil
}

func (fsuo *FileSourceUpdateOne) sqlSave(ctx context.Context) (_node *FileSource, err error) {
	if err := fsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filesource.Table, filesource.Columns, sqlgraph.NewFieldSpec(filesource.FieldID, field.TypeInt))
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filesource.FieldID)
		for _, f := range fields {
			if !filesource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filesource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.UpdatedBy(); ok {
		_spec.SetField(filesource.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fsuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(filesource.FieldUpdatedBy, field.TypeInt, value)
	}
	if fsuo.mutation.UpdatedByCleared() {
		_spec.ClearField(filesource.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := fsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(filesource.FieldUpdatedAt, field.TypeTime, value)
	}
	if fsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(filesource.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fsuo.mutation.TenantID(); ok {
		_spec.SetField(filesource.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := fsuo.mutation.AddedTenantID(); ok {
		_spec.AddField(filesource.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := fsuo.mutation.Kind(); ok {
		_spec.SetField(filesource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := fsuo.mutation.Comments(); ok {
		_spec.SetField(filesource.FieldComments, field.TypeString, value)
	}
	if fsuo.mutation.CommentsCleared() {
		_spec.ClearField(filesource.FieldComments, field.TypeString)
	}
	if value, ok := fsuo.mutation.AccessKeyID(); ok {
		_spec.SetField(filesource.FieldAccessKeyID, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.AccessKeySecret(); ok {
		_spec.SetField(filesource.FieldAccessKeySecret, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.Endpoint(); ok {
		_spec.SetField(filesource.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.StsEndpoint(); ok {
		_spec.SetField(filesource.FieldStsEndpoint, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.Region(); ok {
		_spec.SetField(filesource.FieldRegion, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.Bucket(); ok {
		_spec.SetField(filesource.FieldBucket, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.BucketUrl(); ok {
		_spec.SetField(filesource.FieldBucketUrl, field.TypeString, value)
	}
	if fsuo.mutation.BucketUrlCleared() {
		_spec.ClearField(filesource.FieldBucketUrl, field.TypeString)
	}
	if value, ok := fsuo.mutation.RoleArn(); ok {
		_spec.SetField(filesource.FieldRoleArn, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.Policy(); ok {
		_spec.SetField(filesource.FieldPolicy, field.TypeString, value)
	}
	if fsuo.mutation.PolicyCleared() {
		_spec.ClearField(filesource.FieldPolicy, field.TypeString)
	}
	if value, ok := fsuo.mutation.DurationSeconds(); ok {
		_spec.SetField(filesource.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := fsuo.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(filesource.FieldDurationSeconds, field.TypeInt, value)
	}
	if fsuo.mutation.DurationSecondsCleared() {
		_spec.ClearField(filesource.FieldDurationSeconds, field.TypeInt)
	}
	if fsuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filesource.FilesTable,
			Columns: []string{filesource.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !fsuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filesource.FilesTable,
			Columns: []string{filesource.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filesource.FilesTable,
			Columns: []string{filesource.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileSource{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filesource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsuo.mutation.done = true
	return _node, nil
}
