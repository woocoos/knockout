// Code generated by ent, DO NOT EDIT.

package region

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldUpdatedAt, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldParentID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldName, v))
}

// NameEn applies equality check predicate on the "name_en" field. It's identical to NameEnEQ.
func NameEn(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldNameEn, v))
}

// ShortCode applies equality check predicate on the "short_code" field. It's identical to ShortCodeEQ.
func ShortCode(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldShortCode, v))
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldZipCode, v))
}

// CountryID applies equality check predicate on the "country_id" field. It's identical to CountryIDEQ.
func CountryID(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldCountryID, v))
}

// DisplaySort applies equality check predicate on the "display_sort" field. It's identical to DisplaySortEQ.
func DisplaySort(v int32) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldDisplaySort, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldUpdatedAt))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldParentID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Region {
	return predicate.Region(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Region {
	return predicate.Region(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Region {
	return predicate.Region(sql.FieldContainsFold(FieldName, v))
}

// NameEnEQ applies the EQ predicate on the "name_en" field.
func NameEnEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldNameEn, v))
}

// NameEnNEQ applies the NEQ predicate on the "name_en" field.
func NameEnNEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldNameEn, v))
}

// NameEnIn applies the In predicate on the "name_en" field.
func NameEnIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldNameEn, vs...))
}

// NameEnNotIn applies the NotIn predicate on the "name_en" field.
func NameEnNotIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldNameEn, vs...))
}

// NameEnGT applies the GT predicate on the "name_en" field.
func NameEnGT(v string) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldNameEn, v))
}

// NameEnGTE applies the GTE predicate on the "name_en" field.
func NameEnGTE(v string) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldNameEn, v))
}

// NameEnLT applies the LT predicate on the "name_en" field.
func NameEnLT(v string) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldNameEn, v))
}

// NameEnLTE applies the LTE predicate on the "name_en" field.
func NameEnLTE(v string) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldNameEn, v))
}

// NameEnContains applies the Contains predicate on the "name_en" field.
func NameEnContains(v string) predicate.Region {
	return predicate.Region(sql.FieldContains(FieldNameEn, v))
}

// NameEnHasPrefix applies the HasPrefix predicate on the "name_en" field.
func NameEnHasPrefix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasPrefix(FieldNameEn, v))
}

// NameEnHasSuffix applies the HasSuffix predicate on the "name_en" field.
func NameEnHasSuffix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasSuffix(FieldNameEn, v))
}

// NameEnIsNil applies the IsNil predicate on the "name_en" field.
func NameEnIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldNameEn))
}

// NameEnNotNil applies the NotNil predicate on the "name_en" field.
func NameEnNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldNameEn))
}

// NameEnEqualFold applies the EqualFold predicate on the "name_en" field.
func NameEnEqualFold(v string) predicate.Region {
	return predicate.Region(sql.FieldEqualFold(FieldNameEn, v))
}

// NameEnContainsFold applies the ContainsFold predicate on the "name_en" field.
func NameEnContainsFold(v string) predicate.Region {
	return predicate.Region(sql.FieldContainsFold(FieldNameEn, v))
}

// ShortCodeEQ applies the EQ predicate on the "short_code" field.
func ShortCodeEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldShortCode, v))
}

// ShortCodeNEQ applies the NEQ predicate on the "short_code" field.
func ShortCodeNEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldShortCode, v))
}

// ShortCodeIn applies the In predicate on the "short_code" field.
func ShortCodeIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldShortCode, vs...))
}

// ShortCodeNotIn applies the NotIn predicate on the "short_code" field.
func ShortCodeNotIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldShortCode, vs...))
}

// ShortCodeGT applies the GT predicate on the "short_code" field.
func ShortCodeGT(v string) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldShortCode, v))
}

// ShortCodeGTE applies the GTE predicate on the "short_code" field.
func ShortCodeGTE(v string) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldShortCode, v))
}

// ShortCodeLT applies the LT predicate on the "short_code" field.
func ShortCodeLT(v string) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldShortCode, v))
}

// ShortCodeLTE applies the LTE predicate on the "short_code" field.
func ShortCodeLTE(v string) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldShortCode, v))
}

// ShortCodeContains applies the Contains predicate on the "short_code" field.
func ShortCodeContains(v string) predicate.Region {
	return predicate.Region(sql.FieldContains(FieldShortCode, v))
}

// ShortCodeHasPrefix applies the HasPrefix predicate on the "short_code" field.
func ShortCodeHasPrefix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasPrefix(FieldShortCode, v))
}

// ShortCodeHasSuffix applies the HasSuffix predicate on the "short_code" field.
func ShortCodeHasSuffix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasSuffix(FieldShortCode, v))
}

// ShortCodeIsNil applies the IsNil predicate on the "short_code" field.
func ShortCodeIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldShortCode))
}

// ShortCodeNotNil applies the NotNil predicate on the "short_code" field.
func ShortCodeNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldShortCode))
}

// ShortCodeEqualFold applies the EqualFold predicate on the "short_code" field.
func ShortCodeEqualFold(v string) predicate.Region {
	return predicate.Region(sql.FieldEqualFold(FieldShortCode, v))
}

// ShortCodeContainsFold applies the ContainsFold predicate on the "short_code" field.
func ShortCodeContainsFold(v string) predicate.Region {
	return predicate.Region(sql.FieldContainsFold(FieldShortCode, v))
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldZipCode, v))
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v string) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldZipCode, v))
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldZipCode, vs...))
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...string) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldZipCode, vs...))
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v string) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldZipCode, v))
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v string) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldZipCode, v))
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v string) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldZipCode, v))
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v string) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldZipCode, v))
}

// ZipCodeContains applies the Contains predicate on the "zip_code" field.
func ZipCodeContains(v string) predicate.Region {
	return predicate.Region(sql.FieldContains(FieldZipCode, v))
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zip_code" field.
func ZipCodeHasPrefix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasPrefix(FieldZipCode, v))
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zip_code" field.
func ZipCodeHasSuffix(v string) predicate.Region {
	return predicate.Region(sql.FieldHasSuffix(FieldZipCode, v))
}

// ZipCodeIsNil applies the IsNil predicate on the "zip_code" field.
func ZipCodeIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldZipCode))
}

// ZipCodeNotNil applies the NotNil predicate on the "zip_code" field.
func ZipCodeNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldZipCode))
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zip_code" field.
func ZipCodeEqualFold(v string) predicate.Region {
	return predicate.Region(sql.FieldEqualFold(FieldZipCode, v))
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zip_code" field.
func ZipCodeContainsFold(v string) predicate.Region {
	return predicate.Region(sql.FieldContainsFold(FieldZipCode, v))
}

// CountryIDEQ applies the EQ predicate on the "country_id" field.
func CountryIDEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldCountryID, v))
}

// CountryIDNEQ applies the NEQ predicate on the "country_id" field.
func CountryIDNEQ(v int) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldCountryID, v))
}

// CountryIDIn applies the In predicate on the "country_id" field.
func CountryIDIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldCountryID, vs...))
}

// CountryIDNotIn applies the NotIn predicate on the "country_id" field.
func CountryIDNotIn(vs ...int) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldCountryID, vs...))
}

// CountryIDIsNil applies the IsNil predicate on the "country_id" field.
func CountryIDIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldCountryID))
}

// CountryIDNotNil applies the NotNil predicate on the "country_id" field.
func CountryIDNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldCountryID))
}

// DisplaySortEQ applies the EQ predicate on the "display_sort" field.
func DisplaySortEQ(v int32) predicate.Region {
	return predicate.Region(sql.FieldEQ(FieldDisplaySort, v))
}

// DisplaySortNEQ applies the NEQ predicate on the "display_sort" field.
func DisplaySortNEQ(v int32) predicate.Region {
	return predicate.Region(sql.FieldNEQ(FieldDisplaySort, v))
}

// DisplaySortIn applies the In predicate on the "display_sort" field.
func DisplaySortIn(vs ...int32) predicate.Region {
	return predicate.Region(sql.FieldIn(FieldDisplaySort, vs...))
}

// DisplaySortNotIn applies the NotIn predicate on the "display_sort" field.
func DisplaySortNotIn(vs ...int32) predicate.Region {
	return predicate.Region(sql.FieldNotIn(FieldDisplaySort, vs...))
}

// DisplaySortGT applies the GT predicate on the "display_sort" field.
func DisplaySortGT(v int32) predicate.Region {
	return predicate.Region(sql.FieldGT(FieldDisplaySort, v))
}

// DisplaySortGTE applies the GTE predicate on the "display_sort" field.
func DisplaySortGTE(v int32) predicate.Region {
	return predicate.Region(sql.FieldGTE(FieldDisplaySort, v))
}

// DisplaySortLT applies the LT predicate on the "display_sort" field.
func DisplaySortLT(v int32) predicate.Region {
	return predicate.Region(sql.FieldLT(FieldDisplaySort, v))
}

// DisplaySortLTE applies the LTE predicate on the "display_sort" field.
func DisplaySortLTE(v int32) predicate.Region {
	return predicate.Region(sql.FieldLTE(FieldDisplaySort, v))
}

// DisplaySortIsNil applies the IsNil predicate on the "display_sort" field.
func DisplaySortIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldDisplaySort))
}

// DisplaySortNotNil applies the NotNil predicate on the "display_sort" field.
func DisplaySortNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldDisplaySort))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v typex.SimpleStatus) predicate.Region {
	vc := v
	return predicate.Region(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v typex.SimpleStatus) predicate.Region {
	vc := v
	return predicate.Region(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...typex.SimpleStatus) predicate.Region {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Region(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...typex.SimpleStatus) predicate.Region {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Region(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Region {
	return predicate.Region(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Region {
	return predicate.Region(sql.FieldNotNull(FieldStatus))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Region {
	return predicate.Region(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Region) predicate.Region {
	return predicate.Region(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Region {
	return predicate.Region(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Region) predicate.Region {
	return predicate.Region(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.Region {
	return predicate.Region(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.Region {
	return predicate.Region(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Region) predicate.Region {
	return predicate.Region(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Region) predicate.Region {
	return predicate.Region(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Region) predicate.Region {
	return predicate.Region(sql.NotPredicates(p))
}
