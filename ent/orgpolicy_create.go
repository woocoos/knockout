// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/codegen/entgen/types"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgpolicy"
	"github.com/woocoos/knockout/ent/permission"
)

// OrgPolicyCreate is the builder for creating a OrgPolicy entity.
type OrgPolicyCreate struct {
	config
	mutation *OrgPolicyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (opc *OrgPolicyCreate) SetCreatedBy(i int) *OrgPolicyCreate {
	opc.mutation.SetCreatedBy(i)
	return opc
}

// SetCreatedAt sets the "created_at" field.
func (opc *OrgPolicyCreate) SetCreatedAt(t time.Time) *OrgPolicyCreate {
	opc.mutation.SetCreatedAt(t)
	return opc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opc *OrgPolicyCreate) SetNillableCreatedAt(t *time.Time) *OrgPolicyCreate {
	if t != nil {
		opc.SetCreatedAt(*t)
	}
	return opc
}

// SetUpdatedBy sets the "updated_by" field.
func (opc *OrgPolicyCreate) SetUpdatedBy(i int) *OrgPolicyCreate {
	opc.mutation.SetUpdatedBy(i)
	return opc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (opc *OrgPolicyCreate) SetNillableUpdatedBy(i *int) *OrgPolicyCreate {
	if i != nil {
		opc.SetUpdatedBy(*i)
	}
	return opc
}

// SetUpdatedAt sets the "updated_at" field.
func (opc *OrgPolicyCreate) SetUpdatedAt(t time.Time) *OrgPolicyCreate {
	opc.mutation.SetUpdatedAt(t)
	return opc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opc *OrgPolicyCreate) SetNillableUpdatedAt(t *time.Time) *OrgPolicyCreate {
	if t != nil {
		opc.SetUpdatedAt(*t)
	}
	return opc
}

// SetOrgID sets the "org_id" field.
func (opc *OrgPolicyCreate) SetOrgID(i int) *OrgPolicyCreate {
	opc.mutation.SetOrgID(i)
	return opc
}

// SetAppID sets the "app_id" field.
func (opc *OrgPolicyCreate) SetAppID(i int) *OrgPolicyCreate {
	opc.mutation.SetAppID(i)
	return opc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (opc *OrgPolicyCreate) SetNillableAppID(i *int) *OrgPolicyCreate {
	if i != nil {
		opc.SetAppID(*i)
	}
	return opc
}

// SetAppPolicyID sets the "app_policy_id" field.
func (opc *OrgPolicyCreate) SetAppPolicyID(i int) *OrgPolicyCreate {
	opc.mutation.SetAppPolicyID(i)
	return opc
}

// SetNillableAppPolicyID sets the "app_policy_id" field if the given value is not nil.
func (opc *OrgPolicyCreate) SetNillableAppPolicyID(i *int) *OrgPolicyCreate {
	if i != nil {
		opc.SetAppPolicyID(*i)
	}
	return opc
}

// SetName sets the "name" field.
func (opc *OrgPolicyCreate) SetName(s string) *OrgPolicyCreate {
	opc.mutation.SetName(s)
	return opc
}

// SetComments sets the "comments" field.
func (opc *OrgPolicyCreate) SetComments(s string) *OrgPolicyCreate {
	opc.mutation.SetComments(s)
	return opc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (opc *OrgPolicyCreate) SetNillableComments(s *string) *OrgPolicyCreate {
	if s != nil {
		opc.SetComments(*s)
	}
	return opc
}

// SetRules sets the "rules" field.
func (opc *OrgPolicyCreate) SetRules(tr []types.PolicyRule) *OrgPolicyCreate {
	opc.mutation.SetRules(tr)
	return opc
}

// SetID sets the "id" field.
func (opc *OrgPolicyCreate) SetID(i int) *OrgPolicyCreate {
	opc.mutation.SetID(i)
	return opc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (opc *OrgPolicyCreate) SetNillableID(i *int) *OrgPolicyCreate {
	if i != nil {
		opc.SetID(*i)
	}
	return opc
}

// SetOrg sets the "org" edge to the Org entity.
func (opc *OrgPolicyCreate) SetOrg(o *Org) *OrgPolicyCreate {
	return opc.SetOrgID(o.ID)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (opc *OrgPolicyCreate) AddPermissionIDs(ids ...int) *OrgPolicyCreate {
	opc.mutation.AddPermissionIDs(ids...)
	return opc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (opc *OrgPolicyCreate) AddPermissions(p ...*Permission) *OrgPolicyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return opc.AddPermissionIDs(ids...)
}

// Mutation returns the OrgPolicyMutation object of the builder.
func (opc *OrgPolicyCreate) Mutation() *OrgPolicyMutation {
	return opc.mutation
}

// Save creates the OrgPolicy in the database.
func (opc *OrgPolicyCreate) Save(ctx context.Context) (*OrgPolicy, error) {
	if err := opc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*OrgPolicy, OrgPolicyMutation](ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrgPolicyCreate) SaveX(ctx context.Context) *OrgPolicy {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrgPolicyCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrgPolicyCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrgPolicyCreate) defaults() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		if orgpolicy.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orgpolicy.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orgpolicy.DefaultCreatedAt()
		opc.mutation.SetCreatedAt(v)
	}
	if _, ok := opc.mutation.ID(); !ok {
		if orgpolicy.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized orgpolicy.DefaultID (forgotten import ent/runtime?)")
		}
		v := orgpolicy.DefaultID()
		opc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrgPolicyCreate) check() error {
	if _, ok := opc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "OrgPolicy.created_by"`)}
	}
	if _, ok := opc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrgPolicy.created_at"`)}
	}
	if _, ok := opc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "OrgPolicy.org_id"`)}
	}
	if _, ok := opc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OrgPolicy.name"`)}
	}
	if _, ok := opc.mutation.Rules(); !ok {
		return &ValidationError{Name: "rules", err: errors.New(`ent: missing required field "OrgPolicy.rules"`)}
	}
	if _, ok := opc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org", err: errors.New(`ent: missing required edge "OrgPolicy.org"`)}
	}
	return nil
}

func (opc *OrgPolicyCreate) sqlSave(ctx context.Context) (*OrgPolicy, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OrgPolicyCreate) createSpec() (*OrgPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgPolicy{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(orgpolicy.Table, sqlgraph.NewFieldSpec(orgpolicy.FieldID, field.TypeInt))
	)
	_spec.OnConflict = opc.conflict
	if id, ok := opc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := opc.mutation.CreatedBy(); ok {
		_spec.SetField(orgpolicy.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := opc.mutation.CreatedAt(); ok {
		_spec.SetField(orgpolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := opc.mutation.UpdatedBy(); ok {
		_spec.SetField(orgpolicy.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := opc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgpolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := opc.mutation.AppID(); ok {
		_spec.SetField(orgpolicy.FieldAppID, field.TypeInt, value)
		_node.AppID = value
	}
	if value, ok := opc.mutation.AppPolicyID(); ok {
		_spec.SetField(orgpolicy.FieldAppPolicyID, field.TypeInt, value)
		_node.AppPolicyID = value
	}
	if value, ok := opc.mutation.Name(); ok {
		_spec.SetField(orgpolicy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := opc.mutation.Comments(); ok {
		_spec.SetField(orgpolicy.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := opc.mutation.Rules(); ok {
		_spec.SetField(orgpolicy.FieldRules, field.TypeJSON, value)
		_node.Rules = value
	}
	if nodes := opc.mutation.OrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgpolicy.OrgTable,
			Columns: []string{orgpolicy.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := opc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgpolicy.PermissionsTable,
			Columns: []string{orgpolicy.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgPolicy.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgPolicyUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (opc *OrgPolicyCreate) OnConflict(opts ...sql.ConflictOption) *OrgPolicyUpsertOne {
	opc.conflict = opts
	return &OrgPolicyUpsertOne{
		create: opc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgPolicy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opc *OrgPolicyCreate) OnConflictColumns(columns ...string) *OrgPolicyUpsertOne {
	opc.conflict = append(opc.conflict, sql.ConflictColumns(columns...))
	return &OrgPolicyUpsertOne{
		create: opc,
	}
}

type (
	// OrgPolicyUpsertOne is the builder for "upsert"-ing
	//  one OrgPolicy node.
	OrgPolicyUpsertOne struct {
		create *OrgPolicyCreate
	}

	// OrgPolicyUpsert is the "OnConflict" setter.
	OrgPolicyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgPolicyUpsert) SetUpdatedBy(v int) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateUpdatedBy() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgPolicyUpsert) AddUpdatedBy(v int) *OrgPolicyUpsert {
	u.Add(orgpolicy.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgPolicyUpsert) ClearUpdatedBy() *OrgPolicyUpsert {
	u.SetNull(orgpolicy.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgPolicyUpsert) SetUpdatedAt(v time.Time) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateUpdatedAt() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgPolicyUpsert) ClearUpdatedAt() *OrgPolicyUpsert {
	u.SetNull(orgpolicy.FieldUpdatedAt)
	return u
}

// SetOrgID sets the "org_id" field.
func (u *OrgPolicyUpsert) SetOrgID(v int) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldOrgID, v)
	return u
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateOrgID() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldOrgID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OrgPolicyUpsert) SetAppID(v int) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateAppID() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldAppID)
	return u
}

// AddAppID adds v to the "app_id" field.
func (u *OrgPolicyUpsert) AddAppID(v int) *OrgPolicyUpsert {
	u.Add(orgpolicy.FieldAppID, v)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrgPolicyUpsert) ClearAppID() *OrgPolicyUpsert {
	u.SetNull(orgpolicy.FieldAppID)
	return u
}

// SetAppPolicyID sets the "app_policy_id" field.
func (u *OrgPolicyUpsert) SetAppPolicyID(v int) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldAppPolicyID, v)
	return u
}

// UpdateAppPolicyID sets the "app_policy_id" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateAppPolicyID() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldAppPolicyID)
	return u
}

// AddAppPolicyID adds v to the "app_policy_id" field.
func (u *OrgPolicyUpsert) AddAppPolicyID(v int) *OrgPolicyUpsert {
	u.Add(orgpolicy.FieldAppPolicyID, v)
	return u
}

// ClearAppPolicyID clears the value of the "app_policy_id" field.
func (u *OrgPolicyUpsert) ClearAppPolicyID() *OrgPolicyUpsert {
	u.SetNull(orgpolicy.FieldAppPolicyID)
	return u
}

// SetName sets the "name" field.
func (u *OrgPolicyUpsert) SetName(v string) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateName() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldName)
	return u
}

// SetComments sets the "comments" field.
func (u *OrgPolicyUpsert) SetComments(v string) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateComments() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *OrgPolicyUpsert) ClearComments() *OrgPolicyUpsert {
	u.SetNull(orgpolicy.FieldComments)
	return u
}

// SetRules sets the "rules" field.
func (u *OrgPolicyUpsert) SetRules(v []types.PolicyRule) *OrgPolicyUpsert {
	u.Set(orgpolicy.FieldRules, v)
	return u
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *OrgPolicyUpsert) UpdateRules() *OrgPolicyUpsert {
	u.SetExcluded(orgpolicy.FieldRules)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrgPolicy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgpolicy.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgPolicyUpsertOne) UpdateNewValues() *OrgPolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orgpolicy.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(orgpolicy.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orgpolicy.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgPolicy.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgPolicyUpsertOne) Ignore() *OrgPolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgPolicyUpsertOne) DoNothing() *OrgPolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgPolicyCreate.OnConflict
// documentation for more info.
func (u *OrgPolicyUpsertOne) Update(set func(*OrgPolicyUpsert)) *OrgPolicyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgPolicyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgPolicyUpsertOne) SetUpdatedBy(v int) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgPolicyUpsertOne) AddUpdatedBy(v int) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateUpdatedBy() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgPolicyUpsertOne) ClearUpdatedBy() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgPolicyUpsertOne) SetUpdatedAt(v time.Time) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateUpdatedAt() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgPolicyUpsertOne) ClearUpdatedAt() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgPolicyUpsertOne) SetOrgID(v int) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateOrgID() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateOrgID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrgPolicyUpsertOne) SetAppID(v int) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *OrgPolicyUpsertOne) AddAppID(v int) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateAppID() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrgPolicyUpsertOne) ClearAppID() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearAppID()
	})
}

// SetAppPolicyID sets the "app_policy_id" field.
func (u *OrgPolicyUpsertOne) SetAppPolicyID(v int) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetAppPolicyID(v)
	})
}

// AddAppPolicyID adds v to the "app_policy_id" field.
func (u *OrgPolicyUpsertOne) AddAppPolicyID(v int) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.AddAppPolicyID(v)
	})
}

// UpdateAppPolicyID sets the "app_policy_id" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateAppPolicyID() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateAppPolicyID()
	})
}

// ClearAppPolicyID clears the value of the "app_policy_id" field.
func (u *OrgPolicyUpsertOne) ClearAppPolicyID() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearAppPolicyID()
	})
}

// SetName sets the "name" field.
func (u *OrgPolicyUpsertOne) SetName(v string) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateName() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateName()
	})
}

// SetComments sets the "comments" field.
func (u *OrgPolicyUpsertOne) SetComments(v string) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateComments() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *OrgPolicyUpsertOne) ClearComments() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearComments()
	})
}

// SetRules sets the "rules" field.
func (u *OrgPolicyUpsertOne) SetRules(v []types.PolicyRule) *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetRules(v)
	})
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *OrgPolicyUpsertOne) UpdateRules() *OrgPolicyUpsertOne {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateRules()
	})
}

// Exec executes the query.
func (u *OrgPolicyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgPolicyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgPolicyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgPolicyUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgPolicyUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgPolicyCreateBulk is the builder for creating many OrgPolicy entities in bulk.
type OrgPolicyCreateBulk struct {
	config
	builders []*OrgPolicyCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgPolicy entities in the database.
func (opcb *OrgPolicyCreateBulk) Save(ctx context.Context) ([]*OrgPolicy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrgPolicy, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrgPolicyCreateBulk) SaveX(ctx context.Context) []*OrgPolicy {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrgPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrgPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgPolicy.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgPolicyUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (opcb *OrgPolicyCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgPolicyUpsertBulk {
	opcb.conflict = opts
	return &OrgPolicyUpsertBulk{
		create: opcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgPolicy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opcb *OrgPolicyCreateBulk) OnConflictColumns(columns ...string) *OrgPolicyUpsertBulk {
	opcb.conflict = append(opcb.conflict, sql.ConflictColumns(columns...))
	return &OrgPolicyUpsertBulk{
		create: opcb,
	}
}

// OrgPolicyUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgPolicy nodes.
type OrgPolicyUpsertBulk struct {
	create *OrgPolicyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgPolicy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgpolicy.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgPolicyUpsertBulk) UpdateNewValues() *OrgPolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orgpolicy.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(orgpolicy.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orgpolicy.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgPolicy.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgPolicyUpsertBulk) Ignore() *OrgPolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgPolicyUpsertBulk) DoNothing() *OrgPolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgPolicyCreateBulk.OnConflict
// documentation for more info.
func (u *OrgPolicyUpsertBulk) Update(set func(*OrgPolicyUpsert)) *OrgPolicyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgPolicyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *OrgPolicyUpsertBulk) SetUpdatedBy(v int) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *OrgPolicyUpsertBulk) AddUpdatedBy(v int) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateUpdatedBy() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *OrgPolicyUpsertBulk) ClearUpdatedBy() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgPolicyUpsertBulk) SetUpdatedAt(v time.Time) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateUpdatedAt() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgPolicyUpsertBulk) ClearUpdatedAt() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgPolicyUpsertBulk) SetOrgID(v int) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateOrgID() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateOrgID()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrgPolicyUpsertBulk) SetAppID(v int) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetAppID(v)
	})
}

// AddAppID adds v to the "app_id" field.
func (u *OrgPolicyUpsertBulk) AddAppID(v int) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.AddAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateAppID() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrgPolicyUpsertBulk) ClearAppID() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearAppID()
	})
}

// SetAppPolicyID sets the "app_policy_id" field.
func (u *OrgPolicyUpsertBulk) SetAppPolicyID(v int) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetAppPolicyID(v)
	})
}

// AddAppPolicyID adds v to the "app_policy_id" field.
func (u *OrgPolicyUpsertBulk) AddAppPolicyID(v int) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.AddAppPolicyID(v)
	})
}

// UpdateAppPolicyID sets the "app_policy_id" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateAppPolicyID() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateAppPolicyID()
	})
}

// ClearAppPolicyID clears the value of the "app_policy_id" field.
func (u *OrgPolicyUpsertBulk) ClearAppPolicyID() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearAppPolicyID()
	})
}

// SetName sets the "name" field.
func (u *OrgPolicyUpsertBulk) SetName(v string) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateName() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateName()
	})
}

// SetComments sets the "comments" field.
func (u *OrgPolicyUpsertBulk) SetComments(v string) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateComments() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *OrgPolicyUpsertBulk) ClearComments() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.ClearComments()
	})
}

// SetRules sets the "rules" field.
func (u *OrgPolicyUpsertBulk) SetRules(v []types.PolicyRule) *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.SetRules(v)
	})
}

// UpdateRules sets the "rules" field to the value that was provided on create.
func (u *OrgPolicyUpsertBulk) UpdateRules() *OrgPolicyUpsertBulk {
	return u.Update(func(s *OrgPolicyUpsert) {
		s.UpdateRules()
	})
}

// Exec executes the query.
func (u *OrgPolicyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgPolicyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgPolicyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgPolicyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
