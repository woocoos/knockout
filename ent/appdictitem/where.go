// Code generated by ent, DO NOT EDIT.

package appdictitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldOrgID, v))
}

// DictID applies equality check predicate on the "dict_id" field. It's identical to DictIDEQ.
func DictID(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldDictID, v))
}

// RefCode applies equality check predicate on the "ref_code" field. It's identical to RefCodeEQ.
func RefCode(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldRefCode, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldName, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldComments, v))
}

// DisplaySort applies equality check predicate on the "display_sort" field. It's identical to DisplaySortEQ.
func DisplaySort(v int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldDisplaySort, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotNull(FieldUpdatedAt))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDIsNil applies the IsNil predicate on the "org_id" field.
func OrgIDIsNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIsNull(FieldOrgID))
}

// OrgIDNotNil applies the NotNil predicate on the "org_id" field.
func OrgIDNotNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotNull(FieldOrgID))
}

// DictIDEQ applies the EQ predicate on the "dict_id" field.
func DictIDEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldDictID, v))
}

// DictIDNEQ applies the NEQ predicate on the "dict_id" field.
func DictIDNEQ(v int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldDictID, v))
}

// DictIDIn applies the In predicate on the "dict_id" field.
func DictIDIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldDictID, vs...))
}

// DictIDNotIn applies the NotIn predicate on the "dict_id" field.
func DictIDNotIn(vs ...int) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldDictID, vs...))
}

// DictIDIsNil applies the IsNil predicate on the "dict_id" field.
func DictIDIsNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIsNull(FieldDictID))
}

// DictIDNotNil applies the NotNil predicate on the "dict_id" field.
func DictIDNotNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotNull(FieldDictID))
}

// RefCodeEQ applies the EQ predicate on the "ref_code" field.
func RefCodeEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldRefCode, v))
}

// RefCodeNEQ applies the NEQ predicate on the "ref_code" field.
func RefCodeNEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldRefCode, v))
}

// RefCodeIn applies the In predicate on the "ref_code" field.
func RefCodeIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldRefCode, vs...))
}

// RefCodeNotIn applies the NotIn predicate on the "ref_code" field.
func RefCodeNotIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldRefCode, vs...))
}

// RefCodeGT applies the GT predicate on the "ref_code" field.
func RefCodeGT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldRefCode, v))
}

// RefCodeGTE applies the GTE predicate on the "ref_code" field.
func RefCodeGTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldRefCode, v))
}

// RefCodeLT applies the LT predicate on the "ref_code" field.
func RefCodeLT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldRefCode, v))
}

// RefCodeLTE applies the LTE predicate on the "ref_code" field.
func RefCodeLTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldRefCode, v))
}

// RefCodeContains applies the Contains predicate on the "ref_code" field.
func RefCodeContains(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContains(FieldRefCode, v))
}

// RefCodeHasPrefix applies the HasPrefix predicate on the "ref_code" field.
func RefCodeHasPrefix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasPrefix(FieldRefCode, v))
}

// RefCodeHasSuffix applies the HasSuffix predicate on the "ref_code" field.
func RefCodeHasSuffix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasSuffix(FieldRefCode, v))
}

// RefCodeEqualFold applies the EqualFold predicate on the "ref_code" field.
func RefCodeEqualFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEqualFold(FieldRefCode, v))
}

// RefCodeContainsFold applies the ContainsFold predicate on the "ref_code" field.
func RefCodeContainsFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContainsFold(FieldRefCode, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContainsFold(FieldName, v))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldContainsFold(FieldComments, v))
}

// DisplaySortEQ applies the EQ predicate on the "display_sort" field.
func DisplaySortEQ(v int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldEQ(FieldDisplaySort, v))
}

// DisplaySortNEQ applies the NEQ predicate on the "display_sort" field.
func DisplaySortNEQ(v int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNEQ(FieldDisplaySort, v))
}

// DisplaySortIn applies the In predicate on the "display_sort" field.
func DisplaySortIn(vs ...int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIn(FieldDisplaySort, vs...))
}

// DisplaySortNotIn applies the NotIn predicate on the "display_sort" field.
func DisplaySortNotIn(vs ...int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotIn(FieldDisplaySort, vs...))
}

// DisplaySortGT applies the GT predicate on the "display_sort" field.
func DisplaySortGT(v int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGT(FieldDisplaySort, v))
}

// DisplaySortGTE applies the GTE predicate on the "display_sort" field.
func DisplaySortGTE(v int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldGTE(FieldDisplaySort, v))
}

// DisplaySortLT applies the LT predicate on the "display_sort" field.
func DisplaySortLT(v int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLT(FieldDisplaySort, v))
}

// DisplaySortLTE applies the LTE predicate on the "display_sort" field.
func DisplaySortLTE(v int32) predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldLTE(FieldDisplaySort, v))
}

// DisplaySortIsNil applies the IsNil predicate on the "display_sort" field.
func DisplaySortIsNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIsNull(FieldDisplaySort))
}

// DisplaySortNotNil applies the NotNil predicate on the "display_sort" field.
func DisplaySortNotNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotNull(FieldDisplaySort))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v typex.SimpleStatus) predicate.AppDictItem {
	vc := v
	return predicate.AppDictItem(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v typex.SimpleStatus) predicate.AppDictItem {
	vc := v
	return predicate.AppDictItem(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...typex.SimpleStatus) predicate.AppDictItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppDictItem(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...typex.SimpleStatus) predicate.AppDictItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppDictItem(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AppDictItem {
	return predicate.AppDictItem(sql.FieldNotNull(FieldStatus))
}

// HasDict applies the HasEdge predicate on the "dict" edge.
func HasDict() predicate.AppDictItem {
	return predicate.AppDictItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DictTable, DictColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDictWith applies the HasEdge predicate on the "dict" edge with a given conditions (other predicates).
func HasDictWith(preds ...predicate.AppDict) predicate.AppDictItem {
	return predicate.AppDictItem(func(s *sql.Selector) {
		step := newDictStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrg applies the HasEdge predicate on the "org" edge.
func HasOrg() predicate.AppDictItem {
	return predicate.AppDictItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrgTable, OrgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgWith applies the HasEdge predicate on the "org" edge with a given conditions (other predicates).
func HasOrgWith(preds ...predicate.Org) predicate.AppDictItem {
	return predicate.AppDictItem(func(s *sql.Selector) {
		step := newOrgStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppDictItem) predicate.AppDictItem {
	return predicate.AppDictItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppDictItem) predicate.AppDictItem {
	return predicate.AppDictItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppDictItem) predicate.AppDictItem {
	return predicate.AppDictItem(sql.NotPredicates(p))
}
