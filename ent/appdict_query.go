// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appdict"
	"github.com/woocoos/knockout/ent/appdictitem"
	"github.com/woocoos/knockout/ent/predicate"
)

// AppDictQuery is the builder for querying AppDict entities.
type AppDictQuery struct {
	config
	ctx            *QueryContext
	order          []appdict.OrderOption
	inters         []Interceptor
	predicates     []predicate.AppDict
	withApp        *AppQuery
	withItems      *AppDictItemQuery
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*AppDict) error
	withNamedItems map[string]*AppDictItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppDictQuery builder.
func (adq *AppDictQuery) Where(ps ...predicate.AppDict) *AppDictQuery {
	adq.predicates = append(adq.predicates, ps...)
	return adq
}

// Limit the number of records to be returned by this query.
func (adq *AppDictQuery) Limit(limit int) *AppDictQuery {
	adq.ctx.Limit = &limit
	return adq
}

// Offset to start from.
func (adq *AppDictQuery) Offset(offset int) *AppDictQuery {
	adq.ctx.Offset = &offset
	return adq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (adq *AppDictQuery) Unique(unique bool) *AppDictQuery {
	adq.ctx.Unique = &unique
	return adq
}

// Order specifies how the records should be ordered.
func (adq *AppDictQuery) Order(o ...appdict.OrderOption) *AppDictQuery {
	adq.order = append(adq.order, o...)
	return adq
}

// QueryApp chains the current query on the "app" edge.
func (adq *AppDictQuery) QueryApp() *AppQuery {
	query := (&AppClient{config: adq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appdict.Table, appdict.FieldID, selector),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appdict.AppTable, appdict.AppColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItems chains the current query on the "items" edge.
func (adq *AppDictQuery) QueryItems() *AppDictItemQuery {
	query := (&AppDictItemClient{config: adq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := adq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := adq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appdict.Table, appdict.FieldID, selector),
			sqlgraph.To(appdictitem.Table, appdictitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appdict.ItemsTable, appdict.ItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(adq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppDict entity from the query.
// Returns a *NotFoundError when no AppDict was found.
func (adq *AppDictQuery) First(ctx context.Context) (*AppDict, error) {
	nodes, err := adq.Limit(1).All(setContextOp(ctx, adq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appdict.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (adq *AppDictQuery) FirstX(ctx context.Context) *AppDict {
	node, err := adq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppDict ID from the query.
// Returns a *NotFoundError when no AppDict ID was found.
func (adq *AppDictQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adq.Limit(1).IDs(setContextOp(ctx, adq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appdict.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (adq *AppDictQuery) FirstIDX(ctx context.Context) int {
	id, err := adq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppDict entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AppDict entity is found.
// Returns a *NotFoundError when no AppDict entities are found.
func (adq *AppDictQuery) Only(ctx context.Context) (*AppDict, error) {
	nodes, err := adq.Limit(2).All(setContextOp(ctx, adq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appdict.Label}
	default:
		return nil, &NotSingularError{appdict.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (adq *AppDictQuery) OnlyX(ctx context.Context) *AppDict {
	node, err := adq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppDict ID in the query.
// Returns a *NotSingularError when more than one AppDict ID is found.
// Returns a *NotFoundError when no entities are found.
func (adq *AppDictQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = adq.Limit(2).IDs(setContextOp(ctx, adq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appdict.Label}
	default:
		err = &NotSingularError{appdict.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (adq *AppDictQuery) OnlyIDX(ctx context.Context) int {
	id, err := adq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppDicts.
func (adq *AppDictQuery) All(ctx context.Context) ([]*AppDict, error) {
	ctx = setContextOp(ctx, adq.ctx, "All")
	if err := adq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AppDict, *AppDictQuery]()
	return withInterceptors[[]*AppDict](ctx, adq, qr, adq.inters)
}

// AllX is like All, but panics if an error occurs.
func (adq *AppDictQuery) AllX(ctx context.Context) []*AppDict {
	nodes, err := adq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppDict IDs.
func (adq *AppDictQuery) IDs(ctx context.Context) (ids []int, err error) {
	if adq.ctx.Unique == nil && adq.path != nil {
		adq.Unique(true)
	}
	ctx = setContextOp(ctx, adq.ctx, "IDs")
	if err = adq.Select(appdict.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (adq *AppDictQuery) IDsX(ctx context.Context) []int {
	ids, err := adq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (adq *AppDictQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, adq.ctx, "Count")
	if err := adq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, adq, querierCount[*AppDictQuery](), adq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (adq *AppDictQuery) CountX(ctx context.Context) int {
	count, err := adq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (adq *AppDictQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, adq.ctx, "Exist")
	switch _, err := adq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (adq *AppDictQuery) ExistX(ctx context.Context) bool {
	exist, err := adq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppDictQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (adq *AppDictQuery) Clone() *AppDictQuery {
	if adq == nil {
		return nil
	}
	return &AppDictQuery{
		config:     adq.config,
		ctx:        adq.ctx.Clone(),
		order:      append([]appdict.OrderOption{}, adq.order...),
		inters:     append([]Interceptor{}, adq.inters...),
		predicates: append([]predicate.AppDict{}, adq.predicates...),
		withApp:    adq.withApp.Clone(),
		withItems:  adq.withItems.Clone(),
		// clone intermediate query.
		sql:  adq.sql.Clone(),
		path: adq.path,
	}
}

// WithApp tells the query-builder to eager-load the nodes that are connected to
// the "app" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *AppDictQuery) WithApp(opts ...func(*AppQuery)) *AppDictQuery {
	query := (&AppClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adq.withApp = query
	return adq
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (adq *AppDictQuery) WithItems(opts ...func(*AppDictItemQuery)) *AppDictQuery {
	query := (&AppDictItemClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	adq.withItems = query
	return adq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppDict.Query().
//		GroupBy(appdict.FieldCreatedBy).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (adq *AppDictQuery) GroupBy(field string, fields ...string) *AppDictGroupBy {
	adq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppDictGroupBy{build: adq}
	grbuild.flds = &adq.ctx.Fields
	grbuild.label = appdict.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//	}
//
//	client.AppDict.Query().
//		Select(appdict.FieldCreatedBy).
//		Scan(ctx, &v)
func (adq *AppDictQuery) Select(fields ...string) *AppDictSelect {
	adq.ctx.Fields = append(adq.ctx.Fields, fields...)
	sbuild := &AppDictSelect{AppDictQuery: adq}
	sbuild.label = appdict.Label
	sbuild.flds, sbuild.scan = &adq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppDictSelect configured with the given aggregations.
func (adq *AppDictQuery) Aggregate(fns ...AggregateFunc) *AppDictSelect {
	return adq.Select().Aggregate(fns...)
}

func (adq *AppDictQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range adq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, adq); err != nil {
				return err
			}
		}
	}
	for _, f := range adq.ctx.Fields {
		if !appdict.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if adq.path != nil {
		prev, err := adq.path(ctx)
		if err != nil {
			return err
		}
		adq.sql = prev
	}
	return nil
}

func (adq *AppDictQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AppDict, error) {
	var (
		nodes       = []*AppDict{}
		_spec       = adq.querySpec()
		loadedTypes = [2]bool{
			adq.withApp != nil,
			adq.withItems != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AppDict).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AppDict{config: adq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(adq.modifiers) > 0 {
		_spec.Modifiers = adq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, adq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := adq.withApp; query != nil {
		if err := adq.loadApp(ctx, query, nodes, nil,
			func(n *AppDict, e *App) { n.Edges.App = e }); err != nil {
			return nil, err
		}
	}
	if query := adq.withItems; query != nil {
		if err := adq.loadItems(ctx, query, nodes,
			func(n *AppDict) { n.Edges.Items = []*AppDictItem{} },
			func(n *AppDict, e *AppDictItem) { n.Edges.Items = append(n.Edges.Items, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range adq.withNamedItems {
		if err := adq.loadItems(ctx, query, nodes,
			func(n *AppDict) { n.appendNamedItems(name) },
			func(n *AppDict, e *AppDictItem) { n.appendNamedItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range adq.loadTotal {
		if err := adq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (adq *AppDictQuery) loadApp(ctx context.Context, query *AppQuery, nodes []*AppDict, init func(*AppDict), assign func(*AppDict, *App)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AppDict)
	for i := range nodes {
		fk := nodes[i].AppID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(app.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (adq *AppDictQuery) loadItems(ctx context.Context, query *AppDictItemQuery, nodes []*AppDict, init func(*AppDict), assign func(*AppDict, *AppDictItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*AppDict)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(appdictitem.FieldDictID)
	}
	query.Where(predicate.AppDictItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(appdict.ItemsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DictID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "dict_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (adq *AppDictQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := adq.querySpec()
	if len(adq.modifiers) > 0 {
		_spec.Modifiers = adq.modifiers
	}
	_spec.Node.Columns = adq.ctx.Fields
	if len(adq.ctx.Fields) > 0 {
		_spec.Unique = adq.ctx.Unique != nil && *adq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, adq.driver, _spec)
}

func (adq *AppDictQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(appdict.Table, appdict.Columns, sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt))
	_spec.From = adq.sql
	if unique := adq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if adq.path != nil {
		_spec.Unique = true
	}
	if fields := adq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appdict.FieldID)
		for i := range fields {
			if fields[i] != appdict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if adq.withApp != nil {
			_spec.Node.AddColumnOnce(appdict.FieldAppID)
		}
	}
	if ps := adq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := adq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := adq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := adq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (adq *AppDictQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(adq.driver.Dialect())
	t1 := builder.Table(appdict.Table)
	columns := adq.ctx.Fields
	if len(columns) == 0 {
		columns = appdict.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if adq.sql != nil {
		selector = adq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if adq.ctx.Unique != nil && *adq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range adq.predicates {
		p(selector)
	}
	for _, p := range adq.order {
		p(selector)
	}
	if offset := adq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := adq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedItems tells the query-builder to eager-load the nodes that are connected to the "items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (adq *AppDictQuery) WithNamedItems(name string, opts ...func(*AppDictItemQuery)) *AppDictQuery {
	query := (&AppDictItemClient{config: adq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if adq.withNamedItems == nil {
		adq.withNamedItems = make(map[string]*AppDictItemQuery)
	}
	adq.withNamedItems[name] = query
	return adq
}

// AppDictGroupBy is the group-by builder for AppDict entities.
type AppDictGroupBy struct {
	selector
	build *AppDictQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (adgb *AppDictGroupBy) Aggregate(fns ...AggregateFunc) *AppDictGroupBy {
	adgb.fns = append(adgb.fns, fns...)
	return adgb
}

// Scan applies the selector query and scans the result into the given value.
func (adgb *AppDictGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, adgb.build.ctx, "GroupBy")
	if err := adgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppDictQuery, *AppDictGroupBy](ctx, adgb.build, adgb, adgb.build.inters, v)
}

func (adgb *AppDictGroupBy) sqlScan(ctx context.Context, root *AppDictQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(adgb.fns))
	for _, fn := range adgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*adgb.flds)+len(adgb.fns))
		for _, f := range *adgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*adgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := adgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppDictSelect is the builder for selecting fields of AppDict entities.
type AppDictSelect struct {
	*AppDictQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ads *AppDictSelect) Aggregate(fns ...AggregateFunc) *AppDictSelect {
	ads.fns = append(ads.fns, fns...)
	return ads
}

// Scan applies the selector query and scans the result into the given value.
func (ads *AppDictSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ads.ctx, "Select")
	if err := ads.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppDictQuery, *AppDictSelect](ctx, ads.AppDictQuery, ads, ads.inters, v)
}

func (ads *AppDictSelect) sqlScan(ctx context.Context, root *AppDictQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ads.fns))
	for _, fn := range ads.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ads.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ads.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
