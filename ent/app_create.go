// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/appres"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgapp"
)

// AppCreate is the builder for creating a App entity.
type AppCreate struct {
	config
	mutation *AppMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (ac *AppCreate) SetCreatedBy(i int) *AppCreate {
	ac.mutation.SetCreatedBy(i)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AppCreate) SetCreatedAt(t time.Time) *AppCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AppCreate) SetNillableCreatedAt(t *time.Time) *AppCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *AppCreate) SetUpdatedBy(i int) *AppCreate {
	ac.mutation.SetUpdatedBy(i)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *AppCreate) SetNillableUpdatedBy(i *int) *AppCreate {
	if i != nil {
		ac.SetUpdatedBy(*i)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AppCreate) SetUpdatedAt(t time.Time) *AppCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AppCreate) SetNillableUpdatedAt(t *time.Time) *AppCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AppCreate) SetName(s string) *AppCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetCode sets the "code" field.
func (ac *AppCreate) SetCode(s string) *AppCreate {
	ac.mutation.SetCode(s)
	return ac
}

// SetKind sets the "kind" field.
func (ac *AppCreate) SetKind(a app.Kind) *AppCreate {
	ac.mutation.SetKind(a)
	return ac
}

// SetRedirectURI sets the "redirect_uri" field.
func (ac *AppCreate) SetRedirectURI(s string) *AppCreate {
	ac.mutation.SetRedirectURI(s)
	return ac
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (ac *AppCreate) SetNillableRedirectURI(s *string) *AppCreate {
	if s != nil {
		ac.SetRedirectURI(*s)
	}
	return ac
}

// SetAppKey sets the "app_key" field.
func (ac *AppCreate) SetAppKey(s string) *AppCreate {
	ac.mutation.SetAppKey(s)
	return ac
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppKey(s *string) *AppCreate {
	if s != nil {
		ac.SetAppKey(*s)
	}
	return ac
}

// SetAppSecret sets the "app_secret" field.
func (ac *AppCreate) SetAppSecret(s string) *AppCreate {
	ac.mutation.SetAppSecret(s)
	return ac
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (ac *AppCreate) SetNillableAppSecret(s *string) *AppCreate {
	if s != nil {
		ac.SetAppSecret(*s)
	}
	return ac
}

// SetScopes sets the "scopes" field.
func (ac *AppCreate) SetScopes(s string) *AppCreate {
	ac.mutation.SetScopes(s)
	return ac
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (ac *AppCreate) SetNillableScopes(s *string) *AppCreate {
	if s != nil {
		ac.SetScopes(*s)
	}
	return ac
}

// SetTokenValidity sets the "token_validity" field.
func (ac *AppCreate) SetTokenValidity(i int32) *AppCreate {
	ac.mutation.SetTokenValidity(i)
	return ac
}

// SetNillableTokenValidity sets the "token_validity" field if the given value is not nil.
func (ac *AppCreate) SetNillableTokenValidity(i *int32) *AppCreate {
	if i != nil {
		ac.SetTokenValidity(*i)
	}
	return ac
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (ac *AppCreate) SetRefreshTokenValidity(i int32) *AppCreate {
	ac.mutation.SetRefreshTokenValidity(i)
	return ac
}

// SetNillableRefreshTokenValidity sets the "refresh_token_validity" field if the given value is not nil.
func (ac *AppCreate) SetNillableRefreshTokenValidity(i *int32) *AppCreate {
	if i != nil {
		ac.SetRefreshTokenValidity(*i)
	}
	return ac
}

// SetLogo sets the "logo" field.
func (ac *AppCreate) SetLogo(s string) *AppCreate {
	ac.mutation.SetLogo(s)
	return ac
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ac *AppCreate) SetNillableLogo(s *string) *AppCreate {
	if s != nil {
		ac.SetLogo(*s)
	}
	return ac
}

// SetComments sets the "comments" field.
func (ac *AppCreate) SetComments(s string) *AppCreate {
	ac.mutation.SetComments(s)
	return ac
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (ac *AppCreate) SetNillableComments(s *string) *AppCreate {
	if s != nil {
		ac.SetComments(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AppCreate) SetStatus(ts typex.SimpleStatus) *AppCreate {
	ac.mutation.SetStatus(ts)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AppCreate) SetNillableStatus(ts *typex.SimpleStatus) *AppCreate {
	if ts != nil {
		ac.SetStatus(*ts)
	}
	return ac
}

// SetPrivate sets the "private" field.
func (ac *AppCreate) SetPrivate(b bool) *AppCreate {
	ac.mutation.SetPrivate(b)
	return ac
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (ac *AppCreate) SetNillablePrivate(b *bool) *AppCreate {
	if b != nil {
		ac.SetPrivate(*b)
	}
	return ac
}

// SetOwnerOrgID sets the "owner_org_id" field.
func (ac *AppCreate) SetOwnerOrgID(i int) *AppCreate {
	ac.mutation.SetOwnerOrgID(i)
	return ac
}

// SetNillableOwnerOrgID sets the "owner_org_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableOwnerOrgID(i *int) *AppCreate {
	if i != nil {
		ac.SetOwnerOrgID(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AppCreate) SetID(i int) *AppCreate {
	ac.mutation.SetID(i)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AppCreate) SetNillableID(i *int) *AppCreate {
	if i != nil {
		ac.SetID(*i)
	}
	return ac
}

// AddMenuIDs adds the "menus" edge to the AppMenu entity by IDs.
func (ac *AppCreate) AddMenuIDs(ids ...int) *AppCreate {
	ac.mutation.AddMenuIDs(ids...)
	return ac
}

// AddMenus adds the "menus" edges to the AppMenu entity.
func (ac *AppCreate) AddMenus(a ...*AppMenu) *AppCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddMenuIDs(ids...)
}

// AddActionIDs adds the "actions" edge to the AppAction entity by IDs.
func (ac *AppCreate) AddActionIDs(ids ...int) *AppCreate {
	ac.mutation.AddActionIDs(ids...)
	return ac
}

// AddActions adds the "actions" edges to the AppAction entity.
func (ac *AppCreate) AddActions(a ...*AppAction) *AppCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddActionIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the AppRes entity by IDs.
func (ac *AppCreate) AddResourceIDs(ids ...int) *AppCreate {
	ac.mutation.AddResourceIDs(ids...)
	return ac
}

// AddResources adds the "resources" edges to the AppRes entity.
func (ac *AppCreate) AddResources(a ...*AppRes) *AppCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddResourceIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AppRole entity by IDs.
func (ac *AppCreate) AddRoleIDs(ids ...int) *AppCreate {
	ac.mutation.AddRoleIDs(ids...)
	return ac
}

// AddRoles adds the "roles" edges to the AppRole entity.
func (ac *AppCreate) AddRoles(a ...*AppRole) *AppCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddRoleIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the AppPolicy entity by IDs.
func (ac *AppCreate) AddPolicyIDs(ids ...int) *AppCreate {
	ac.mutation.AddPolicyIDs(ids...)
	return ac
}

// AddPolicies adds the "policies" edges to the AppPolicy entity.
func (ac *AppCreate) AddPolicies(a ...*AppPolicy) *AppCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddPolicyIDs(ids...)
}

// AddOrgIDs adds the "orgs" edge to the Org entity by IDs.
func (ac *AppCreate) AddOrgIDs(ids ...int) *AppCreate {
	ac.mutation.AddOrgIDs(ids...)
	return ac
}

// AddOrgs adds the "orgs" edges to the Org entity.
func (ac *AppCreate) AddOrgs(o ...*Org) *AppCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOrgIDs(ids...)
}

// AddOrgAppIDs adds the "org_app" edge to the OrgApp entity by IDs.
func (ac *AppCreate) AddOrgAppIDs(ids ...int) *AppCreate {
	ac.mutation.AddOrgAppIDs(ids...)
	return ac
}

// AddOrgApp adds the "org_app" edges to the OrgApp entity.
func (ac *AppCreate) AddOrgApp(o ...*OrgApp) *AppCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOrgAppIDs(ids...)
}

// Mutation returns the AppMutation object of the builder.
func (ac *AppCreate) Mutation() *AppMutation {
	return ac.mutation
}

// Save creates the App in the database.
func (ac *AppCreate) Save(ctx context.Context) (*App, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppCreate) SaveX(ctx context.Context) *App {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AppCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if app.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized app.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := app.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := app.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.Private(); !ok {
		v := app.DefaultPrivate
		ac.mutation.SetPrivate(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if app.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized app.DefaultID (forgotten import ent/runtime?)")
		}
		v := app.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppCreate) check() error {
	if _, ok := ac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "App.created_by"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "App.created_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "App.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := app.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "App.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "App.code"`)}
	}
	if v, ok := ac.mutation.Code(); ok {
		if err := app.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "App.code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "App.kind"`)}
	}
	if v, ok := ac.mutation.Kind(); ok {
		if err := app.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "App.kind": %w`, err)}
		}
	}
	if v, ok := ac.mutation.RedirectURI(); ok {
		if err := app.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "App.redirect_uri": %w`, err)}
		}
	}
	if v, ok := ac.mutation.AppSecret(); ok {
		if err := app.AppSecretValidator(v); err != nil {
			return &ValidationError{Name: "app_secret", err: fmt.Errorf(`ent: validator failed for field "App.app_secret": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Scopes(); ok {
		if err := app.ScopesValidator(v); err != nil {
			return &ValidationError{Name: "scopes", err: fmt.Errorf(`ent: validator failed for field "App.scopes": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := app.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "App.status": %w`, err)}
		}
	}
	return nil
}

func (ac *AppCreate) sqlSave(ctx context.Context) (*App, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AppCreate) createSpec() (*App, *sqlgraph.CreateSpec) {
	var (
		_node = &App{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(app.Table, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.SetField(app.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(app.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.SetField(app.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Code(); ok {
		_spec.SetField(app.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := ac.mutation.Kind(); ok {
		_spec.SetField(app.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := ac.mutation.RedirectURI(); ok {
		_spec.SetField(app.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := ac.mutation.AppKey(); ok {
		_spec.SetField(app.FieldAppKey, field.TypeString, value)
		_node.AppKey = value
	}
	if value, ok := ac.mutation.AppSecret(); ok {
		_spec.SetField(app.FieldAppSecret, field.TypeString, value)
		_node.AppSecret = value
	}
	if value, ok := ac.mutation.Scopes(); ok {
		_spec.SetField(app.FieldScopes, field.TypeString, value)
		_node.Scopes = value
	}
	if value, ok := ac.mutation.TokenValidity(); ok {
		_spec.SetField(app.FieldTokenValidity, field.TypeInt32, value)
		_node.TokenValidity = value
	}
	if value, ok := ac.mutation.RefreshTokenValidity(); ok {
		_spec.SetField(app.FieldRefreshTokenValidity, field.TypeInt32, value)
		_node.RefreshTokenValidity = value
	}
	if value, ok := ac.mutation.Logo(); ok {
		_spec.SetField(app.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := ac.mutation.Comments(); ok {
		_spec.SetField(app.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(app.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Private(); ok {
		_spec.SetField(app.FieldPrivate, field.TypeBool, value)
		_node.Private = value
	}
	if value, ok := ac.mutation.OwnerOrgID(); ok {
		_spec.SetField(app.FieldOwnerOrgID, field.TypeInt, value)
		_node.OwnerOrgID = value
	}
	if nodes := ac.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.MenusTable,
			Columns: []string{app.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ActionsTable,
			Columns: []string{app.ActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.ResourcesTable,
			Columns: []string{app.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appres.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.RolesTable,
			Columns: []string{app.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   app.PoliciesTable,
			Columns: []string{app.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppolicy.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   app.OrgsTable,
			Columns: app.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: ac.config, mutation: newOrgAppMutation(ac.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrgAppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   app.OrgAppTable,
			Columns: []string{app.OrgAppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgapp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.App.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ac *AppCreate) OnConflict(opts ...sql.ConflictOption) *AppUpsertOne {
	ac.conflict = opts
	return &AppUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AppCreate) OnConflictColumns(columns ...string) *AppUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AppUpsertOne{
		create: ac,
	}
}

type (
	// AppUpsertOne is the builder for "upsert"-ing
	//  one App node.
	AppUpsertOne struct {
		create *AppCreate
	}

	// AppUpsert is the "OnConflict" setter.
	AppUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *AppUpsert) SetUpdatedBy(v int) *AppUpsert {
	u.Set(app.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppUpsert) UpdateUpdatedBy() *AppUpsert {
	u.SetExcluded(app.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppUpsert) AddUpdatedBy(v int) *AppUpsert {
	u.Add(app.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppUpsert) ClearUpdatedBy() *AppUpsert {
	u.SetNull(app.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUpsert) SetUpdatedAt(v time.Time) *AppUpsert {
	u.Set(app.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUpsert) UpdateUpdatedAt() *AppUpsert {
	u.SetExcluded(app.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUpsert) ClearUpdatedAt() *AppUpsert {
	u.SetNull(app.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *AppUpsert) SetName(v string) *AppUpsert {
	u.Set(app.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppUpsert) UpdateName() *AppUpsert {
	u.SetExcluded(app.FieldName)
	return u
}

// SetKind sets the "kind" field.
func (u *AppUpsert) SetKind(v app.Kind) *AppUpsert {
	u.Set(app.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *AppUpsert) UpdateKind() *AppUpsert {
	u.SetExcluded(app.FieldKind)
	return u
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *AppUpsert) SetRedirectURI(v string) *AppUpsert {
	u.Set(app.FieldRedirectURI, v)
	return u
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *AppUpsert) UpdateRedirectURI() *AppUpsert {
	u.SetExcluded(app.FieldRedirectURI)
	return u
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *AppUpsert) ClearRedirectURI() *AppUpsert {
	u.SetNull(app.FieldRedirectURI)
	return u
}

// SetAppKey sets the "app_key" field.
func (u *AppUpsert) SetAppKey(v string) *AppUpsert {
	u.Set(app.FieldAppKey, v)
	return u
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *AppUpsert) UpdateAppKey() *AppUpsert {
	u.SetExcluded(app.FieldAppKey)
	return u
}

// ClearAppKey clears the value of the "app_key" field.
func (u *AppUpsert) ClearAppKey() *AppUpsert {
	u.SetNull(app.FieldAppKey)
	return u
}

// SetAppSecret sets the "app_secret" field.
func (u *AppUpsert) SetAppSecret(v string) *AppUpsert {
	u.Set(app.FieldAppSecret, v)
	return u
}

// UpdateAppSecret sets the "app_secret" field to the value that was provided on create.
func (u *AppUpsert) UpdateAppSecret() *AppUpsert {
	u.SetExcluded(app.FieldAppSecret)
	return u
}

// ClearAppSecret clears the value of the "app_secret" field.
func (u *AppUpsert) ClearAppSecret() *AppUpsert {
	u.SetNull(app.FieldAppSecret)
	return u
}

// SetScopes sets the "scopes" field.
func (u *AppUpsert) SetScopes(v string) *AppUpsert {
	u.Set(app.FieldScopes, v)
	return u
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *AppUpsert) UpdateScopes() *AppUpsert {
	u.SetExcluded(app.FieldScopes)
	return u
}

// ClearScopes clears the value of the "scopes" field.
func (u *AppUpsert) ClearScopes() *AppUpsert {
	u.SetNull(app.FieldScopes)
	return u
}

// SetTokenValidity sets the "token_validity" field.
func (u *AppUpsert) SetTokenValidity(v int32) *AppUpsert {
	u.Set(app.FieldTokenValidity, v)
	return u
}

// UpdateTokenValidity sets the "token_validity" field to the value that was provided on create.
func (u *AppUpsert) UpdateTokenValidity() *AppUpsert {
	u.SetExcluded(app.FieldTokenValidity)
	return u
}

// AddTokenValidity adds v to the "token_validity" field.
func (u *AppUpsert) AddTokenValidity(v int32) *AppUpsert {
	u.Add(app.FieldTokenValidity, v)
	return u
}

// ClearTokenValidity clears the value of the "token_validity" field.
func (u *AppUpsert) ClearTokenValidity() *AppUpsert {
	u.SetNull(app.FieldTokenValidity)
	return u
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (u *AppUpsert) SetRefreshTokenValidity(v int32) *AppUpsert {
	u.Set(app.FieldRefreshTokenValidity, v)
	return u
}

// UpdateRefreshTokenValidity sets the "refresh_token_validity" field to the value that was provided on create.
func (u *AppUpsert) UpdateRefreshTokenValidity() *AppUpsert {
	u.SetExcluded(app.FieldRefreshTokenValidity)
	return u
}

// AddRefreshTokenValidity adds v to the "refresh_token_validity" field.
func (u *AppUpsert) AddRefreshTokenValidity(v int32) *AppUpsert {
	u.Add(app.FieldRefreshTokenValidity, v)
	return u
}

// ClearRefreshTokenValidity clears the value of the "refresh_token_validity" field.
func (u *AppUpsert) ClearRefreshTokenValidity() *AppUpsert {
	u.SetNull(app.FieldRefreshTokenValidity)
	return u
}

// SetLogo sets the "logo" field.
func (u *AppUpsert) SetLogo(v string) *AppUpsert {
	u.Set(app.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppUpsert) UpdateLogo() *AppUpsert {
	u.SetExcluded(app.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *AppUpsert) ClearLogo() *AppUpsert {
	u.SetNull(app.FieldLogo)
	return u
}

// SetComments sets the "comments" field.
func (u *AppUpsert) SetComments(v string) *AppUpsert {
	u.Set(app.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *AppUpsert) UpdateComments() *AppUpsert {
	u.SetExcluded(app.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *AppUpsert) ClearComments() *AppUpsert {
	u.SetNull(app.FieldComments)
	return u
}

// SetStatus sets the "status" field.
func (u *AppUpsert) SetStatus(v typex.SimpleStatus) *AppUpsert {
	u.Set(app.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUpsert) UpdateStatus() *AppUpsert {
	u.SetExcluded(app.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *AppUpsert) ClearStatus() *AppUpsert {
	u.SetNull(app.FieldStatus)
	return u
}

// SetPrivate sets the "private" field.
func (u *AppUpsert) SetPrivate(v bool) *AppUpsert {
	u.Set(app.FieldPrivate, v)
	return u
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *AppUpsert) UpdatePrivate() *AppUpsert {
	u.SetExcluded(app.FieldPrivate)
	return u
}

// ClearPrivate clears the value of the "private" field.
func (u *AppUpsert) ClearPrivate() *AppUpsert {
	u.SetNull(app.FieldPrivate)
	return u
}

// SetOwnerOrgID sets the "owner_org_id" field.
func (u *AppUpsert) SetOwnerOrgID(v int) *AppUpsert {
	u.Set(app.FieldOwnerOrgID, v)
	return u
}

// UpdateOwnerOrgID sets the "owner_org_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateOwnerOrgID() *AppUpsert {
	u.SetExcluded(app.FieldOwnerOrgID)
	return u
}

// AddOwnerOrgID adds v to the "owner_org_id" field.
func (u *AppUpsert) AddOwnerOrgID(v int) *AppUpsert {
	u.Add(app.FieldOwnerOrgID, v)
	return u
}

// ClearOwnerOrgID clears the value of the "owner_org_id" field.
func (u *AppUpsert) ClearOwnerOrgID() *AppUpsert {
	u.SetNull(app.FieldOwnerOrgID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(app.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppUpsertOne) UpdateNewValues() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(app.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(app.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(app.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(app.FieldCode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.App.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppUpsertOne) Ignore() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUpsertOne) DoNothing() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCreate.OnConflict
// documentation for more info.
func (u *AppUpsertOne) Update(set func(*AppUpsert)) *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AppUpsertOne) SetUpdatedBy(v int) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppUpsertOne) AddUpdatedBy(v int) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateUpdatedBy() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppUpsertOne) ClearUpdatedBy() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUpsertOne) SetUpdatedAt(v time.Time) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateUpdatedAt() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUpsertOne) ClearUpdatedAt() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AppUpsertOne) SetName(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateName() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateName()
	})
}

// SetKind sets the "kind" field.
func (u *AppUpsertOne) SetKind(v app.Kind) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateKind() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateKind()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *AppUpsertOne) SetRedirectURI(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateRedirectURI() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *AppUpsertOne) ClearRedirectURI() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearRedirectURI()
	})
}

// SetAppKey sets the "app_key" field.
func (u *AppUpsertOne) SetAppKey(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAppKey() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppKey()
	})
}

// ClearAppKey clears the value of the "app_key" field.
func (u *AppUpsertOne) ClearAppKey() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAppKey()
	})
}

// SetAppSecret sets the "app_secret" field.
func (u *AppUpsertOne) SetAppSecret(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAppSecret(v)
	})
}

// UpdateAppSecret sets the "app_secret" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAppSecret() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppSecret()
	})
}

// ClearAppSecret clears the value of the "app_secret" field.
func (u *AppUpsertOne) ClearAppSecret() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAppSecret()
	})
}

// SetScopes sets the "scopes" field.
func (u *AppUpsertOne) SetScopes(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateScopes() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *AppUpsertOne) ClearScopes() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearScopes()
	})
}

// SetTokenValidity sets the "token_validity" field.
func (u *AppUpsertOne) SetTokenValidity(v int32) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetTokenValidity(v)
	})
}

// AddTokenValidity adds v to the "token_validity" field.
func (u *AppUpsertOne) AddTokenValidity(v int32) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.AddTokenValidity(v)
	})
}

// UpdateTokenValidity sets the "token_validity" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateTokenValidity() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateTokenValidity()
	})
}

// ClearTokenValidity clears the value of the "token_validity" field.
func (u *AppUpsertOne) ClearTokenValidity() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearTokenValidity()
	})
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (u *AppUpsertOne) SetRefreshTokenValidity(v int32) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetRefreshTokenValidity(v)
	})
}

// AddRefreshTokenValidity adds v to the "refresh_token_validity" field.
func (u *AppUpsertOne) AddRefreshTokenValidity(v int32) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.AddRefreshTokenValidity(v)
	})
}

// UpdateRefreshTokenValidity sets the "refresh_token_validity" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateRefreshTokenValidity() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateRefreshTokenValidity()
	})
}

// ClearRefreshTokenValidity clears the value of the "refresh_token_validity" field.
func (u *AppUpsertOne) ClearRefreshTokenValidity() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearRefreshTokenValidity()
	})
}

// SetLogo sets the "logo" field.
func (u *AppUpsertOne) SetLogo(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateLogo() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *AppUpsertOne) ClearLogo() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearLogo()
	})
}

// SetComments sets the "comments" field.
func (u *AppUpsertOne) SetComments(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateComments() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *AppUpsertOne) ClearComments() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearComments()
	})
}

// SetStatus sets the "status" field.
func (u *AppUpsertOne) SetStatus(v typex.SimpleStatus) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateStatus() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AppUpsertOne) ClearStatus() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearStatus()
	})
}

// SetPrivate sets the "private" field.
func (u *AppUpsertOne) SetPrivate(v bool) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *AppUpsertOne) UpdatePrivate() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdatePrivate()
	})
}

// ClearPrivate clears the value of the "private" field.
func (u *AppUpsertOne) ClearPrivate() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearPrivate()
	})
}

// SetOwnerOrgID sets the "owner_org_id" field.
func (u *AppUpsertOne) SetOwnerOrgID(v int) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetOwnerOrgID(v)
	})
}

// AddOwnerOrgID adds v to the "owner_org_id" field.
func (u *AppUpsertOne) AddOwnerOrgID(v int) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.AddOwnerOrgID(v)
	})
}

// UpdateOwnerOrgID sets the "owner_org_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateOwnerOrgID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateOwnerOrgID()
	})
}

// ClearOwnerOrgID clears the value of the "owner_org_id" field.
func (u *AppUpsertOne) ClearOwnerOrgID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearOwnerOrgID()
	})
}

// Exec executes the query.
func (u *AppUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCreateBulk is the builder for creating many App entities in bulk.
type AppCreateBulk struct {
	config
	builders []*AppCreate
	conflict []sql.ConflictOption
}

// Save creates the App entities in the database.
func (acb *AppCreateBulk) Save(ctx context.Context) ([]*App, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*App, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppCreateBulk) SaveX(ctx context.Context) []*App {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.App.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (acb *AppCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUpsertBulk {
	acb.conflict = opts
	return &AppUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AppCreateBulk) OnConflictColumns(columns ...string) *AppUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AppUpsertBulk{
		create: acb,
	}
}

// AppUpsertBulk is the builder for "upsert"-ing
// a bulk of App nodes.
type AppUpsertBulk struct {
	create *AppCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(app.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppUpsertBulk) UpdateNewValues() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(app.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(app.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(app.FieldCreatedAt)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(app.FieldCode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppUpsertBulk) Ignore() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUpsertBulk) DoNothing() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCreateBulk.OnConflict
// documentation for more info.
func (u *AppUpsertBulk) Update(set func(*AppUpsert)) *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AppUpsertBulk) SetUpdatedBy(v int) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppUpsertBulk) AddUpdatedBy(v int) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateUpdatedBy() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppUpsertBulk) ClearUpdatedBy() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUpsertBulk) SetUpdatedAt(v time.Time) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateUpdatedAt() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUpsertBulk) ClearUpdatedAt() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AppUpsertBulk) SetName(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateName() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateName()
	})
}

// SetKind sets the "kind" field.
func (u *AppUpsertBulk) SetKind(v app.Kind) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateKind() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateKind()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *AppUpsertBulk) SetRedirectURI(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateRedirectURI() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *AppUpsertBulk) ClearRedirectURI() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearRedirectURI()
	})
}

// SetAppKey sets the "app_key" field.
func (u *AppUpsertBulk) SetAppKey(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAppKey(v)
	})
}

// UpdateAppKey sets the "app_key" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAppKey() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppKey()
	})
}

// ClearAppKey clears the value of the "app_key" field.
func (u *AppUpsertBulk) ClearAppKey() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAppKey()
	})
}

// SetAppSecret sets the "app_secret" field.
func (u *AppUpsertBulk) SetAppSecret(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAppSecret(v)
	})
}

// UpdateAppSecret sets the "app_secret" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAppSecret() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAppSecret()
	})
}

// ClearAppSecret clears the value of the "app_secret" field.
func (u *AppUpsertBulk) ClearAppSecret() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAppSecret()
	})
}

// SetScopes sets the "scopes" field.
func (u *AppUpsertBulk) SetScopes(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateScopes() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *AppUpsertBulk) ClearScopes() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearScopes()
	})
}

// SetTokenValidity sets the "token_validity" field.
func (u *AppUpsertBulk) SetTokenValidity(v int32) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetTokenValidity(v)
	})
}

// AddTokenValidity adds v to the "token_validity" field.
func (u *AppUpsertBulk) AddTokenValidity(v int32) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.AddTokenValidity(v)
	})
}

// UpdateTokenValidity sets the "token_validity" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateTokenValidity() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateTokenValidity()
	})
}

// ClearTokenValidity clears the value of the "token_validity" field.
func (u *AppUpsertBulk) ClearTokenValidity() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearTokenValidity()
	})
}

// SetRefreshTokenValidity sets the "refresh_token_validity" field.
func (u *AppUpsertBulk) SetRefreshTokenValidity(v int32) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetRefreshTokenValidity(v)
	})
}

// AddRefreshTokenValidity adds v to the "refresh_token_validity" field.
func (u *AppUpsertBulk) AddRefreshTokenValidity(v int32) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.AddRefreshTokenValidity(v)
	})
}

// UpdateRefreshTokenValidity sets the "refresh_token_validity" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateRefreshTokenValidity() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateRefreshTokenValidity()
	})
}

// ClearRefreshTokenValidity clears the value of the "refresh_token_validity" field.
func (u *AppUpsertBulk) ClearRefreshTokenValidity() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearRefreshTokenValidity()
	})
}

// SetLogo sets the "logo" field.
func (u *AppUpsertBulk) SetLogo(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateLogo() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *AppUpsertBulk) ClearLogo() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearLogo()
	})
}

// SetComments sets the "comments" field.
func (u *AppUpsertBulk) SetComments(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateComments() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *AppUpsertBulk) ClearComments() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearComments()
	})
}

// SetStatus sets the "status" field.
func (u *AppUpsertBulk) SetStatus(v typex.SimpleStatus) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateStatus() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AppUpsertBulk) ClearStatus() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearStatus()
	})
}

// SetPrivate sets the "private" field.
func (u *AppUpsertBulk) SetPrivate(v bool) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetPrivate(v)
	})
}

// UpdatePrivate sets the "private" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdatePrivate() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdatePrivate()
	})
}

// ClearPrivate clears the value of the "private" field.
func (u *AppUpsertBulk) ClearPrivate() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearPrivate()
	})
}

// SetOwnerOrgID sets the "owner_org_id" field.
func (u *AppUpsertBulk) SetOwnerOrgID(v int) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetOwnerOrgID(v)
	})
}

// AddOwnerOrgID adds v to the "owner_org_id" field.
func (u *AppUpsertBulk) AddOwnerOrgID(v int) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.AddOwnerOrgID(v)
	})
}

// UpdateOwnerOrgID sets the "owner_org_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateOwnerOrgID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateOwnerOrgID()
	})
}

// ClearOwnerOrgID clears the value of the "owner_org_id" field.
func (u *AppUpsertBulk) ClearOwnerOrgID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearOwnerOrgID()
	})
}

// Exec executes the query.
func (u *AppUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
