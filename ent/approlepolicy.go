// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/approlepolicy"
)

// AppRolePolicy is the model entity for the AppRolePolicy schema.
type AppRolePolicy struct {
	config `json:"-"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 应用角色ID
	RoleID int `json:"role_id,omitempty"`
	// 策略ID
	PolicyID int `json:"policy_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppRolePolicyQuery when eager-loading is set.
	Edges AppRolePolicyEdges `json:"edges"`
}

// AppRolePolicyEdges holds the relations/edges for other nodes in the graph.
type AppRolePolicyEdges struct {
	// Role holds the value of the role edge.
	Role *AppRole `json:"role,omitempty"`
	// Policy holds the value of the policy edge.
	Policy *AppPolicy `json:"policy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppRolePolicyEdges) RoleOrErr() (*AppRole, error) {
	if e.loadedTypes[0] {
		if e.Role == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: approle.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// PolicyOrErr returns the Policy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppRolePolicyEdges) PolicyOrErr() (*AppPolicy, error) {
	if e.loadedTypes[1] {
		if e.Policy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apppolicy.Label}
		}
		return e.Policy, nil
	}
	return nil, &NotLoadedError{edge: "policy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppRolePolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case approlepolicy.FieldCreatedBy, approlepolicy.FieldUpdatedBy, approlepolicy.FieldRoleID, approlepolicy.FieldPolicyID:
			values[i] = new(sql.NullInt64)
		case approlepolicy.FieldCreatedAt, approlepolicy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppRolePolicy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppRolePolicy fields.
func (arp *AppRolePolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approlepolicy.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				arp.CreatedBy = int(value.Int64)
			}
		case approlepolicy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				arp.CreatedAt = value.Time
			}
		case approlepolicy.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				arp.UpdatedBy = int(value.Int64)
			}
		case approlepolicy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				arp.UpdatedAt = value.Time
			}
		case approlepolicy.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				arp.RoleID = int(value.Int64)
			}
		case approlepolicy.FieldPolicyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field policy_id", values[i])
			} else if value.Valid {
				arp.PolicyID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRole queries the "role" edge of the AppRolePolicy entity.
func (arp *AppRolePolicy) QueryRole() *AppRoleQuery {
	return NewAppRolePolicyClient(arp.config).QueryRole(arp)
}

// QueryPolicy queries the "policy" edge of the AppRolePolicy entity.
func (arp *AppRolePolicy) QueryPolicy() *AppPolicyQuery {
	return NewAppRolePolicyClient(arp.config).QueryPolicy(arp)
}

// Update returns a builder for updating this AppRolePolicy.
// Note that you need to call AppRolePolicy.Unwrap() before calling this method if this AppRolePolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (arp *AppRolePolicy) Update() *AppRolePolicyUpdateOne {
	return NewAppRolePolicyClient(arp.config).UpdateOne(arp)
}

// Unwrap unwraps the AppRolePolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (arp *AppRolePolicy) Unwrap() *AppRolePolicy {
	_tx, ok := arp.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppRolePolicy is not a transactional entity")
	}
	arp.config.driver = _tx.drv
	return arp
}

// String implements the fmt.Stringer.
func (arp *AppRolePolicy) String() string {
	var builder strings.Builder
	builder.WriteString("AppRolePolicy(")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", arp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(arp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", arp.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(arp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", arp.RoleID))
	builder.WriteString(", ")
	builder.WriteString("policy_id=")
	builder.WriteString(fmt.Sprintf("%v", arp.PolicyID))
	builder.WriteByte(')')
	return builder.String()
}

// AppRolePolicies is a parsable slice of AppRolePolicy.
type AppRolePolicies []*AppRolePolicy
