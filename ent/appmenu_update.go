// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/predicate"
)

// AppMenuUpdate is the builder for updating AppMenu entities.
type AppMenuUpdate struct {
	config
	hooks    []Hook
	mutation *AppMenuMutation
}

// Where appends a list predicates to the AppMenuUpdate builder.
func (amu *AppMenuUpdate) Where(ps ...predicate.AppMenu) *AppMenuUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetUpdatedBy sets the "updated_by" field.
func (amu *AppMenuUpdate) SetUpdatedBy(i int) *AppMenuUpdate {
	amu.mutation.ResetUpdatedBy()
	amu.mutation.SetUpdatedBy(i)
	return amu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableUpdatedBy(i *int) *AppMenuUpdate {
	if i != nil {
		amu.SetUpdatedBy(*i)
	}
	return amu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (amu *AppMenuUpdate) AddUpdatedBy(i int) *AppMenuUpdate {
	amu.mutation.AddUpdatedBy(i)
	return amu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (amu *AppMenuUpdate) ClearUpdatedBy() *AppMenuUpdate {
	amu.mutation.ClearUpdatedBy()
	return amu
}

// SetUpdatedAt sets the "updated_at" field.
func (amu *AppMenuUpdate) SetUpdatedAt(t time.Time) *AppMenuUpdate {
	amu.mutation.SetUpdatedAt(t)
	return amu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableUpdatedAt(t *time.Time) *AppMenuUpdate {
	if t != nil {
		amu.SetUpdatedAt(*t)
	}
	return amu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (amu *AppMenuUpdate) ClearUpdatedAt() *AppMenuUpdate {
	amu.mutation.ClearUpdatedAt()
	return amu
}

// SetParentID sets the "parent_id" field.
func (amu *AppMenuUpdate) SetParentID(i int) *AppMenuUpdate {
	amu.mutation.ResetParentID()
	amu.mutation.SetParentID(i)
	return amu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableParentID(i *int) *AppMenuUpdate {
	if i != nil {
		amu.SetParentID(*i)
	}
	return amu
}

// AddParentID adds i to the "parent_id" field.
func (amu *AppMenuUpdate) AddParentID(i int) *AppMenuUpdate {
	amu.mutation.AddParentID(i)
	return amu
}

// SetKind sets the "kind" field.
func (amu *AppMenuUpdate) SetKind(a appmenu.Kind) *AppMenuUpdate {
	amu.mutation.SetKind(a)
	return amu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableKind(a *appmenu.Kind) *AppMenuUpdate {
	if a != nil {
		amu.SetKind(*a)
	}
	return amu
}

// SetName sets the "name" field.
func (amu *AppMenuUpdate) SetName(s string) *AppMenuUpdate {
	amu.mutation.SetName(s)
	return amu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableName(s *string) *AppMenuUpdate {
	if s != nil {
		amu.SetName(*s)
	}
	return amu
}

// SetIcon sets the "icon" field.
func (amu *AppMenuUpdate) SetIcon(s string) *AppMenuUpdate {
	amu.mutation.SetIcon(s)
	return amu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableIcon(s *string) *AppMenuUpdate {
	if s != nil {
		amu.SetIcon(*s)
	}
	return amu
}

// ClearIcon clears the value of the "icon" field.
func (amu *AppMenuUpdate) ClearIcon() *AppMenuUpdate {
	amu.mutation.ClearIcon()
	return amu
}

// SetRoute sets the "route" field.
func (amu *AppMenuUpdate) SetRoute(s string) *AppMenuUpdate {
	amu.mutation.SetRoute(s)
	return amu
}

// SetNillableRoute sets the "route" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableRoute(s *string) *AppMenuUpdate {
	if s != nil {
		amu.SetRoute(*s)
	}
	return amu
}

// ClearRoute clears the value of the "route" field.
func (amu *AppMenuUpdate) ClearRoute() *AppMenuUpdate {
	amu.mutation.ClearRoute()
	return amu
}

// SetActionID sets the "action_id" field.
func (amu *AppMenuUpdate) SetActionID(i int) *AppMenuUpdate {
	amu.mutation.SetActionID(i)
	return amu
}

// SetNillableActionID sets the "action_id" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableActionID(i *int) *AppMenuUpdate {
	if i != nil {
		amu.SetActionID(*i)
	}
	return amu
}

// ClearActionID clears the value of the "action_id" field.
func (amu *AppMenuUpdate) ClearActionID() *AppMenuUpdate {
	amu.mutation.ClearActionID()
	return amu
}

// SetComments sets the "comments" field.
func (amu *AppMenuUpdate) SetComments(s string) *AppMenuUpdate {
	amu.mutation.SetComments(s)
	return amu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableComments(s *string) *AppMenuUpdate {
	if s != nil {
		amu.SetComments(*s)
	}
	return amu
}

// ClearComments clears the value of the "comments" field.
func (amu *AppMenuUpdate) ClearComments() *AppMenuUpdate {
	amu.mutation.ClearComments()
	return amu
}

// SetDisplaySort sets the "display_sort" field.
func (amu *AppMenuUpdate) SetDisplaySort(i int32) *AppMenuUpdate {
	amu.mutation.ResetDisplaySort()
	amu.mutation.SetDisplaySort(i)
	return amu
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (amu *AppMenuUpdate) SetNillableDisplaySort(i *int32) *AppMenuUpdate {
	if i != nil {
		amu.SetDisplaySort(*i)
	}
	return amu
}

// AddDisplaySort adds i to the "display_sort" field.
func (amu *AppMenuUpdate) AddDisplaySort(i int32) *AppMenuUpdate {
	amu.mutation.AddDisplaySort(i)
	return amu
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (amu *AppMenuUpdate) ClearDisplaySort() *AppMenuUpdate {
	amu.mutation.ClearDisplaySort()
	return amu
}

// SetAction sets the "action" edge to the AppAction entity.
func (amu *AppMenuUpdate) SetAction(a *AppAction) *AppMenuUpdate {
	return amu.SetActionID(a.ID)
}

// Mutation returns the AppMenuMutation object of the builder.
func (amu *AppMenuUpdate) Mutation() *AppMenuMutation {
	return amu.mutation
}

// ClearAction clears the "action" edge to the AppAction entity.
func (amu *AppMenuUpdate) ClearAction() *AppMenuUpdate {
	amu.mutation.ClearAction()
	return amu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AppMenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AppMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AppMenuUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AppMenuUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amu *AppMenuUpdate) check() error {
	if v, ok := amu.mutation.Kind(); ok {
		if err := appmenu.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "AppMenu.kind": %w`, err)}
		}
	}
	return nil
}

func (amu *AppMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := amu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appmenu.Table, appmenu.Columns, sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.UpdatedBy(); ok {
		_spec.SetField(appmenu.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := amu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(appmenu.FieldUpdatedBy, field.TypeInt, value)
	}
	if amu.mutation.UpdatedByCleared() {
		_spec.ClearField(appmenu.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := amu.mutation.UpdatedAt(); ok {
		_spec.SetField(appmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if amu.mutation.UpdatedAtCleared() {
		_spec.ClearField(appmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := amu.mutation.ParentID(); ok {
		_spec.SetField(appmenu.FieldParentID, field.TypeInt, value)
	}
	if value, ok := amu.mutation.AddedParentID(); ok {
		_spec.AddField(appmenu.FieldParentID, field.TypeInt, value)
	}
	if value, ok := amu.mutation.Kind(); ok {
		_spec.SetField(appmenu.FieldKind, field.TypeEnum, value)
	}
	if value, ok := amu.mutation.Name(); ok {
		_spec.SetField(appmenu.FieldName, field.TypeString, value)
	}
	if value, ok := amu.mutation.Icon(); ok {
		_spec.SetField(appmenu.FieldIcon, field.TypeString, value)
	}
	if amu.mutation.IconCleared() {
		_spec.ClearField(appmenu.FieldIcon, field.TypeString)
	}
	if value, ok := amu.mutation.Route(); ok {
		_spec.SetField(appmenu.FieldRoute, field.TypeString, value)
	}
	if amu.mutation.RouteCleared() {
		_spec.ClearField(appmenu.FieldRoute, field.TypeString)
	}
	if value, ok := amu.mutation.Comments(); ok {
		_spec.SetField(appmenu.FieldComments, field.TypeString, value)
	}
	if amu.mutation.CommentsCleared() {
		_spec.ClearField(appmenu.FieldComments, field.TypeString)
	}
	if value, ok := amu.mutation.DisplaySort(); ok {
		_spec.SetField(appmenu.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := amu.mutation.AddedDisplaySort(); ok {
		_spec.AddField(appmenu.FieldDisplaySort, field.TypeInt32, value)
	}
	if amu.mutation.DisplaySortCleared() {
		_spec.ClearField(appmenu.FieldDisplaySort, field.TypeInt32)
	}
	if amu.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appmenu.ActionTable,
			Columns: []string{appmenu.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appmenu.ActionTable,
			Columns: []string{appmenu.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// AppMenuUpdateOne is the builder for updating a single AppMenu entity.
type AppMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMenuMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (amuo *AppMenuUpdateOne) SetUpdatedBy(i int) *AppMenuUpdateOne {
	amuo.mutation.ResetUpdatedBy()
	amuo.mutation.SetUpdatedBy(i)
	return amuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableUpdatedBy(i *int) *AppMenuUpdateOne {
	if i != nil {
		amuo.SetUpdatedBy(*i)
	}
	return amuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (amuo *AppMenuUpdateOne) AddUpdatedBy(i int) *AppMenuUpdateOne {
	amuo.mutation.AddUpdatedBy(i)
	return amuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (amuo *AppMenuUpdateOne) ClearUpdatedBy() *AppMenuUpdateOne {
	amuo.mutation.ClearUpdatedBy()
	return amuo
}

// SetUpdatedAt sets the "updated_at" field.
func (amuo *AppMenuUpdateOne) SetUpdatedAt(t time.Time) *AppMenuUpdateOne {
	amuo.mutation.SetUpdatedAt(t)
	return amuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableUpdatedAt(t *time.Time) *AppMenuUpdateOne {
	if t != nil {
		amuo.SetUpdatedAt(*t)
	}
	return amuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (amuo *AppMenuUpdateOne) ClearUpdatedAt() *AppMenuUpdateOne {
	amuo.mutation.ClearUpdatedAt()
	return amuo
}

// SetParentID sets the "parent_id" field.
func (amuo *AppMenuUpdateOne) SetParentID(i int) *AppMenuUpdateOne {
	amuo.mutation.ResetParentID()
	amuo.mutation.SetParentID(i)
	return amuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableParentID(i *int) *AppMenuUpdateOne {
	if i != nil {
		amuo.SetParentID(*i)
	}
	return amuo
}

// AddParentID adds i to the "parent_id" field.
func (amuo *AppMenuUpdateOne) AddParentID(i int) *AppMenuUpdateOne {
	amuo.mutation.AddParentID(i)
	return amuo
}

// SetKind sets the "kind" field.
func (amuo *AppMenuUpdateOne) SetKind(a appmenu.Kind) *AppMenuUpdateOne {
	amuo.mutation.SetKind(a)
	return amuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableKind(a *appmenu.Kind) *AppMenuUpdateOne {
	if a != nil {
		amuo.SetKind(*a)
	}
	return amuo
}

// SetName sets the "name" field.
func (amuo *AppMenuUpdateOne) SetName(s string) *AppMenuUpdateOne {
	amuo.mutation.SetName(s)
	return amuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableName(s *string) *AppMenuUpdateOne {
	if s != nil {
		amuo.SetName(*s)
	}
	return amuo
}

// SetIcon sets the "icon" field.
func (amuo *AppMenuUpdateOne) SetIcon(s string) *AppMenuUpdateOne {
	amuo.mutation.SetIcon(s)
	return amuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableIcon(s *string) *AppMenuUpdateOne {
	if s != nil {
		amuo.SetIcon(*s)
	}
	return amuo
}

// ClearIcon clears the value of the "icon" field.
func (amuo *AppMenuUpdateOne) ClearIcon() *AppMenuUpdateOne {
	amuo.mutation.ClearIcon()
	return amuo
}

// SetRoute sets the "route" field.
func (amuo *AppMenuUpdateOne) SetRoute(s string) *AppMenuUpdateOne {
	amuo.mutation.SetRoute(s)
	return amuo
}

// SetNillableRoute sets the "route" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableRoute(s *string) *AppMenuUpdateOne {
	if s != nil {
		amuo.SetRoute(*s)
	}
	return amuo
}

// ClearRoute clears the value of the "route" field.
func (amuo *AppMenuUpdateOne) ClearRoute() *AppMenuUpdateOne {
	amuo.mutation.ClearRoute()
	return amuo
}

// SetActionID sets the "action_id" field.
func (amuo *AppMenuUpdateOne) SetActionID(i int) *AppMenuUpdateOne {
	amuo.mutation.SetActionID(i)
	return amuo
}

// SetNillableActionID sets the "action_id" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableActionID(i *int) *AppMenuUpdateOne {
	if i != nil {
		amuo.SetActionID(*i)
	}
	return amuo
}

// ClearActionID clears the value of the "action_id" field.
func (amuo *AppMenuUpdateOne) ClearActionID() *AppMenuUpdateOne {
	amuo.mutation.ClearActionID()
	return amuo
}

// SetComments sets the "comments" field.
func (amuo *AppMenuUpdateOne) SetComments(s string) *AppMenuUpdateOne {
	amuo.mutation.SetComments(s)
	return amuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableComments(s *string) *AppMenuUpdateOne {
	if s != nil {
		amuo.SetComments(*s)
	}
	return amuo
}

// ClearComments clears the value of the "comments" field.
func (amuo *AppMenuUpdateOne) ClearComments() *AppMenuUpdateOne {
	amuo.mutation.ClearComments()
	return amuo
}

// SetDisplaySort sets the "display_sort" field.
func (amuo *AppMenuUpdateOne) SetDisplaySort(i int32) *AppMenuUpdateOne {
	amuo.mutation.ResetDisplaySort()
	amuo.mutation.SetDisplaySort(i)
	return amuo
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (amuo *AppMenuUpdateOne) SetNillableDisplaySort(i *int32) *AppMenuUpdateOne {
	if i != nil {
		amuo.SetDisplaySort(*i)
	}
	return amuo
}

// AddDisplaySort adds i to the "display_sort" field.
func (amuo *AppMenuUpdateOne) AddDisplaySort(i int32) *AppMenuUpdateOne {
	amuo.mutation.AddDisplaySort(i)
	return amuo
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (amuo *AppMenuUpdateOne) ClearDisplaySort() *AppMenuUpdateOne {
	amuo.mutation.ClearDisplaySort()
	return amuo
}

// SetAction sets the "action" edge to the AppAction entity.
func (amuo *AppMenuUpdateOne) SetAction(a *AppAction) *AppMenuUpdateOne {
	return amuo.SetActionID(a.ID)
}

// Mutation returns the AppMenuMutation object of the builder.
func (amuo *AppMenuUpdateOne) Mutation() *AppMenuMutation {
	return amuo.mutation
}

// ClearAction clears the "action" edge to the AppAction entity.
func (amuo *AppMenuUpdateOne) ClearAction() *AppMenuUpdateOne {
	amuo.mutation.ClearAction()
	return amuo
}

// Where appends a list predicates to the AppMenuUpdate builder.
func (amuo *AppMenuUpdateOne) Where(ps ...predicate.AppMenu) *AppMenuUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AppMenuUpdateOne) Select(field string, fields ...string) *AppMenuUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AppMenu entity.
func (amuo *AppMenuUpdateOne) Save(ctx context.Context) (*AppMenu, error) {
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AppMenuUpdateOne) SaveX(ctx context.Context) *AppMenu {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AppMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AppMenuUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amuo *AppMenuUpdateOne) check() error {
	if v, ok := amuo.mutation.Kind(); ok {
		if err := appmenu.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "AppMenu.kind": %w`, err)}
		}
	}
	return nil
}

func (amuo *AppMenuUpdateOne) sqlSave(ctx context.Context) (_node *AppMenu, err error) {
	if err := amuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appmenu.Table, appmenu.Columns, sqlgraph.NewFieldSpec(appmenu.FieldID, field.TypeInt))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appmenu.FieldID)
		for _, f := range fields {
			if !appmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.UpdatedBy(); ok {
		_spec.SetField(appmenu.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(appmenu.FieldUpdatedBy, field.TypeInt, value)
	}
	if amuo.mutation.UpdatedByCleared() {
		_spec.ClearField(appmenu.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := amuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if amuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(appmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := amuo.mutation.ParentID(); ok {
		_spec.SetField(appmenu.FieldParentID, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.AddedParentID(); ok {
		_spec.AddField(appmenu.FieldParentID, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.Kind(); ok {
		_spec.SetField(appmenu.FieldKind, field.TypeEnum, value)
	}
	if value, ok := amuo.mutation.Name(); ok {
		_spec.SetField(appmenu.FieldName, field.TypeString, value)
	}
	if value, ok := amuo.mutation.Icon(); ok {
		_spec.SetField(appmenu.FieldIcon, field.TypeString, value)
	}
	if amuo.mutation.IconCleared() {
		_spec.ClearField(appmenu.FieldIcon, field.TypeString)
	}
	if value, ok := amuo.mutation.Route(); ok {
		_spec.SetField(appmenu.FieldRoute, field.TypeString, value)
	}
	if amuo.mutation.RouteCleared() {
		_spec.ClearField(appmenu.FieldRoute, field.TypeString)
	}
	if value, ok := amuo.mutation.Comments(); ok {
		_spec.SetField(appmenu.FieldComments, field.TypeString, value)
	}
	if amuo.mutation.CommentsCleared() {
		_spec.ClearField(appmenu.FieldComments, field.TypeString)
	}
	if value, ok := amuo.mutation.DisplaySort(); ok {
		_spec.SetField(appmenu.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := amuo.mutation.AddedDisplaySort(); ok {
		_spec.AddField(appmenu.FieldDisplaySort, field.TypeInt32, value)
	}
	if amuo.mutation.DisplaySortCleared() {
		_spec.ClearField(appmenu.FieldDisplaySort, field.TypeInt32)
	}
	if amuo.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appmenu.ActionTable,
			Columns: []string{appmenu.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appmenu.ActionTable,
			Columns: []string{appmenu.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppMenu{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
