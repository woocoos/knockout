// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/fileidentity"
	"github.com/woocoos/knockout/ent/filesource"
	"github.com/woocoos/knockout/ent/org"
)

// FileIdentity is the model entity for the FileIdentity schema.
type FileIdentity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// accesskey id
	AccessKeyID string `json:"access_key_id,omitempty"`
	// accesskey secret
	AccessKeySecret string `json:"-"`
	// 文件来源ID
	FileSourceID int `json:"file_source_id,omitempty"`
	// 角色的资源名称(ARN)，用于STS
	RoleArn string `json:"role_arn,omitempty"`
	// 指定返回的STS令牌的权限的策略
	Policy string `json:"policy,omitempty"`
	// STS令牌的有效期，默认3600s
	DurationSeconds int `json:"duration_seconds,omitempty"`
	// 租户默认的凭证
	IsDefault bool `json:"is_default,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileIdentityQuery when eager-loading is set.
	Edges        FileIdentityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileIdentityEdges holds the relations/edges for other nodes in the graph.
type FileIdentityEdges struct {
	// Source holds the value of the source edge.
	Source *FileSource `json:"source,omitempty"`
	// Org holds the value of the org edge.
	Org *Org `json:"org,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileIdentityEdges) SourceOrErr() (*FileSource, error) {
	if e.Source != nil {
		return e.Source, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: filesource.Label}
	}
	return nil, &NotLoadedError{edge: "source"}
}

// OrgOrErr returns the Org value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileIdentityEdges) OrgOrErr() (*Org, error) {
	if e.Org != nil {
		return e.Org, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: org.Label}
	}
	return nil, &NotLoadedError{edge: "org"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileIdentity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fileidentity.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case fileidentity.FieldID, fileidentity.FieldCreatedBy, fileidentity.FieldUpdatedBy, fileidentity.FieldTenantID, fileidentity.FieldFileSourceID, fileidentity.FieldDurationSeconds:
			values[i] = new(sql.NullInt64)
		case fileidentity.FieldAccessKeyID, fileidentity.FieldAccessKeySecret, fileidentity.FieldRoleArn, fileidentity.FieldPolicy, fileidentity.FieldComments:
			values[i] = new(sql.NullString)
		case fileidentity.FieldCreatedAt, fileidentity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileIdentity fields.
func (fi *FileIdentity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fileidentity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case fileidentity.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fi.CreatedBy = int(value.Int64)
			}
		case fileidentity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fi.CreatedAt = value.Time
			}
		case fileidentity.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fi.UpdatedBy = int(value.Int64)
			}
		case fileidentity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fi.UpdatedAt = value.Time
			}
		case fileidentity.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				fi.TenantID = int(value.Int64)
			}
		case fileidentity.FieldAccessKeyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_key_id", values[i])
			} else if value.Valid {
				fi.AccessKeyID = value.String
			}
		case fileidentity.FieldAccessKeySecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_key_secret", values[i])
			} else if value.Valid {
				fi.AccessKeySecret = value.String
			}
		case fileidentity.FieldFileSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_source_id", values[i])
			} else if value.Valid {
				fi.FileSourceID = int(value.Int64)
			}
		case fileidentity.FieldRoleArn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_arn", values[i])
			} else if value.Valid {
				fi.RoleArn = value.String
			}
		case fileidentity.FieldPolicy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field policy", values[i])
			} else if value.Valid {
				fi.Policy = value.String
			}
		case fileidentity.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				fi.DurationSeconds = int(value.Int64)
			}
		case fileidentity.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				fi.IsDefault = value.Bool
			}
		case fileidentity.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				fi.Comments = value.String
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileIdentity.
// This includes values selected through modifiers, order, etc.
func (fi *FileIdentity) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// QuerySource queries the "source" edge of the FileIdentity entity.
func (fi *FileIdentity) QuerySource() *FileSourceQuery {
	return NewFileIdentityClient(fi.config).QuerySource(fi)
}

// QueryOrg queries the "org" edge of the FileIdentity entity.
func (fi *FileIdentity) QueryOrg() *OrgQuery {
	return NewFileIdentityClient(fi.config).QueryOrg(fi)
}

// Update returns a builder for updating this FileIdentity.
// Note that you need to call FileIdentity.Unwrap() before calling this method if this FileIdentity
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FileIdentity) Update() *FileIdentityUpdateOne {
	return NewFileIdentityClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FileIdentity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FileIdentity) Unwrap() *FileIdentity {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileIdentity is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FileIdentity) String() string {
	var builder strings.Builder
	builder.WriteString("FileIdentity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fi.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fi.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", fi.TenantID))
	builder.WriteString(", ")
	builder.WriteString("access_key_id=")
	builder.WriteString(fi.AccessKeyID)
	builder.WriteString(", ")
	builder.WriteString("access_key_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("file_source_id=")
	builder.WriteString(fmt.Sprintf("%v", fi.FileSourceID))
	builder.WriteString(", ")
	builder.WriteString("role_arn=")
	builder.WriteString(fi.RoleArn)
	builder.WriteString(", ")
	builder.WriteString("policy=")
	builder.WriteString(fi.Policy)
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", fi.DurationSeconds))
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", fi.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(fi.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// FileIdentities is a parsable slice of FileIdentity.
type FileIdentities []*FileIdentity
