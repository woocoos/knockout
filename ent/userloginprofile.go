// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userloginprofile"
)

// UserLoginProfile is the model entity for the UserLoginProfile schema.
type UserLoginProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// LastLoginIP holds the value of the "last_login_ip" field.
	LastLoginIP string `json:"last_login_ip,omitempty"`
	// 最后登陆时间
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// 是否允许使用密码登陆控制台
	CanLogin bool `json:"can_login,omitempty"`
	// 设置密码:keep-保持不变,customer-客户自行设置,auto-自动生成
	SetKind userloginprofile.SetKind `json:"set_kind,omitempty"`
	// 下次登陆时需要重置密码
	PasswordReset bool `json:"password_reset,omitempty"`
	// 是否开启设备认证
	VerifyDevice bool `json:"verify_device,omitempty"`
	// 是否开启多因素验证
	MfaEnabled bool `json:"mfa_enabled,omitempty"`
	// 多因素验证密钥BASE32
	MfaSecret string `json:"-"`
	// 多因素验证状态
	MfaStatus typex.SimpleStatus `json:"mfa_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLoginProfileQuery when eager-loading is set.
	Edges        UserLoginProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserLoginProfileEdges holds the relations/edges for other nodes in the graph.
type UserLoginProfileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLoginProfileEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLoginProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userloginprofile.FieldCanLogin, userloginprofile.FieldPasswordReset, userloginprofile.FieldVerifyDevice, userloginprofile.FieldMfaEnabled:
			values[i] = new(sql.NullBool)
		case userloginprofile.FieldID, userloginprofile.FieldCreatedBy, userloginprofile.FieldUpdatedBy, userloginprofile.FieldUserID:
			values[i] = new(sql.NullInt64)
		case userloginprofile.FieldLastLoginIP, userloginprofile.FieldSetKind, userloginprofile.FieldMfaSecret, userloginprofile.FieldMfaStatus:
			values[i] = new(sql.NullString)
		case userloginprofile.FieldCreatedAt, userloginprofile.FieldUpdatedAt, userloginprofile.FieldLastLoginAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLoginProfile fields.
func (ulp *UserLoginProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userloginprofile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ulp.ID = int(value.Int64)
		case userloginprofile.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ulp.CreatedBy = int(value.Int64)
			}
		case userloginprofile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ulp.CreatedAt = value.Time
			}
		case userloginprofile.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ulp.UpdatedBy = int(value.Int64)
			}
		case userloginprofile.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ulp.UpdatedAt = value.Time
			}
		case userloginprofile.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ulp.UserID = int(value.Int64)
			}
		case userloginprofile.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				ulp.LastLoginIP = value.String
			}
		case userloginprofile.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				ulp.LastLoginAt = value.Time
			}
		case userloginprofile.FieldCanLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_login", values[i])
			} else if value.Valid {
				ulp.CanLogin = value.Bool
			}
		case userloginprofile.FieldSetKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field set_kind", values[i])
			} else if value.Valid {
				ulp.SetKind = userloginprofile.SetKind(value.String)
			}
		case userloginprofile.FieldPasswordReset:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field password_reset", values[i])
			} else if value.Valid {
				ulp.PasswordReset = value.Bool
			}
		case userloginprofile.FieldVerifyDevice:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verify_device", values[i])
			} else if value.Valid {
				ulp.VerifyDevice = value.Bool
			}
		case userloginprofile.FieldMfaEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_enabled", values[i])
			} else if value.Valid {
				ulp.MfaEnabled = value.Bool
			}
		case userloginprofile.FieldMfaSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_secret", values[i])
			} else if value.Valid {
				ulp.MfaSecret = value.String
			}
		case userloginprofile.FieldMfaStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mfa_status", values[i])
			} else if value.Valid {
				ulp.MfaStatus = typex.SimpleStatus(value.String)
			}
		default:
			ulp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserLoginProfile.
// This includes values selected through modifiers, order, etc.
func (ulp *UserLoginProfile) Value(name string) (ent.Value, error) {
	return ulp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserLoginProfile entity.
func (ulp *UserLoginProfile) QueryUser() *UserQuery {
	return NewUserLoginProfileClient(ulp.config).QueryUser(ulp)
}

// Update returns a builder for updating this UserLoginProfile.
// Note that you need to call UserLoginProfile.Unwrap() before calling this method if this UserLoginProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (ulp *UserLoginProfile) Update() *UserLoginProfileUpdateOne {
	return NewUserLoginProfileClient(ulp.config).UpdateOne(ulp)
}

// Unwrap unwraps the UserLoginProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ulp *UserLoginProfile) Unwrap() *UserLoginProfile {
	_tx, ok := ulp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLoginProfile is not a transactional entity")
	}
	ulp.config.driver = _tx.drv
	return ulp
}

// String implements the fmt.Stringer.
func (ulp *UserLoginProfile) String() string {
	var builder strings.Builder
	builder.WriteString("UserLoginProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ulp.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ulp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ulp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ulp.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ulp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ulp.UserID))
	builder.WriteString(", ")
	builder.WriteString("last_login_ip=")
	builder.WriteString(ulp.LastLoginIP)
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(ulp.LastLoginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("can_login=")
	builder.WriteString(fmt.Sprintf("%v", ulp.CanLogin))
	builder.WriteString(", ")
	builder.WriteString("set_kind=")
	builder.WriteString(fmt.Sprintf("%v", ulp.SetKind))
	builder.WriteString(", ")
	builder.WriteString("password_reset=")
	builder.WriteString(fmt.Sprintf("%v", ulp.PasswordReset))
	builder.WriteString(", ")
	builder.WriteString("verify_device=")
	builder.WriteString(fmt.Sprintf("%v", ulp.VerifyDevice))
	builder.WriteString(", ")
	builder.WriteString("mfa_enabled=")
	builder.WriteString(fmt.Sprintf("%v", ulp.MfaEnabled))
	builder.WriteString(", ")
	builder.WriteString("mfa_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("mfa_status=")
	builder.WriteString(fmt.Sprintf("%v", ulp.MfaStatus))
	builder.WriteByte(')')
	return builder.String()
}

// UserLoginProfiles is a parsable slice of UserLoginProfile.
type UserLoginProfiles []*UserLoginProfile
