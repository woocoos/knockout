// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/oauthclient"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orguser"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userdevice"
	"github.com/woocoos/knockout/ent/useridentity"
	"github.com/woocoos/knockout/ent/userloginprofile"
	"github.com/woocoos/knockout/ent/userpassword"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedBy sets the "updated_by" field.
func (uu *UserUpdate) SetUpdatedBy(i int) *UserUpdate {
	uu.mutation.ResetUpdatedBy()
	uu.mutation.SetUpdatedBy(i)
	return uu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedBy(i *int) *UserUpdate {
	if i != nil {
		uu.SetUpdatedBy(*i)
	}
	return uu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uu *UserUpdate) AddUpdatedBy(i int) *UserUpdate {
	uu.mutation.AddUpdatedBy(i)
	return uu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uu *UserUpdate) ClearUpdatedBy() *UserUpdate {
	uu.mutation.ClearUpdatedBy()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetPrincipalName sets the "principal_name" field.
func (uu *UserUpdate) SetPrincipalName(s string) *UserUpdate {
	uu.mutation.SetPrincipalName(s)
	return uu
}

// SetNillablePrincipalName sets the "principal_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePrincipalName(s *string) *UserUpdate {
	if s != nil {
		uu.SetPrincipalName(*s)
	}
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetMobile sets the "mobile" field.
func (uu *UserUpdate) SetMobile(s string) *UserUpdate {
	uu.mutation.SetMobile(s)
	return uu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMobile(s *string) *UserUpdate {
	if s != nil {
		uu.SetMobile(*s)
	}
	return uu
}

// ClearMobile clears the value of the "mobile" field.
func (uu *UserUpdate) ClearMobile() *UserUpdate {
	uu.mutation.ClearMobile()
	return uu
}

// SetUserType sets the "user_type" field.
func (uu *UserUpdate) SetUserType(ut user.UserType) *UserUpdate {
	uu.mutation.SetUserType(ut)
	return uu
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserType(ut *user.UserType) *UserUpdate {
	if ut != nil {
		uu.SetUserType(*ut)
	}
	return uu
}

// SetCreationType sets the "creation_type" field.
func (uu *UserUpdate) SetCreationType(ut user.CreationType) *UserUpdate {
	uu.mutation.SetCreationType(ut)
	return uu
}

// SetNillableCreationType sets the "creation_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreationType(ut *user.CreationType) *UserUpdate {
	if ut != nil {
		uu.SetCreationType(*ut)
	}
	return uu
}

// SetRegisterIP sets the "register_ip" field.
func (uu *UserUpdate) SetRegisterIP(s string) *UserUpdate {
	uu.mutation.SetRegisterIP(s)
	return uu
}

// SetNillableRegisterIP sets the "register_ip" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRegisterIP(s *string) *UserUpdate {
	if s != nil {
		uu.SetRegisterIP(*s)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(ts typex.SimpleStatus) *UserUpdate {
	uu.mutation.SetStatus(ts)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(ts *typex.SimpleStatus) *UserUpdate {
	if ts != nil {
		uu.SetStatus(*ts)
	}
	return uu
}

// ClearStatus clears the value of the "status" field.
func (uu *UserUpdate) ClearStatus() *UserUpdate {
	uu.mutation.ClearStatus()
	return uu
}

// SetComments sets the "comments" field.
func (uu *UserUpdate) SetComments(s string) *UserUpdate {
	uu.mutation.SetComments(s)
	return uu
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (uu *UserUpdate) SetNillableComments(s *string) *UserUpdate {
	if s != nil {
		uu.SetComments(*s)
	}
	return uu
}

// ClearComments clears the value of the "comments" field.
func (uu *UserUpdate) ClearComments() *UserUpdate {
	uu.mutation.ClearComments()
	return uu
}

// SetAvatarFileID sets the "avatar_file_id" field.
func (uu *UserUpdate) SetAvatarFileID(i int) *UserUpdate {
	uu.mutation.ResetAvatarFileID()
	uu.mutation.SetAvatarFileID(i)
	return uu
}

// SetNillableAvatarFileID sets the "avatar_file_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarFileID(i *int) *UserUpdate {
	if i != nil {
		uu.SetAvatarFileID(*i)
	}
	return uu
}

// AddAvatarFileID adds i to the "avatar_file_id" field.
func (uu *UserUpdate) AddAvatarFileID(i int) *UserUpdate {
	uu.mutation.AddAvatarFileID(i)
	return uu
}

// ClearAvatarFileID clears the value of the "avatar_file_id" field.
func (uu *UserUpdate) ClearAvatarFileID() *UserUpdate {
	uu.mutation.ClearAvatarFileID()
	return uu
}

// AddIdentityIDs adds the "identities" edge to the UserIdentity entity by IDs.
func (uu *UserUpdate) AddIdentityIDs(ids ...int) *UserUpdate {
	uu.mutation.AddIdentityIDs(ids...)
	return uu
}

// AddIdentities adds the "identities" edges to the UserIdentity entity.
func (uu *UserUpdate) AddIdentities(u ...*UserIdentity) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddIdentityIDs(ids...)
}

// SetLoginProfileID sets the "login_profile" edge to the UserLoginProfile entity by ID.
func (uu *UserUpdate) SetLoginProfileID(id int) *UserUpdate {
	uu.mutation.SetLoginProfileID(id)
	return uu
}

// SetNillableLoginProfileID sets the "login_profile" edge to the UserLoginProfile entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginProfileID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetLoginProfileID(*id)
	}
	return uu
}

// SetLoginProfile sets the "login_profile" edge to the UserLoginProfile entity.
func (uu *UserUpdate) SetLoginProfile(u *UserLoginProfile) *UserUpdate {
	return uu.SetLoginProfileID(u.ID)
}

// AddPasswordIDs adds the "passwords" edge to the UserPassword entity by IDs.
func (uu *UserUpdate) AddPasswordIDs(ids ...int) *UserUpdate {
	uu.mutation.AddPasswordIDs(ids...)
	return uu
}

// AddPasswords adds the "passwords" edges to the UserPassword entity.
func (uu *UserUpdate) AddPasswords(u ...*UserPassword) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddPasswordIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the UserDevice entity by IDs.
func (uu *UserUpdate) AddDeviceIDs(ids ...int) *UserUpdate {
	uu.mutation.AddDeviceIDs(ids...)
	return uu
}

// AddDevices adds the "devices" edges to the UserDevice entity.
func (uu *UserUpdate) AddDevices(u ...*UserDevice) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddDeviceIDs(ids...)
}

// AddOrgIDs adds the "orgs" edge to the Org entity by IDs.
func (uu *UserUpdate) AddOrgIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOrgIDs(ids...)
	return uu
}

// AddOrgs adds the "orgs" edges to the Org entity.
func (uu *UserUpdate) AddOrgs(o ...*Org) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOrgIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (uu *UserUpdate) AddPermissionIDs(ids ...int) *UserUpdate {
	uu.mutation.AddPermissionIDs(ids...)
	return uu
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (uu *UserUpdate) AddPermissions(p ...*Permission) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPermissionIDs(ids...)
}

// AddOauthClientIDs adds the "oauth_clients" edge to the OauthClient entity by IDs.
func (uu *UserUpdate) AddOauthClientIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOauthClientIDs(ids...)
	return uu
}

// AddOauthClients adds the "oauth_clients" edges to the OauthClient entity.
func (uu *UserUpdate) AddOauthClients(o ...*OauthClient) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOauthClientIDs(ids...)
}

// AddOrgUserIDs adds the "org_user" edge to the OrgUser entity by IDs.
func (uu *UserUpdate) AddOrgUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOrgUserIDs(ids...)
	return uu
}

// AddOrgUser adds the "org_user" edges to the OrgUser entity.
func (uu *UserUpdate) AddOrgUser(o ...*OrgUser) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOrgUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearIdentities clears all "identities" edges to the UserIdentity entity.
func (uu *UserUpdate) ClearIdentities() *UserUpdate {
	uu.mutation.ClearIdentities()
	return uu
}

// RemoveIdentityIDs removes the "identities" edge to UserIdentity entities by IDs.
func (uu *UserUpdate) RemoveIdentityIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveIdentityIDs(ids...)
	return uu
}

// RemoveIdentities removes "identities" edges to UserIdentity entities.
func (uu *UserUpdate) RemoveIdentities(u ...*UserIdentity) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveIdentityIDs(ids...)
}

// ClearLoginProfile clears the "login_profile" edge to the UserLoginProfile entity.
func (uu *UserUpdate) ClearLoginProfile() *UserUpdate {
	uu.mutation.ClearLoginProfile()
	return uu
}

// ClearPasswords clears all "passwords" edges to the UserPassword entity.
func (uu *UserUpdate) ClearPasswords() *UserUpdate {
	uu.mutation.ClearPasswords()
	return uu
}

// RemovePasswordIDs removes the "passwords" edge to UserPassword entities by IDs.
func (uu *UserUpdate) RemovePasswordIDs(ids ...int) *UserUpdate {
	uu.mutation.RemovePasswordIDs(ids...)
	return uu
}

// RemovePasswords removes "passwords" edges to UserPassword entities.
func (uu *UserUpdate) RemovePasswords(u ...*UserPassword) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemovePasswordIDs(ids...)
}

// ClearDevices clears all "devices" edges to the UserDevice entity.
func (uu *UserUpdate) ClearDevices() *UserUpdate {
	uu.mutation.ClearDevices()
	return uu
}

// RemoveDeviceIDs removes the "devices" edge to UserDevice entities by IDs.
func (uu *UserUpdate) RemoveDeviceIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveDeviceIDs(ids...)
	return uu
}

// RemoveDevices removes "devices" edges to UserDevice entities.
func (uu *UserUpdate) RemoveDevices(u ...*UserDevice) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveDeviceIDs(ids...)
}

// ClearOrgs clears all "orgs" edges to the Org entity.
func (uu *UserUpdate) ClearOrgs() *UserUpdate {
	uu.mutation.ClearOrgs()
	return uu
}

// RemoveOrgIDs removes the "orgs" edge to Org entities by IDs.
func (uu *UserUpdate) RemoveOrgIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOrgIDs(ids...)
	return uu
}

// RemoveOrgs removes "orgs" edges to Org entities.
func (uu *UserUpdate) RemoveOrgs(o ...*Org) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOrgIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (uu *UserUpdate) ClearPermissions() *UserUpdate {
	uu.mutation.ClearPermissions()
	return uu
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (uu *UserUpdate) RemovePermissionIDs(ids ...int) *UserUpdate {
	uu.mutation.RemovePermissionIDs(ids...)
	return uu
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (uu *UserUpdate) RemovePermissions(p ...*Permission) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePermissionIDs(ids...)
}

// ClearOauthClients clears all "oauth_clients" edges to the OauthClient entity.
func (uu *UserUpdate) ClearOauthClients() *UserUpdate {
	uu.mutation.ClearOauthClients()
	return uu
}

// RemoveOauthClientIDs removes the "oauth_clients" edge to OauthClient entities by IDs.
func (uu *UserUpdate) RemoveOauthClientIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOauthClientIDs(ids...)
	return uu
}

// RemoveOauthClients removes "oauth_clients" edges to OauthClient entities.
func (uu *UserUpdate) RemoveOauthClients(o ...*OauthClient) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOauthClientIDs(ids...)
}

// ClearOrgUser clears all "org_user" edges to the OrgUser entity.
func (uu *UserUpdate) ClearOrgUser() *UserUpdate {
	uu.mutation.ClearOrgUser()
	return uu
}

// RemoveOrgUserIDs removes the "org_user" edge to OrgUser entities by IDs.
func (uu *UserUpdate) RemoveOrgUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOrgUserIDs(ids...)
	return uu
}

// RemoveOrgUser removes "org_user" edges to OrgUser entities.
func (uu *UserUpdate) RemoveOrgUser(o ...*OrgUser) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOrgUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Mobile(); ok {
		if err := user.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "User.mobile": %w`, err)}
		}
	}
	if v, ok := uu.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	if v, ok := uu.mutation.CreationType(); ok {
		if err := user.CreationTypeValidator(v); err != nil {
			return &ValidationError{Name: "creation_type", err: fmt.Errorf(`ent: validator failed for field "User.creation_type": %w`, err)}
		}
	}
	if v, ok := uu.mutation.RegisterIP(); ok {
		if err := user.RegisterIPValidator(v); err != nil {
			return &ValidationError{Name: "register_ip", err: fmt.Errorf(`ent: validator failed for field "User.register_ip": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if uu.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.PrincipalName(); ok {
		_spec.SetField(user.FieldPrincipalName, field.TypeString, value)
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if uu.mutation.MobileCleared() {
		_spec.ClearField(user.FieldMobile, field.TypeString)
	}
	if value, ok := uu.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.CreationType(); ok {
		_spec.SetField(user.FieldCreationType, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.RegisterIP(); ok {
		_spec.SetField(user.FieldRegisterIP, field.TypeString, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if uu.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeEnum)
	}
	if value, ok := uu.mutation.Comments(); ok {
		_spec.SetField(user.FieldComments, field.TypeString, value)
	}
	if uu.mutation.CommentsCleared() {
		_spec.ClearField(user.FieldComments, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarFileID(); ok {
		_spec.SetField(user.FieldAvatarFileID, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedAvatarFileID(); ok {
		_spec.AddField(user.FieldAvatarFileID, field.TypeInt, value)
	}
	if uu.mutation.AvatarFileIDCleared() {
		_spec.ClearField(user.FieldAvatarFileID, field.TypeInt)
	}
	if uu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IdentitiesTable,
			Columns: []string{user.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !uu.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IdentitiesTable,
			Columns: []string{user.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IdentitiesTable,
			Columns: []string{user.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LoginProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LoginProfileTable,
			Columns: []string{user.LoginProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userloginprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LoginProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LoginProfileTable,
			Columns: []string{user.LoginProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userloginprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPasswordsIDs(); len(nodes) > 0 && !uu.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDevicesIDs(); len(nodes) > 0 && !uu.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrgsTable,
			Columns: user.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		createE := &OrgUserCreate{config: uu.config, mutation: newOrgUserMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOrgsIDs(); len(nodes) > 0 && !uu.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrgsTable,
			Columns: user.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: uu.config, mutation: newOrgUserMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrgsTable,
			Columns: user.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: uu.config, mutation: newOrgUserMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PermissionsTable,
			Columns: []string{user.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !uu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PermissionsTable,
			Columns: []string{user.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PermissionsTable,
			Columns: []string{user.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthClientsTable,
			Columns: []string{user.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOauthClientsIDs(); len(nodes) > 0 && !uu.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthClientsTable,
			Columns: []string{user.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OauthClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthClientsTable,
			Columns: []string{user.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgUserTable,
			Columns: []string{user.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOrgUserIDs(); len(nodes) > 0 && !uu.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgUserTable,
			Columns: []string{user.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrgUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgUserTable,
			Columns: []string{user.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (uuo *UserUpdateOne) SetUpdatedBy(i int) *UserUpdateOne {
	uuo.mutation.ResetUpdatedBy()
	uuo.mutation.SetUpdatedBy(i)
	return uuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedBy(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetUpdatedBy(*i)
	}
	return uuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uuo *UserUpdateOne) AddUpdatedBy(i int) *UserUpdateOne {
	uuo.mutation.AddUpdatedBy(i)
	return uuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uuo *UserUpdateOne) ClearUpdatedBy() *UserUpdateOne {
	uuo.mutation.ClearUpdatedBy()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetPrincipalName sets the "principal_name" field.
func (uuo *UserUpdateOne) SetPrincipalName(s string) *UserUpdateOne {
	uuo.mutation.SetPrincipalName(s)
	return uuo
}

// SetNillablePrincipalName sets the "principal_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePrincipalName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPrincipalName(*s)
	}
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetMobile sets the "mobile" field.
func (uuo *UserUpdateOne) SetMobile(s string) *UserUpdateOne {
	uuo.mutation.SetMobile(s)
	return uuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMobile(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMobile(*s)
	}
	return uuo
}

// ClearMobile clears the value of the "mobile" field.
func (uuo *UserUpdateOne) ClearMobile() *UserUpdateOne {
	uuo.mutation.ClearMobile()
	return uuo
}

// SetUserType sets the "user_type" field.
func (uuo *UserUpdateOne) SetUserType(ut user.UserType) *UserUpdateOne {
	uuo.mutation.SetUserType(ut)
	return uuo
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserType(ut *user.UserType) *UserUpdateOne {
	if ut != nil {
		uuo.SetUserType(*ut)
	}
	return uuo
}

// SetCreationType sets the "creation_type" field.
func (uuo *UserUpdateOne) SetCreationType(ut user.CreationType) *UserUpdateOne {
	uuo.mutation.SetCreationType(ut)
	return uuo
}

// SetNillableCreationType sets the "creation_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreationType(ut *user.CreationType) *UserUpdateOne {
	if ut != nil {
		uuo.SetCreationType(*ut)
	}
	return uuo
}

// SetRegisterIP sets the "register_ip" field.
func (uuo *UserUpdateOne) SetRegisterIP(s string) *UserUpdateOne {
	uuo.mutation.SetRegisterIP(s)
	return uuo
}

// SetNillableRegisterIP sets the "register_ip" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRegisterIP(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRegisterIP(*s)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(ts typex.SimpleStatus) *UserUpdateOne {
	uuo.mutation.SetStatus(ts)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *UserUpdateOne {
	if ts != nil {
		uuo.SetStatus(*ts)
	}
	return uuo
}

// ClearStatus clears the value of the "status" field.
func (uuo *UserUpdateOne) ClearStatus() *UserUpdateOne {
	uuo.mutation.ClearStatus()
	return uuo
}

// SetComments sets the "comments" field.
func (uuo *UserUpdateOne) SetComments(s string) *UserUpdateOne {
	uuo.mutation.SetComments(s)
	return uuo
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableComments(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetComments(*s)
	}
	return uuo
}

// ClearComments clears the value of the "comments" field.
func (uuo *UserUpdateOne) ClearComments() *UserUpdateOne {
	uuo.mutation.ClearComments()
	return uuo
}

// SetAvatarFileID sets the "avatar_file_id" field.
func (uuo *UserUpdateOne) SetAvatarFileID(i int) *UserUpdateOne {
	uuo.mutation.ResetAvatarFileID()
	uuo.mutation.SetAvatarFileID(i)
	return uuo
}

// SetNillableAvatarFileID sets the "avatar_file_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarFileID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetAvatarFileID(*i)
	}
	return uuo
}

// AddAvatarFileID adds i to the "avatar_file_id" field.
func (uuo *UserUpdateOne) AddAvatarFileID(i int) *UserUpdateOne {
	uuo.mutation.AddAvatarFileID(i)
	return uuo
}

// ClearAvatarFileID clears the value of the "avatar_file_id" field.
func (uuo *UserUpdateOne) ClearAvatarFileID() *UserUpdateOne {
	uuo.mutation.ClearAvatarFileID()
	return uuo
}

// AddIdentityIDs adds the "identities" edge to the UserIdentity entity by IDs.
func (uuo *UserUpdateOne) AddIdentityIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddIdentityIDs(ids...)
	return uuo
}

// AddIdentities adds the "identities" edges to the UserIdentity entity.
func (uuo *UserUpdateOne) AddIdentities(u ...*UserIdentity) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddIdentityIDs(ids...)
}

// SetLoginProfileID sets the "login_profile" edge to the UserLoginProfile entity by ID.
func (uuo *UserUpdateOne) SetLoginProfileID(id int) *UserUpdateOne {
	uuo.mutation.SetLoginProfileID(id)
	return uuo
}

// SetNillableLoginProfileID sets the "login_profile" edge to the UserLoginProfile entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginProfileID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetLoginProfileID(*id)
	}
	return uuo
}

// SetLoginProfile sets the "login_profile" edge to the UserLoginProfile entity.
func (uuo *UserUpdateOne) SetLoginProfile(u *UserLoginProfile) *UserUpdateOne {
	return uuo.SetLoginProfileID(u.ID)
}

// AddPasswordIDs adds the "passwords" edge to the UserPassword entity by IDs.
func (uuo *UserUpdateOne) AddPasswordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddPasswordIDs(ids...)
	return uuo
}

// AddPasswords adds the "passwords" edges to the UserPassword entity.
func (uuo *UserUpdateOne) AddPasswords(u ...*UserPassword) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddPasswordIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the UserDevice entity by IDs.
func (uuo *UserUpdateOne) AddDeviceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddDeviceIDs(ids...)
	return uuo
}

// AddDevices adds the "devices" edges to the UserDevice entity.
func (uuo *UserUpdateOne) AddDevices(u ...*UserDevice) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddDeviceIDs(ids...)
}

// AddOrgIDs adds the "orgs" edge to the Org entity by IDs.
func (uuo *UserUpdateOne) AddOrgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOrgIDs(ids...)
	return uuo
}

// AddOrgs adds the "orgs" edges to the Org entity.
func (uuo *UserUpdateOne) AddOrgs(o ...*Org) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOrgIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (uuo *UserUpdateOne) AddPermissionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddPermissionIDs(ids...)
	return uuo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (uuo *UserUpdateOne) AddPermissions(p ...*Permission) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPermissionIDs(ids...)
}

// AddOauthClientIDs adds the "oauth_clients" edge to the OauthClient entity by IDs.
func (uuo *UserUpdateOne) AddOauthClientIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOauthClientIDs(ids...)
	return uuo
}

// AddOauthClients adds the "oauth_clients" edges to the OauthClient entity.
func (uuo *UserUpdateOne) AddOauthClients(o ...*OauthClient) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOauthClientIDs(ids...)
}

// AddOrgUserIDs adds the "org_user" edge to the OrgUser entity by IDs.
func (uuo *UserUpdateOne) AddOrgUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOrgUserIDs(ids...)
	return uuo
}

// AddOrgUser adds the "org_user" edges to the OrgUser entity.
func (uuo *UserUpdateOne) AddOrgUser(o ...*OrgUser) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOrgUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearIdentities clears all "identities" edges to the UserIdentity entity.
func (uuo *UserUpdateOne) ClearIdentities() *UserUpdateOne {
	uuo.mutation.ClearIdentities()
	return uuo
}

// RemoveIdentityIDs removes the "identities" edge to UserIdentity entities by IDs.
func (uuo *UserUpdateOne) RemoveIdentityIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveIdentityIDs(ids...)
	return uuo
}

// RemoveIdentities removes "identities" edges to UserIdentity entities.
func (uuo *UserUpdateOne) RemoveIdentities(u ...*UserIdentity) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveIdentityIDs(ids...)
}

// ClearLoginProfile clears the "login_profile" edge to the UserLoginProfile entity.
func (uuo *UserUpdateOne) ClearLoginProfile() *UserUpdateOne {
	uuo.mutation.ClearLoginProfile()
	return uuo
}

// ClearPasswords clears all "passwords" edges to the UserPassword entity.
func (uuo *UserUpdateOne) ClearPasswords() *UserUpdateOne {
	uuo.mutation.ClearPasswords()
	return uuo
}

// RemovePasswordIDs removes the "passwords" edge to UserPassword entities by IDs.
func (uuo *UserUpdateOne) RemovePasswordIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemovePasswordIDs(ids...)
	return uuo
}

// RemovePasswords removes "passwords" edges to UserPassword entities.
func (uuo *UserUpdateOne) RemovePasswords(u ...*UserPassword) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemovePasswordIDs(ids...)
}

// ClearDevices clears all "devices" edges to the UserDevice entity.
func (uuo *UserUpdateOne) ClearDevices() *UserUpdateOne {
	uuo.mutation.ClearDevices()
	return uuo
}

// RemoveDeviceIDs removes the "devices" edge to UserDevice entities by IDs.
func (uuo *UserUpdateOne) RemoveDeviceIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveDeviceIDs(ids...)
	return uuo
}

// RemoveDevices removes "devices" edges to UserDevice entities.
func (uuo *UserUpdateOne) RemoveDevices(u ...*UserDevice) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveDeviceIDs(ids...)
}

// ClearOrgs clears all "orgs" edges to the Org entity.
func (uuo *UserUpdateOne) ClearOrgs() *UserUpdateOne {
	uuo.mutation.ClearOrgs()
	return uuo
}

// RemoveOrgIDs removes the "orgs" edge to Org entities by IDs.
func (uuo *UserUpdateOne) RemoveOrgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOrgIDs(ids...)
	return uuo
}

// RemoveOrgs removes "orgs" edges to Org entities.
func (uuo *UserUpdateOne) RemoveOrgs(o ...*Org) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOrgIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (uuo *UserUpdateOne) ClearPermissions() *UserUpdateOne {
	uuo.mutation.ClearPermissions()
	return uuo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (uuo *UserUpdateOne) RemovePermissionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemovePermissionIDs(ids...)
	return uuo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (uuo *UserUpdateOne) RemovePermissions(p ...*Permission) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePermissionIDs(ids...)
}

// ClearOauthClients clears all "oauth_clients" edges to the OauthClient entity.
func (uuo *UserUpdateOne) ClearOauthClients() *UserUpdateOne {
	uuo.mutation.ClearOauthClients()
	return uuo
}

// RemoveOauthClientIDs removes the "oauth_clients" edge to OauthClient entities by IDs.
func (uuo *UserUpdateOne) RemoveOauthClientIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOauthClientIDs(ids...)
	return uuo
}

// RemoveOauthClients removes "oauth_clients" edges to OauthClient entities.
func (uuo *UserUpdateOne) RemoveOauthClients(o ...*OauthClient) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOauthClientIDs(ids...)
}

// ClearOrgUser clears all "org_user" edges to the OrgUser entity.
func (uuo *UserUpdateOne) ClearOrgUser() *UserUpdateOne {
	uuo.mutation.ClearOrgUser()
	return uuo
}

// RemoveOrgUserIDs removes the "org_user" edge to OrgUser entities by IDs.
func (uuo *UserUpdateOne) RemoveOrgUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOrgUserIDs(ids...)
	return uuo
}

// RemoveOrgUser removes "org_user" edges to OrgUser entities.
func (uuo *UserUpdateOne) RemoveOrgUser(o ...*OrgUser) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOrgUserIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Mobile(); ok {
		if err := user.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "User.mobile": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.CreationType(); ok {
		if err := user.CreationTypeValidator(v); err != nil {
			return &ValidationError{Name: "creation_type", err: fmt.Errorf(`ent: validator failed for field "User.creation_type": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.RegisterIP(); ok {
		if err := user.RegisterIPValidator(v); err != nil {
			return &ValidationError{Name: "register_ip", err: fmt.Errorf(`ent: validator failed for field "User.register_ip": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(user.FieldUpdatedBy, field.TypeInt, value)
	}
	if uuo.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.PrincipalName(); ok {
		_spec.SetField(user.FieldPrincipalName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if uuo.mutation.MobileCleared() {
		_spec.ClearField(user.FieldMobile, field.TypeString)
	}
	if value, ok := uuo.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.CreationType(); ok {
		_spec.SetField(user.FieldCreationType, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.RegisterIP(); ok {
		_spec.SetField(user.FieldRegisterIP, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if uuo.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeEnum)
	}
	if value, ok := uuo.mutation.Comments(); ok {
		_spec.SetField(user.FieldComments, field.TypeString, value)
	}
	if uuo.mutation.CommentsCleared() {
		_spec.ClearField(user.FieldComments, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarFileID(); ok {
		_spec.SetField(user.FieldAvatarFileID, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedAvatarFileID(); ok {
		_spec.AddField(user.FieldAvatarFileID, field.TypeInt, value)
	}
	if uuo.mutation.AvatarFileIDCleared() {
		_spec.ClearField(user.FieldAvatarFileID, field.TypeInt)
	}
	if uuo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IdentitiesTable,
			Columns: []string{user.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedIdentitiesIDs(); len(nodes) > 0 && !uuo.mutation.IdentitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IdentitiesTable,
			Columns: []string{user.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IdentitiesTable,
			Columns: []string{user.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LoginProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LoginProfileTable,
			Columns: []string{user.LoginProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userloginprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LoginProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LoginProfileTable,
			Columns: []string{user.LoginProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userloginprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPasswordsIDs(); len(nodes) > 0 && !uuo.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDevicesIDs(); len(nodes) > 0 && !uuo.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrgsTable,
			Columns: user.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		createE := &OrgUserCreate{config: uuo.config, mutation: newOrgUserMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOrgsIDs(); len(nodes) > 0 && !uuo.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrgsTable,
			Columns: user.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: uuo.config, mutation: newOrgUserMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrgsTable,
			Columns: user.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: uuo.config, mutation: newOrgUserMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PermissionsTable,
			Columns: []string{user.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !uuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PermissionsTable,
			Columns: []string{user.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PermissionsTable,
			Columns: []string{user.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthClientsTable,
			Columns: []string{user.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOauthClientsIDs(); len(nodes) > 0 && !uuo.mutation.OauthClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthClientsTable,
			Columns: []string{user.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OauthClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OauthClientsTable,
			Columns: []string{user.OauthClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgUserTable,
			Columns: []string{user.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOrgUserIDs(); len(nodes) > 0 && !uuo.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgUserTable,
			Columns: []string{user.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrgUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgUserTable,
			Columns: []string{user.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
