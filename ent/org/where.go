// Code generated by ent, DO NOT EDIT.

package org

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldDeletedAt, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldOwnerID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldParentID, v))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldDomain, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldName, v))
}

// Profile applies equality check predicate on the "profile" field. It's identical to ProfileEQ.
func Profile(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldProfile, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldPath, v))
}

// DisplaySort applies equality check predicate on the "display_sort" field. It's identical to DisplaySortEQ.
func DisplaySort(v int32) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldDisplaySort, v))
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCountryCode, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldTimezone, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldDeletedAt))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldOwnerID))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v Kind) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v Kind) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...Kind) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...Kind) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldKind, vs...))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldParentID, vs...))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Org {
	return predicate.Org(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainIsNil applies the IsNil predicate on the "domain" field.
func DomainIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldDomain))
}

// DomainNotNil applies the NotNil predicate on the "domain" field.
func DomainNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldDomain))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Org {
	return predicate.Org(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Org {
	return predicate.Org(sql.FieldContainsFold(FieldDomain, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Org {
	return predicate.Org(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Org {
	return predicate.Org(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Org {
	return predicate.Org(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Org {
	return predicate.Org(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Org {
	return predicate.Org(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Org {
	return predicate.Org(sql.FieldContainsFold(FieldName, v))
}

// ProfileEQ applies the EQ predicate on the "profile" field.
func ProfileEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldProfile, v))
}

// ProfileNEQ applies the NEQ predicate on the "profile" field.
func ProfileNEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldProfile, v))
}

// ProfileIn applies the In predicate on the "profile" field.
func ProfileIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldProfile, vs...))
}

// ProfileNotIn applies the NotIn predicate on the "profile" field.
func ProfileNotIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldProfile, vs...))
}

// ProfileGT applies the GT predicate on the "profile" field.
func ProfileGT(v string) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldProfile, v))
}

// ProfileGTE applies the GTE predicate on the "profile" field.
func ProfileGTE(v string) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldProfile, v))
}

// ProfileLT applies the LT predicate on the "profile" field.
func ProfileLT(v string) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldProfile, v))
}

// ProfileLTE applies the LTE predicate on the "profile" field.
func ProfileLTE(v string) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldProfile, v))
}

// ProfileContains applies the Contains predicate on the "profile" field.
func ProfileContains(v string) predicate.Org {
	return predicate.Org(sql.FieldContains(FieldProfile, v))
}

// ProfileHasPrefix applies the HasPrefix predicate on the "profile" field.
func ProfileHasPrefix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasPrefix(FieldProfile, v))
}

// ProfileHasSuffix applies the HasSuffix predicate on the "profile" field.
func ProfileHasSuffix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasSuffix(FieldProfile, v))
}

// ProfileIsNil applies the IsNil predicate on the "profile" field.
func ProfileIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldProfile))
}

// ProfileNotNil applies the NotNil predicate on the "profile" field.
func ProfileNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldProfile))
}

// ProfileEqualFold applies the EqualFold predicate on the "profile" field.
func ProfileEqualFold(v string) predicate.Org {
	return predicate.Org(sql.FieldEqualFold(FieldProfile, v))
}

// ProfileContainsFold applies the ContainsFold predicate on the "profile" field.
func ProfileContainsFold(v string) predicate.Org {
	return predicate.Org(sql.FieldContainsFold(FieldProfile, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v typex.SimpleStatus) predicate.Org {
	vc := v
	return predicate.Org(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v typex.SimpleStatus) predicate.Org {
	vc := v
	return predicate.Org(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...typex.SimpleStatus) predicate.Org {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Org(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...typex.SimpleStatus) predicate.Org {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Org(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldStatus))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Org {
	return predicate.Org(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasSuffix(FieldPath, v))
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldPath))
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldPath))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Org {
	return predicate.Org(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Org {
	return predicate.Org(sql.FieldContainsFold(FieldPath, v))
}

// DisplaySortEQ applies the EQ predicate on the "display_sort" field.
func DisplaySortEQ(v int32) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldDisplaySort, v))
}

// DisplaySortNEQ applies the NEQ predicate on the "display_sort" field.
func DisplaySortNEQ(v int32) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldDisplaySort, v))
}

// DisplaySortIn applies the In predicate on the "display_sort" field.
func DisplaySortIn(vs ...int32) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldDisplaySort, vs...))
}

// DisplaySortNotIn applies the NotIn predicate on the "display_sort" field.
func DisplaySortNotIn(vs ...int32) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldDisplaySort, vs...))
}

// DisplaySortGT applies the GT predicate on the "display_sort" field.
func DisplaySortGT(v int32) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldDisplaySort, v))
}

// DisplaySortGTE applies the GTE predicate on the "display_sort" field.
func DisplaySortGTE(v int32) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldDisplaySort, v))
}

// DisplaySortLT applies the LT predicate on the "display_sort" field.
func DisplaySortLT(v int32) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldDisplaySort, v))
}

// DisplaySortLTE applies the LTE predicate on the "display_sort" field.
func DisplaySortLTE(v int32) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldDisplaySort, v))
}

// DisplaySortIsNil applies the IsNil predicate on the "display_sort" field.
func DisplaySortIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldDisplaySort))
}

// DisplaySortNotNil applies the NotNil predicate on the "display_sort" field.
func DisplaySortNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldDisplaySort))
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldCountryCode, v))
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldCountryCode, v))
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldCountryCode, vs...))
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldCountryCode, vs...))
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldCountryCode, v))
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldCountryCode, v))
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldCountryCode, v))
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldCountryCode, v))
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.Org {
	return predicate.Org(sql.FieldContains(FieldCountryCode, v))
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasPrefix(FieldCountryCode, v))
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasSuffix(FieldCountryCode, v))
}

// CountryCodeIsNil applies the IsNil predicate on the "country_code" field.
func CountryCodeIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldCountryCode))
}

// CountryCodeNotNil applies the NotNil predicate on the "country_code" field.
func CountryCodeNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldCountryCode))
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.Org {
	return predicate.Org(sql.FieldEqualFold(FieldCountryCode, v))
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.Org {
	return predicate.Org(sql.FieldContainsFold(FieldCountryCode, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.Org {
	return predicate.Org(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.Org {
	return predicate.Org(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.Org {
	return predicate.Org(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.Org {
	return predicate.Org(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.Org {
	return predicate.Org(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.Org {
	return predicate.Org(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.Org {
	return predicate.Org(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.Org {
	return predicate.Org(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneIsNil applies the IsNil predicate on the "timezone" field.
func TimezoneIsNil() predicate.Org {
	return predicate.Org(sql.FieldIsNull(FieldTimezone))
}

// TimezoneNotNil applies the NotNil predicate on the "timezone" field.
func TimezoneNotNil() predicate.Org {
	return predicate.Org(sql.FieldNotNull(FieldTimezone))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.Org {
	return predicate.Org(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.Org {
	return predicate.Org(sql.FieldContainsFold(FieldTimezone, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Org) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Org) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolesAndGroups applies the HasEdge predicate on the "roles_and_groups" edge.
func HasRolesAndGroups() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesAndGroupsTable, RolesAndGroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesAndGroupsWith applies the HasEdge predicate on the "roles_and_groups" edge with a given conditions (other predicates).
func HasRolesAndGroupsWith(preds ...predicate.OrgRole) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newRolesAndGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissions applies the HasEdge predicate on the "permissions" edge.
func HasPermissions() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PermissionsTable, PermissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionsWith applies the HasEdge predicate on the "permissions" edge with a given conditions (other predicates).
func HasPermissionsWith(preds ...predicate.Permission) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPolicies applies the HasEdge predicate on the "policies" edge.
func HasPolicies() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PoliciesTable, PoliciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPoliciesWith applies the HasEdge predicate on the "policies" edge with a given conditions (other predicates).
func HasPoliciesWith(preds ...predicate.OrgPolicy) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newPoliciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApps applies the HasEdge predicate on the "apps" edge.
func HasApps() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AppsTable, AppsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppsWith applies the HasEdge predicate on the "apps" edge with a given conditions (other predicates).
func HasAppsWith(preds ...predicate.App) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newAppsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgUser applies the HasEdge predicate on the "org_user" edge.
func HasOrgUser() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrgUserTable, OrgUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgUserWith applies the HasEdge predicate on the "org_user" edge with a given conditions (other predicates).
func HasOrgUserWith(preds ...predicate.OrgUser) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newOrgUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgApp applies the HasEdge predicate on the "org_app" edge.
func HasOrgApp() predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrgAppTable, OrgAppColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgAppWith applies the HasEdge predicate on the "org_app" edge with a given conditions (other predicates).
func HasOrgAppWith(preds ...predicate.OrgApp) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		step := newOrgAppStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Org) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Org) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Org) predicate.Org {
	return predicate.Org(func(s *sql.Selector) {
		p(s.Not())
	})
}
