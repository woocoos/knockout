// Code generated by ent, DO NOT EDIT.

package orgrole

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orgrole type in the database.
	Label = "org_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAppRoleID holds the string denoting the app_role_id field in the database.
	FieldAppRoleID = "app_role_id"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// EdgeOrg holds the string denoting the org edge name in mutations.
	EdgeOrg = "org"
	// EdgeOrgUsers holds the string denoting the org_users edge name in mutations.
	EdgeOrgUsers = "org_users"
	// EdgeOrgRoleUser holds the string denoting the org_role_user edge name in mutations.
	EdgeOrgRoleUser = "org_role_user"
	// Table holds the table name of the orgrole in the database.
	Table = "org_role"
	// OrgTable is the table that holds the org relation/edge.
	OrgTable = "org_role"
	// OrgInverseTable is the table name for the Org entity.
	// It exists in this package in order to avoid circular dependency with the "org" package.
	OrgInverseTable = "org"
	// OrgColumn is the table column denoting the org relation/edge.
	OrgColumn = "org_id"
	// OrgUsersTable is the table that holds the org_users relation/edge. The primary key declared below.
	OrgUsersTable = "org_role_user"
	// OrgUsersInverseTable is the table name for the OrgUser entity.
	// It exists in this package in order to avoid circular dependency with the "orguser" package.
	OrgUsersInverseTable = "org_user"
	// OrgRoleUserTable is the table that holds the org_role_user relation/edge.
	OrgRoleUserTable = "org_role_user"
	// OrgRoleUserInverseTable is the table name for the OrgRoleUser entity.
	// It exists in this package in order to avoid circular dependency with the "orgroleuser" package.
	OrgRoleUserInverseTable = "org_role_user"
	// OrgRoleUserColumn is the table column denoting the org_role_user relation/edge.
	OrgRoleUserColumn = "org_role_id"
)

// Columns holds all SQL columns for orgrole fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldOrgID,
	FieldKind,
	FieldName,
	FieldAppRoleID,
	FieldComments,
}

var (
	// OrgUsersPrimaryKey and OrgUsersColumn2 are the table columns denoting the
	// primary key for the org_users relation (M2M).
	OrgUsersPrimaryKey = []string{"org_role_id", "org_user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/knockout/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindGroup Kind = "group"
	KindRole  Kind = "role"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindGroup, KindRole:
		return nil
	default:
		return fmt.Errorf("orgrole: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the OrgRole queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAppRoleID orders the results by the app_role_id field.
func ByAppRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppRoleID, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByOrgField orders the results by org field.
func ByOrgField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrgUsersCount orders the results by org_users count.
func ByOrgUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgUsersStep(), opts...)
	}
}

// ByOrgUsers orders the results by org_users terms.
func ByOrgUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgRoleUserCount orders the results by org_role_user count.
func ByOrgRoleUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgRoleUserStep(), opts...)
	}
}

// ByOrgRoleUser orders the results by org_role_user terms.
func ByOrgRoleUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgRoleUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrgStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrgTable, OrgColumn),
	)
}
func newOrgUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OrgUsersTable, OrgUsersPrimaryKey...),
	)
}
func newOrgRoleUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgRoleUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrgRoleUserTable, OrgRoleUserColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Kind) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Kind) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Kind(str)
	if err := KindValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Kind", str)
	}
	return nil
}
