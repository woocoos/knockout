// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/app"
)

// App is the model entity for the App schema.
type App struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 用于标识应用资源的唯一代码,尽量简短
	Code string `json:"code,omitempty"`
	// 应用类型
	Kind app.Kind `json:"kind,omitempty"`
	// 回调地址
	RedirectURI string `json:"redirect_uri,omitempty"`
	// 应用ID
	AppKey string `json:"app_key,omitempty"`
	// 应用密钥
	AppSecret string `json:"app_secret,omitempty"`
	// 权限范围
	Scopes string `json:"scopes,omitempty"`
	// token有效期
	TokenValidity int32 `json:"token_validity,omitempty"`
	// refresh_token有效期
	RefreshTokenValidity int32 `json:"refresh_token_validity,omitempty"`
	// 应用图标地址
	Logo string `json:"logo,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// 状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// 私有App,表示由组织创建
	Private bool `json:"private,omitempty"`
	// 创建的根组织ID
	OwnerOrgID int `json:"owner_org_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppQuery when eager-loading is set.
	Edges        AppEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppEdges holds the relations/edges for other nodes in the graph.
type AppEdges struct {
	// 菜单
	Menus []*AppMenu `json:"menus,omitempty"`
	// 权限
	Actions []*AppAction `json:"actions,omitempty"`
	// 资源
	Resources []*AppRes `json:"resources,omitempty"`
	// 角色
	Roles []*AppRole `json:"roles,omitempty"`
	// 策略
	Policies []*AppPolicy `json:"policies,omitempty"`
	// 使用该应用的组织
	Orgs []*Org `json:"orgs,omitempty"`
	// 数据字典
	Dicts []*AppDict `json:"dicts,omitempty"`
	// OrgApp holds the value of the org_app edge.
	OrgApp []*OrgApp `json:"org_app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedMenus     map[string][]*AppMenu
	namedActions   map[string][]*AppAction
	namedResources map[string][]*AppRes
	namedRoles     map[string][]*AppRole
	namedPolicies  map[string][]*AppPolicy
	namedOrgs      map[string][]*Org
	namedDicts     map[string][]*AppDict
	namedOrgApp    map[string][]*OrgApp
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) MenusOrErr() ([]*AppMenu, error) {
	if e.loadedTypes[0] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// ActionsOrErr returns the Actions value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) ActionsOrErr() ([]*AppAction, error) {
	if e.loadedTypes[1] {
		return e.Actions, nil
	}
	return nil, &NotLoadedError{edge: "actions"}
}

// ResourcesOrErr returns the Resources value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) ResourcesOrErr() ([]*AppRes, error) {
	if e.loadedTypes[2] {
		return e.Resources, nil
	}
	return nil, &NotLoadedError{edge: "resources"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) RolesOrErr() ([]*AppRole, error) {
	if e.loadedTypes[3] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// PoliciesOrErr returns the Policies value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) PoliciesOrErr() ([]*AppPolicy, error) {
	if e.loadedTypes[4] {
		return e.Policies, nil
	}
	return nil, &NotLoadedError{edge: "policies"}
}

// OrgsOrErr returns the Orgs value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) OrgsOrErr() ([]*Org, error) {
	if e.loadedTypes[5] {
		return e.Orgs, nil
	}
	return nil, &NotLoadedError{edge: "orgs"}
}

// DictsOrErr returns the Dicts value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) DictsOrErr() ([]*AppDict, error) {
	if e.loadedTypes[6] {
		return e.Dicts, nil
	}
	return nil, &NotLoadedError{edge: "dicts"}
}

// OrgAppOrErr returns the OrgApp value or an error if the edge
// was not loaded in eager-loading.
func (e AppEdges) OrgAppOrErr() ([]*OrgApp, error) {
	if e.loadedTypes[7] {
		return e.OrgApp, nil
	}
	return nil, &NotLoadedError{edge: "org_app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*App) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case app.FieldPrivate:
			values[i] = new(sql.NullBool)
		case app.FieldID, app.FieldCreatedBy, app.FieldUpdatedBy, app.FieldTokenValidity, app.FieldRefreshTokenValidity, app.FieldOwnerOrgID:
			values[i] = new(sql.NullInt64)
		case app.FieldName, app.FieldCode, app.FieldKind, app.FieldRedirectURI, app.FieldAppKey, app.FieldAppSecret, app.FieldScopes, app.FieldLogo, app.FieldComments, app.FieldStatus:
			values[i] = new(sql.NullString)
		case app.FieldCreatedAt, app.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the App fields.
func (a *App) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case app.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case app.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				a.CreatedBy = int(value.Int64)
			}
		case app.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case app.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				a.UpdatedBy = int(value.Int64)
			}
		case app.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case app.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case app.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				a.Code = value.String
			}
		case app.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				a.Kind = app.Kind(value.String)
			}
		case app.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				a.RedirectURI = value.String
			}
		case app.FieldAppKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_key", values[i])
			} else if value.Valid {
				a.AppKey = value.String
			}
		case app.FieldAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_secret", values[i])
			} else if value.Valid {
				a.AppSecret = value.String
			}
		case app.FieldScopes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value.Valid {
				a.Scopes = value.String
			}
		case app.FieldTokenValidity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_validity", values[i])
			} else if value.Valid {
				a.TokenValidity = int32(value.Int64)
			}
		case app.FieldRefreshTokenValidity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token_validity", values[i])
			} else if value.Valid {
				a.RefreshTokenValidity = int32(value.Int64)
			}
		case app.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				a.Logo = value.String
			}
		case app.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				a.Comments = value.String
			}
		case app.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = typex.SimpleStatus(value.String)
			}
		case app.FieldPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field private", values[i])
			} else if value.Valid {
				a.Private = value.Bool
			}
		case app.FieldOwnerOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_org_id", values[i])
			} else if value.Valid {
				a.OwnerOrgID = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the App.
// This includes values selected through modifiers, order, etc.
func (a *App) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryMenus queries the "menus" edge of the App entity.
func (a *App) QueryMenus() *AppMenuQuery {
	return NewAppClient(a.config).QueryMenus(a)
}

// QueryActions queries the "actions" edge of the App entity.
func (a *App) QueryActions() *AppActionQuery {
	return NewAppClient(a.config).QueryActions(a)
}

// QueryResources queries the "resources" edge of the App entity.
func (a *App) QueryResources() *AppResQuery {
	return NewAppClient(a.config).QueryResources(a)
}

// QueryRoles queries the "roles" edge of the App entity.
func (a *App) QueryRoles() *AppRoleQuery {
	return NewAppClient(a.config).QueryRoles(a)
}

// QueryPolicies queries the "policies" edge of the App entity.
func (a *App) QueryPolicies() *AppPolicyQuery {
	return NewAppClient(a.config).QueryPolicies(a)
}

// QueryOrgs queries the "orgs" edge of the App entity.
func (a *App) QueryOrgs() *OrgQuery {
	return NewAppClient(a.config).QueryOrgs(a)
}

// QueryDicts queries the "dicts" edge of the App entity.
func (a *App) QueryDicts() *AppDictQuery {
	return NewAppClient(a.config).QueryDicts(a)
}

// QueryOrgApp queries the "org_app" edge of the App entity.
func (a *App) QueryOrgApp() *OrgAppQuery {
	return NewAppClient(a.config).QueryOrgApp(a)
}

// Update returns a builder for updating this App.
// Note that you need to call App.Unwrap() before calling this method if this App
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *App) Update() *AppUpdateOne {
	return NewAppClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the App entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *App) Unwrap() *App {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: App is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *App) String() string {
	var builder strings.Builder
	builder.WriteString("App(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(a.Code)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", a.Kind))
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(a.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("app_key=")
	builder.WriteString(a.AppKey)
	builder.WriteString(", ")
	builder.WriteString("app_secret=")
	builder.WriteString(a.AppSecret)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(a.Scopes)
	builder.WriteString(", ")
	builder.WriteString("token_validity=")
	builder.WriteString(fmt.Sprintf("%v", a.TokenValidity))
	builder.WriteString(", ")
	builder.WriteString("refresh_token_validity=")
	builder.WriteString(fmt.Sprintf("%v", a.RefreshTokenValidity))
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(a.Logo)
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(a.Comments)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("private=")
	builder.WriteString(fmt.Sprintf("%v", a.Private))
	builder.WriteString(", ")
	builder.WriteString("owner_org_id=")
	builder.WriteString(fmt.Sprintf("%v", a.OwnerOrgID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMenus returns the Menus named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedMenus(name string) ([]*AppMenu, error) {
	if a.Edges.namedMenus == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedMenus[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedMenus(name string, edges ...*AppMenu) {
	if a.Edges.namedMenus == nil {
		a.Edges.namedMenus = make(map[string][]*AppMenu)
	}
	if len(edges) == 0 {
		a.Edges.namedMenus[name] = []*AppMenu{}
	} else {
		a.Edges.namedMenus[name] = append(a.Edges.namedMenus[name], edges...)
	}
}

// NamedActions returns the Actions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedActions(name string) ([]*AppAction, error) {
	if a.Edges.namedActions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedActions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedActions(name string, edges ...*AppAction) {
	if a.Edges.namedActions == nil {
		a.Edges.namedActions = make(map[string][]*AppAction)
	}
	if len(edges) == 0 {
		a.Edges.namedActions[name] = []*AppAction{}
	} else {
		a.Edges.namedActions[name] = append(a.Edges.namedActions[name], edges...)
	}
}

// NamedResources returns the Resources named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedResources(name string) ([]*AppRes, error) {
	if a.Edges.namedResources == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedResources[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedResources(name string, edges ...*AppRes) {
	if a.Edges.namedResources == nil {
		a.Edges.namedResources = make(map[string][]*AppRes)
	}
	if len(edges) == 0 {
		a.Edges.namedResources[name] = []*AppRes{}
	} else {
		a.Edges.namedResources[name] = append(a.Edges.namedResources[name], edges...)
	}
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedRoles(name string) ([]*AppRole, error) {
	if a.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedRoles(name string, edges ...*AppRole) {
	if a.Edges.namedRoles == nil {
		a.Edges.namedRoles = make(map[string][]*AppRole)
	}
	if len(edges) == 0 {
		a.Edges.namedRoles[name] = []*AppRole{}
	} else {
		a.Edges.namedRoles[name] = append(a.Edges.namedRoles[name], edges...)
	}
}

// NamedPolicies returns the Policies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedPolicies(name string) ([]*AppPolicy, error) {
	if a.Edges.namedPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedPolicies(name string, edges ...*AppPolicy) {
	if a.Edges.namedPolicies == nil {
		a.Edges.namedPolicies = make(map[string][]*AppPolicy)
	}
	if len(edges) == 0 {
		a.Edges.namedPolicies[name] = []*AppPolicy{}
	} else {
		a.Edges.namedPolicies[name] = append(a.Edges.namedPolicies[name], edges...)
	}
}

// NamedOrgs returns the Orgs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedOrgs(name string) ([]*Org, error) {
	if a.Edges.namedOrgs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedOrgs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedOrgs(name string, edges ...*Org) {
	if a.Edges.namedOrgs == nil {
		a.Edges.namedOrgs = make(map[string][]*Org)
	}
	if len(edges) == 0 {
		a.Edges.namedOrgs[name] = []*Org{}
	} else {
		a.Edges.namedOrgs[name] = append(a.Edges.namedOrgs[name], edges...)
	}
}

// NamedDicts returns the Dicts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedDicts(name string) ([]*AppDict, error) {
	if a.Edges.namedDicts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedDicts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedDicts(name string, edges ...*AppDict) {
	if a.Edges.namedDicts == nil {
		a.Edges.namedDicts = make(map[string][]*AppDict)
	}
	if len(edges) == 0 {
		a.Edges.namedDicts[name] = []*AppDict{}
	} else {
		a.Edges.namedDicts[name] = append(a.Edges.namedDicts[name], edges...)
	}
}

// NamedOrgApp returns the OrgApp named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *App) NamedOrgApp(name string) ([]*OrgApp, error) {
	if a.Edges.namedOrgApp == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedOrgApp[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *App) appendNamedOrgApp(name string, edges ...*OrgApp) {
	if a.Edges.namedOrgApp == nil {
		a.Edges.namedOrgApp = make(map[string][]*OrgApp)
	}
	if len(edges) == 0 {
		a.Edges.namedOrgApp[name] = []*OrgApp{}
	} else {
		a.Edges.namedOrgApp[name] = append(a.Edges.namedOrgApp[name], edges...)
	}
}

// Apps is a parsable slice of App.
type Apps []*App
