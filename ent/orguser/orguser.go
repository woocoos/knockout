// Code generated by ent, DO NOT EDIT.

package orguser

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the orguser type in the database.
	Label = "org_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldJoinedAt holds the string denoting the joined_at field in the database.
	FieldJoinedAt = "joined_at"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// EdgeOrg holds the string denoting the org edge name in mutations.
	EdgeOrg = "org"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOrgRoles holds the string denoting the org_roles edge name in mutations.
	EdgeOrgRoles = "org_roles"
	// Table holds the table name of the orguser in the database.
	Table = "org_user"
	// OrgTable is the table that holds the org relation/edge.
	OrgTable = "org_user"
	// OrgInverseTable is the table name for the Org entity.
	// It exists in this package in order to avoid circular dependency with the "org" package.
	OrgInverseTable = "org"
	// OrgColumn is the table column denoting the org relation/edge.
	OrgColumn = "org_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "org_user"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "user"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// OrgRolesTable is the table that holds the org_roles relation/edge. The primary key declared below.
	OrgRolesTable = "org_role_user"
	// OrgRolesInverseTable is the table name for the OrgRole entity.
	// It exists in this package in order to avoid circular dependency with the "orgrole" package.
	OrgRolesInverseTable = "org_role"
)

// Columns holds all SQL columns for orguser fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldOrgID,
	FieldUserID,
	FieldJoinedAt,
	FieldDisplayName,
}

var (
	// OrgRolesPrimaryKey and OrgRolesColumn2 are the table columns denoting the
	// primary key for the org_roles relation (M2M).
	OrgRolesPrimaryKey = []string{"org_role_id", "org_user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/knockout/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultJoinedAt holds the default value on creation for the "joined_at" field.
	DefaultJoinedAt func() time.Time
)
