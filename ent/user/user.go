// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldPrincipalName holds the string denoting the principal_name field in the database.
	FieldPrincipalName = "principal_name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldCreationType holds the string denoting the creation_type field in the database.
	FieldCreationType = "creation_type"
	// FieldRegisterIP holds the string denoting the register_ip field in the database.
	FieldRegisterIP = "register_ip"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldComments holds the string denoting the comments field in the database.
	FieldComments = "comments"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldAvatarFileID holds the string denoting the avatar_file_id field in the database.
	FieldAvatarFileID = "avatar_file_id"
	// EdgeIdentities holds the string denoting the identities edge name in mutations.
	EdgeIdentities = "identities"
	// EdgeLoginProfile holds the string denoting the login_profile edge name in mutations.
	EdgeLoginProfile = "login_profile"
	// EdgePasswords holds the string denoting the passwords edge name in mutations.
	EdgePasswords = "passwords"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeOrgs holds the string denoting the orgs edge name in mutations.
	EdgeOrgs = "orgs"
	// EdgePermissions holds the string denoting the permissions edge name in mutations.
	EdgePermissions = "permissions"
	// EdgeOauthClients holds the string denoting the oauth_clients edge name in mutations.
	EdgeOauthClients = "oauth_clients"
	// EdgeOrgUser holds the string denoting the org_user edge name in mutations.
	EdgeOrgUser = "org_user"
	// Table holds the table name of the user in the database.
	Table = "user"
	// IdentitiesTable is the table that holds the identities relation/edge.
	IdentitiesTable = "user_identity"
	// IdentitiesInverseTable is the table name for the UserIdentity entity.
	// It exists in this package in order to avoid circular dependency with the "useridentity" package.
	IdentitiesInverseTable = "user_identity"
	// IdentitiesColumn is the table column denoting the identities relation/edge.
	IdentitiesColumn = "user_id"
	// LoginProfileTable is the table that holds the login_profile relation/edge.
	LoginProfileTable = "user_login_profile"
	// LoginProfileInverseTable is the table name for the UserLoginProfile entity.
	// It exists in this package in order to avoid circular dependency with the "userloginprofile" package.
	LoginProfileInverseTable = "user_login_profile"
	// LoginProfileColumn is the table column denoting the login_profile relation/edge.
	LoginProfileColumn = "user_id"
	// PasswordsTable is the table that holds the passwords relation/edge.
	PasswordsTable = "user_password"
	// PasswordsInverseTable is the table name for the UserPassword entity.
	// It exists in this package in order to avoid circular dependency with the "userpassword" package.
	PasswordsInverseTable = "user_password"
	// PasswordsColumn is the table column denoting the passwords relation/edge.
	PasswordsColumn = "user_id"
	// DevicesTable is the table that holds the devices relation/edge.
	DevicesTable = "user_device"
	// DevicesInverseTable is the table name for the UserDevice entity.
	// It exists in this package in order to avoid circular dependency with the "userdevice" package.
	DevicesInverseTable = "user_device"
	// DevicesColumn is the table column denoting the devices relation/edge.
	DevicesColumn = "user_id"
	// OrgsTable is the table that holds the orgs relation/edge. The primary key declared below.
	OrgsTable = "org_user"
	// OrgsInverseTable is the table name for the Org entity.
	// It exists in this package in order to avoid circular dependency with the "org" package.
	OrgsInverseTable = "org"
	// PermissionsTable is the table that holds the permissions relation/edge.
	PermissionsTable = "permission"
	// PermissionsInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionsInverseTable = "permission"
	// PermissionsColumn is the table column denoting the permissions relation/edge.
	PermissionsColumn = "user_id"
	// OauthClientsTable is the table that holds the oauth_clients relation/edge.
	OauthClientsTable = "oauth_client"
	// OauthClientsInverseTable is the table name for the OauthClient entity.
	// It exists in this package in order to avoid circular dependency with the "oauthclient" package.
	OauthClientsInverseTable = "oauth_client"
	// OauthClientsColumn is the table column denoting the oauth_clients relation/edge.
	OauthClientsColumn = "user_id"
	// OrgUserTable is the table that holds the org_user relation/edge.
	OrgUserTable = "org_user"
	// OrgUserInverseTable is the table name for the OrgUser entity.
	// It exists in this package in order to avoid circular dependency with the "orguser" package.
	OrgUserInverseTable = "org_user"
	// OrgUserColumn is the table column denoting the org_user relation/edge.
	OrgUserColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldPrincipalName,
	FieldDisplayName,
	FieldEmail,
	FieldMobile,
	FieldUserType,
	FieldCreationType,
	FieldRegisterIP,
	FieldStatus,
	FieldComments,
	FieldAvatar,
	FieldAvatarFileID,
}

var (
	// OrgsPrimaryKey and OrgsColumn2 are the table columns denoting the
	// primary key for the orgs relation (M2M).
	OrgsPrimaryKey = []string{"org_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/woocoos/knockout/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// MobileValidator is a validator for the "mobile" field. It is called by the builders before save.
	MobileValidator func(string) error
	// RegisterIPValidator is a validator for the "register_ip" field. It is called by the builders before save.
	RegisterIPValidator func(string) error
	// AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	AvatarValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int
)

// UserType defines the type for the "user_type" enum field.
type UserType string

// UserType values.
const (
	UserTypeAccount UserType = "account"
	UserTypeMember  UserType = "member"
)

func (ut UserType) String() string {
	return string(ut)
}

// UserTypeValidator is a validator for the "user_type" field enum values. It is called by the builders before save.
func UserTypeValidator(ut UserType) error {
	switch ut {
	case UserTypeAccount, UserTypeMember:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_type field: %q", ut)
	}
}

// CreationType defines the type for the "creation_type" enum field.
type CreationType string

// CreationType values.
const (
	CreationTypeInvitation CreationType = "invitation"
	CreationTypeRegister   CreationType = "register"
	CreationTypeManual     CreationType = "manual"
)

func (ct CreationType) String() string {
	return string(ct)
}

// CreationTypeValidator is a validator for the "creation_type" field enum values. It is called by the builders before save.
func CreationTypeValidator(ct CreationType) error {
	switch ct {
	case CreationTypeInvitation, CreationTypeRegister, CreationTypeManual:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for creation_type field: %q", ct)
	}
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s typex.SimpleStatus) error {
	switch s.String() {
	case "active", "inactive", "processing", "disabled":
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByPrincipalName orders the results by the principal_name field.
func ByPrincipalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrincipalName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByUserType orders the results by the user_type field.
func ByUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserType, opts...).ToFunc()
}

// ByCreationType orders the results by the creation_type field.
func ByCreationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationType, opts...).ToFunc()
}

// ByRegisterIP orders the results by the register_ip field.
func ByRegisterIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisterIP, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByComments orders the results by the comments field.
func ByComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComments, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByAvatarFileID orders the results by the avatar_file_id field.
func ByAvatarFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarFileID, opts...).ToFunc()
}

// ByIdentitiesCount orders the results by identities count.
func ByIdentitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIdentitiesStep(), opts...)
	}
}

// ByIdentities orders the results by identities terms.
func ByIdentities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdentitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLoginProfileField orders the results by login_profile field.
func ByLoginProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoginProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByPasswordsCount orders the results by passwords count.
func ByPasswordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPasswordsStep(), opts...)
	}
}

// ByPasswords orders the results by passwords terms.
func ByPasswords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPasswordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDevicesCount orders the results by devices count.
func ByDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDevicesStep(), opts...)
	}
}

// ByDevices orders the results by devices terms.
func ByDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgsCount orders the results by orgs count.
func ByOrgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgsStep(), opts...)
	}
}

// ByOrgs orders the results by orgs terms.
func ByOrgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPermissionsCount orders the results by permissions count.
func ByPermissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionsStep(), opts...)
	}
}

// ByPermissions orders the results by permissions terms.
func ByPermissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOauthClientsCount orders the results by oauth_clients count.
func ByOauthClientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOauthClientsStep(), opts...)
	}
}

// ByOauthClients orders the results by oauth_clients terms.
func ByOauthClients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthClientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgUserCount orders the results by org_user count.
func ByOrgUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgUserStep(), opts...)
	}
}

// ByOrgUser orders the results by org_user terms.
func ByOrgUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIdentitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdentitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IdentitiesTable, IdentitiesColumn),
	)
}
func newLoginProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoginProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, LoginProfileTable, LoginProfileColumn),
	)
}
func newPasswordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PasswordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PasswordsTable, PasswordsColumn),
	)
}
func newDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
	)
}
func newOrgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrgsTable, OrgsPrimaryKey...),
	)
}
func newPermissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PermissionsTable, PermissionsColumn),
	)
}
func newOauthClientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthClientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OauthClientsTable, OauthClientsColumn),
	)
}
func newOrgUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrgUserTable, OrgUserColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e UserType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *UserType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = UserType(str)
	if err := UserTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e CreationType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *CreationType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = CreationType(str)
	if err := CreationTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid CreationType", str)
	}
	return nil
}

var (
	// typex.SimpleStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*typex.SimpleStatus)(nil)
	// typex.SimpleStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*typex.SimpleStatus)(nil)
)
