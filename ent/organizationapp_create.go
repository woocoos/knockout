// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationapp"
)

// OrganizationAppCreate is the builder for creating a OrganizationApp entity.
type OrganizationAppCreate struct {
	config
	mutation *OrganizationAppMutation
	hooks    []Hook
}

// SetCreatedBy sets the "created_by" field.
func (oac *OrganizationAppCreate) SetCreatedBy(i int) *OrganizationAppCreate {
	oac.mutation.SetCreatedBy(i)
	return oac
}

// SetCreatedAt sets the "created_at" field.
func (oac *OrganizationAppCreate) SetCreatedAt(t time.Time) *OrganizationAppCreate {
	oac.mutation.SetCreatedAt(t)
	return oac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oac *OrganizationAppCreate) SetNillableCreatedAt(t *time.Time) *OrganizationAppCreate {
	if t != nil {
		oac.SetCreatedAt(*t)
	}
	return oac
}

// SetUpdatedBy sets the "updated_by" field.
func (oac *OrganizationAppCreate) SetUpdatedBy(i int) *OrganizationAppCreate {
	oac.mutation.SetUpdatedBy(i)
	return oac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oac *OrganizationAppCreate) SetNillableUpdatedBy(i *int) *OrganizationAppCreate {
	if i != nil {
		oac.SetUpdatedBy(*i)
	}
	return oac
}

// SetUpdatedAt sets the "updated_at" field.
func (oac *OrganizationAppCreate) SetUpdatedAt(t time.Time) *OrganizationAppCreate {
	oac.mutation.SetUpdatedAt(t)
	return oac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oac *OrganizationAppCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationAppCreate {
	if t != nil {
		oac.SetUpdatedAt(*t)
	}
	return oac
}

// SetOrgID sets the "org_id" field.
func (oac *OrganizationAppCreate) SetOrgID(i int) *OrganizationAppCreate {
	oac.mutation.SetOrgID(i)
	return oac
}

// SetAppID sets the "app_id" field.
func (oac *OrganizationAppCreate) SetAppID(i int) *OrganizationAppCreate {
	oac.mutation.SetAppID(i)
	return oac
}

// SetApp sets the "app" edge to the App entity.
func (oac *OrganizationAppCreate) SetApp(a *App) *OrganizationAppCreate {
	return oac.SetAppID(a.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oac *OrganizationAppCreate) SetOrganizationID(id int) *OrganizationAppCreate {
	oac.mutation.SetOrganizationID(id)
	return oac
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oac *OrganizationAppCreate) SetOrganization(o *Organization) *OrganizationAppCreate {
	return oac.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationAppMutation object of the builder.
func (oac *OrganizationAppCreate) Mutation() *OrganizationAppMutation {
	return oac.mutation
}

// Save creates the OrganizationApp in the database.
func (oac *OrganizationAppCreate) Save(ctx context.Context) (*OrganizationApp, error) {
	if err := oac.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*OrganizationApp, OrganizationAppMutation](ctx, oac.sqlSave, oac.mutation, oac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OrganizationAppCreate) SaveX(ctx context.Context) *OrganizationApp {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OrganizationAppCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OrganizationAppCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OrganizationAppCreate) defaults() error {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		if organizationapp.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized organizationapp.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := organizationapp.DefaultCreatedAt()
		oac.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oac *OrganizationAppCreate) check() error {
	if _, ok := oac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "OrganizationApp.created_by"`)}
	}
	if _, ok := oac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrganizationApp.created_at"`)}
	}
	if _, ok := oac.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "OrganizationApp.org_id"`)}
	}
	if _, ok := oac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "OrganizationApp.app_id"`)}
	}
	if _, ok := oac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "OrganizationApp.app"`)}
	}
	if _, ok := oac.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OrganizationApp.organization"`)}
	}
	return nil
}

func (oac *OrganizationAppCreate) sqlSave(ctx context.Context) (*OrganizationApp, error) {
	if err := oac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (oac *OrganizationAppCreate) createSpec() (*OrganizationApp, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationApp{config: oac.config}
		_spec = sqlgraph.NewCreateSpec(organizationapp.Table, nil)
	)
	if value, ok := oac.mutation.CreatedBy(); ok {
		_spec.SetField(organizationapp.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := oac.mutation.CreatedAt(); ok {
		_spec.SetField(organizationapp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oac.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationapp.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := oac.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationapp.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := oac.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.AppTable,
			Columns: []string{organizationapp.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationapp.OrganizationTable,
			Columns: []string{organizationapp.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationAppCreateBulk is the builder for creating many OrganizationApp entities in bulk.
type OrganizationAppCreateBulk struct {
	config
	builders []*OrganizationAppCreate
}

// Save creates the OrganizationApp entities in the database.
func (oacb *OrganizationAppCreateBulk) Save(ctx context.Context) ([]*OrganizationApp, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OrganizationApp, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationAppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OrganizationAppCreateBulk) SaveX(ctx context.Context) []*OrganizationApp {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OrganizationAppCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OrganizationAppCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}
