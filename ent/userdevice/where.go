// Code generated by ent, DO NOT EDIT.

package userdevice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUserID, v))
}

// DeviceUID applies equality check predicate on the "device_uid" field. It's identical to DeviceUIDEQ.
func DeviceUID(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldDeviceUID, v))
}

// DeviceName applies equality check predicate on the "device_name" field. It's identical to DeviceNameEQ.
func DeviceName(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldDeviceName, v))
}

// SystemName applies equality check predicate on the "system_name" field. It's identical to SystemNameEQ.
func SystemName(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldSystemName, v))
}

// SystemVersion applies equality check predicate on the "system_version" field. It's identical to SystemVersionEQ.
func SystemVersion(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldSystemVersion, v))
}

// AppVersion applies equality check predicate on the "app_version" field. It's identical to AppVersionEQ.
func AppVersion(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldAppVersion, v))
}

// DeviceModel applies equality check predicate on the "device_model" field. It's identical to DeviceModelEQ.
func DeviceModel(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldDeviceModel, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldComments, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldUpdatedAt))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldUserID))
}

// DeviceUIDEQ applies the EQ predicate on the "device_uid" field.
func DeviceUIDEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldDeviceUID, v))
}

// DeviceUIDNEQ applies the NEQ predicate on the "device_uid" field.
func DeviceUIDNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldDeviceUID, v))
}

// DeviceUIDIn applies the In predicate on the "device_uid" field.
func DeviceUIDIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldDeviceUID, vs...))
}

// DeviceUIDNotIn applies the NotIn predicate on the "device_uid" field.
func DeviceUIDNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldDeviceUID, vs...))
}

// DeviceUIDGT applies the GT predicate on the "device_uid" field.
func DeviceUIDGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldDeviceUID, v))
}

// DeviceUIDGTE applies the GTE predicate on the "device_uid" field.
func DeviceUIDGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldDeviceUID, v))
}

// DeviceUIDLT applies the LT predicate on the "device_uid" field.
func DeviceUIDLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldDeviceUID, v))
}

// DeviceUIDLTE applies the LTE predicate on the "device_uid" field.
func DeviceUIDLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldDeviceUID, v))
}

// DeviceUIDContains applies the Contains predicate on the "device_uid" field.
func DeviceUIDContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldDeviceUID, v))
}

// DeviceUIDHasPrefix applies the HasPrefix predicate on the "device_uid" field.
func DeviceUIDHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldDeviceUID, v))
}

// DeviceUIDHasSuffix applies the HasSuffix predicate on the "device_uid" field.
func DeviceUIDHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldDeviceUID, v))
}

// DeviceUIDEqualFold applies the EqualFold predicate on the "device_uid" field.
func DeviceUIDEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldDeviceUID, v))
}

// DeviceUIDContainsFold applies the ContainsFold predicate on the "device_uid" field.
func DeviceUIDContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldDeviceUID, v))
}

// DeviceNameEQ applies the EQ predicate on the "device_name" field.
func DeviceNameEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldDeviceName, v))
}

// DeviceNameNEQ applies the NEQ predicate on the "device_name" field.
func DeviceNameNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldDeviceName, v))
}

// DeviceNameIn applies the In predicate on the "device_name" field.
func DeviceNameIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldDeviceName, vs...))
}

// DeviceNameNotIn applies the NotIn predicate on the "device_name" field.
func DeviceNameNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldDeviceName, vs...))
}

// DeviceNameGT applies the GT predicate on the "device_name" field.
func DeviceNameGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldDeviceName, v))
}

// DeviceNameGTE applies the GTE predicate on the "device_name" field.
func DeviceNameGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldDeviceName, v))
}

// DeviceNameLT applies the LT predicate on the "device_name" field.
func DeviceNameLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldDeviceName, v))
}

// DeviceNameLTE applies the LTE predicate on the "device_name" field.
func DeviceNameLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldDeviceName, v))
}

// DeviceNameContains applies the Contains predicate on the "device_name" field.
func DeviceNameContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldDeviceName, v))
}

// DeviceNameHasPrefix applies the HasPrefix predicate on the "device_name" field.
func DeviceNameHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldDeviceName, v))
}

// DeviceNameHasSuffix applies the HasSuffix predicate on the "device_name" field.
func DeviceNameHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldDeviceName, v))
}

// DeviceNameIsNil applies the IsNil predicate on the "device_name" field.
func DeviceNameIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldDeviceName))
}

// DeviceNameNotNil applies the NotNil predicate on the "device_name" field.
func DeviceNameNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldDeviceName))
}

// DeviceNameEqualFold applies the EqualFold predicate on the "device_name" field.
func DeviceNameEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldDeviceName, v))
}

// DeviceNameContainsFold applies the ContainsFold predicate on the "device_name" field.
func DeviceNameContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldDeviceName, v))
}

// SystemNameEQ applies the EQ predicate on the "system_name" field.
func SystemNameEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldSystemName, v))
}

// SystemNameNEQ applies the NEQ predicate on the "system_name" field.
func SystemNameNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldSystemName, v))
}

// SystemNameIn applies the In predicate on the "system_name" field.
func SystemNameIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldSystemName, vs...))
}

// SystemNameNotIn applies the NotIn predicate on the "system_name" field.
func SystemNameNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldSystemName, vs...))
}

// SystemNameGT applies the GT predicate on the "system_name" field.
func SystemNameGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldSystemName, v))
}

// SystemNameGTE applies the GTE predicate on the "system_name" field.
func SystemNameGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldSystemName, v))
}

// SystemNameLT applies the LT predicate on the "system_name" field.
func SystemNameLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldSystemName, v))
}

// SystemNameLTE applies the LTE predicate on the "system_name" field.
func SystemNameLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldSystemName, v))
}

// SystemNameContains applies the Contains predicate on the "system_name" field.
func SystemNameContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldSystemName, v))
}

// SystemNameHasPrefix applies the HasPrefix predicate on the "system_name" field.
func SystemNameHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldSystemName, v))
}

// SystemNameHasSuffix applies the HasSuffix predicate on the "system_name" field.
func SystemNameHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldSystemName, v))
}

// SystemNameIsNil applies the IsNil predicate on the "system_name" field.
func SystemNameIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldSystemName))
}

// SystemNameNotNil applies the NotNil predicate on the "system_name" field.
func SystemNameNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldSystemName))
}

// SystemNameEqualFold applies the EqualFold predicate on the "system_name" field.
func SystemNameEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldSystemName, v))
}

// SystemNameContainsFold applies the ContainsFold predicate on the "system_name" field.
func SystemNameContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldSystemName, v))
}

// SystemVersionEQ applies the EQ predicate on the "system_version" field.
func SystemVersionEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldSystemVersion, v))
}

// SystemVersionNEQ applies the NEQ predicate on the "system_version" field.
func SystemVersionNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldSystemVersion, v))
}

// SystemVersionIn applies the In predicate on the "system_version" field.
func SystemVersionIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldSystemVersion, vs...))
}

// SystemVersionNotIn applies the NotIn predicate on the "system_version" field.
func SystemVersionNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldSystemVersion, vs...))
}

// SystemVersionGT applies the GT predicate on the "system_version" field.
func SystemVersionGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldSystemVersion, v))
}

// SystemVersionGTE applies the GTE predicate on the "system_version" field.
func SystemVersionGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldSystemVersion, v))
}

// SystemVersionLT applies the LT predicate on the "system_version" field.
func SystemVersionLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldSystemVersion, v))
}

// SystemVersionLTE applies the LTE predicate on the "system_version" field.
func SystemVersionLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldSystemVersion, v))
}

// SystemVersionContains applies the Contains predicate on the "system_version" field.
func SystemVersionContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldSystemVersion, v))
}

// SystemVersionHasPrefix applies the HasPrefix predicate on the "system_version" field.
func SystemVersionHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldSystemVersion, v))
}

// SystemVersionHasSuffix applies the HasSuffix predicate on the "system_version" field.
func SystemVersionHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldSystemVersion, v))
}

// SystemVersionIsNil applies the IsNil predicate on the "system_version" field.
func SystemVersionIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldSystemVersion))
}

// SystemVersionNotNil applies the NotNil predicate on the "system_version" field.
func SystemVersionNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldSystemVersion))
}

// SystemVersionEqualFold applies the EqualFold predicate on the "system_version" field.
func SystemVersionEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldSystemVersion, v))
}

// SystemVersionContainsFold applies the ContainsFold predicate on the "system_version" field.
func SystemVersionContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldSystemVersion, v))
}

// AppVersionEQ applies the EQ predicate on the "app_version" field.
func AppVersionEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldAppVersion, v))
}

// AppVersionNEQ applies the NEQ predicate on the "app_version" field.
func AppVersionNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldAppVersion, v))
}

// AppVersionIn applies the In predicate on the "app_version" field.
func AppVersionIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldAppVersion, vs...))
}

// AppVersionNotIn applies the NotIn predicate on the "app_version" field.
func AppVersionNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldAppVersion, vs...))
}

// AppVersionGT applies the GT predicate on the "app_version" field.
func AppVersionGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldAppVersion, v))
}

// AppVersionGTE applies the GTE predicate on the "app_version" field.
func AppVersionGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldAppVersion, v))
}

// AppVersionLT applies the LT predicate on the "app_version" field.
func AppVersionLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldAppVersion, v))
}

// AppVersionLTE applies the LTE predicate on the "app_version" field.
func AppVersionLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldAppVersion, v))
}

// AppVersionContains applies the Contains predicate on the "app_version" field.
func AppVersionContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldAppVersion, v))
}

// AppVersionHasPrefix applies the HasPrefix predicate on the "app_version" field.
func AppVersionHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldAppVersion, v))
}

// AppVersionHasSuffix applies the HasSuffix predicate on the "app_version" field.
func AppVersionHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldAppVersion, v))
}

// AppVersionIsNil applies the IsNil predicate on the "app_version" field.
func AppVersionIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldAppVersion))
}

// AppVersionNotNil applies the NotNil predicate on the "app_version" field.
func AppVersionNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldAppVersion))
}

// AppVersionEqualFold applies the EqualFold predicate on the "app_version" field.
func AppVersionEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldAppVersion, v))
}

// AppVersionContainsFold applies the ContainsFold predicate on the "app_version" field.
func AppVersionContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldAppVersion, v))
}

// DeviceModelEQ applies the EQ predicate on the "device_model" field.
func DeviceModelEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldDeviceModel, v))
}

// DeviceModelNEQ applies the NEQ predicate on the "device_model" field.
func DeviceModelNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldDeviceModel, v))
}

// DeviceModelIn applies the In predicate on the "device_model" field.
func DeviceModelIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldDeviceModel, vs...))
}

// DeviceModelNotIn applies the NotIn predicate on the "device_model" field.
func DeviceModelNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldDeviceModel, vs...))
}

// DeviceModelGT applies the GT predicate on the "device_model" field.
func DeviceModelGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldDeviceModel, v))
}

// DeviceModelGTE applies the GTE predicate on the "device_model" field.
func DeviceModelGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldDeviceModel, v))
}

// DeviceModelLT applies the LT predicate on the "device_model" field.
func DeviceModelLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldDeviceModel, v))
}

// DeviceModelLTE applies the LTE predicate on the "device_model" field.
func DeviceModelLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldDeviceModel, v))
}

// DeviceModelContains applies the Contains predicate on the "device_model" field.
func DeviceModelContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldDeviceModel, v))
}

// DeviceModelHasPrefix applies the HasPrefix predicate on the "device_model" field.
func DeviceModelHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldDeviceModel, v))
}

// DeviceModelHasSuffix applies the HasSuffix predicate on the "device_model" field.
func DeviceModelHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldDeviceModel, v))
}

// DeviceModelIsNil applies the IsNil predicate on the "device_model" field.
func DeviceModelIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldDeviceModel))
}

// DeviceModelNotNil applies the NotNil predicate on the "device_model" field.
func DeviceModelNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldDeviceModel))
}

// DeviceModelEqualFold applies the EqualFold predicate on the "device_model" field.
func DeviceModelEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldDeviceModel, v))
}

// DeviceModelContainsFold applies the ContainsFold predicate on the "device_model" field.
func DeviceModelContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldDeviceModel, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v typex.SimpleStatus) predicate.UserDevice {
	vc := v
	return predicate.UserDevice(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v typex.SimpleStatus) predicate.UserDevice {
	vc := v
	return predicate.UserDevice(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...typex.SimpleStatus) predicate.UserDevice {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserDevice(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...typex.SimpleStatus) predicate.UserDevice {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserDevice(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldStatus))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.UserDevice {
	return predicate.UserDevice(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.UserDevice {
	return predicate.UserDevice(sql.FieldContainsFold(FieldComments, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserDevice) predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserDevice) predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserDevice) predicate.UserDevice {
	return predicate.UserDevice(func(s *sql.Selector) {
		p(s.Not())
	})
}
