// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/fileidentity"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgapp"
	"github.com/woocoos/knockout/ent/orgpolicy"
	"github.com/woocoos/knockout/ent/orgrole"
	"github.com/woocoos/knockout/ent/orguser"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/user"
)

// OrgQuery is the builder for querying Org entities.
type OrgQuery struct {
	config
	ctx                     *QueryContext
	order                   []org.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Org
	withParent              *OrgQuery
	withChildren            *OrgQuery
	withOwner               *UserQuery
	withUsers               *UserQuery
	withRolesAndGroups      *OrgRoleQuery
	withPermissions         *PermissionQuery
	withPolicies            *OrgPolicyQuery
	withApps                *AppQuery
	withFileIdentities      *FileIdentityQuery
	withOrgUser             *OrgUserQuery
	withOrgApp              *OrgAppQuery
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*Org) error
	withNamedChildren       map[string]*OrgQuery
	withNamedUsers          map[string]*UserQuery
	withNamedRolesAndGroups map[string]*OrgRoleQuery
	withNamedPermissions    map[string]*PermissionQuery
	withNamedPolicies       map[string]*OrgPolicyQuery
	withNamedApps           map[string]*AppQuery
	withNamedFileIdentities map[string]*FileIdentityQuery
	withNamedOrgUser        map[string]*OrgUserQuery
	withNamedOrgApp         map[string]*OrgAppQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrgQuery builder.
func (oq *OrgQuery) Where(ps ...predicate.Org) *OrgQuery {
	oq.predicates = append(oq.predicates, ps...)
	return oq
}

// Limit the number of records to be returned by this query.
func (oq *OrgQuery) Limit(limit int) *OrgQuery {
	oq.ctx.Limit = &limit
	return oq
}

// Offset to start from.
func (oq *OrgQuery) Offset(offset int) *OrgQuery {
	oq.ctx.Offset = &offset
	return oq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oq *OrgQuery) Unique(unique bool) *OrgQuery {
	oq.ctx.Unique = &unique
	return oq
}

// Order specifies how the records should be ordered.
func (oq *OrgQuery) Order(o ...org.OrderOption) *OrgQuery {
	oq.order = append(oq.order, o...)
	return oq
}

// QueryParent chains the current query on the "parent" edge.
func (oq *OrgQuery) QueryParent() *OrgQuery {
	query := (&OrgClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(org.Table, org.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, org.ParentTable, org.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (oq *OrgQuery) QueryChildren() *OrgQuery {
	query := (&OrgClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(org.Table, org.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, org.ChildrenTable, org.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwner chains the current query on the "owner" edge.
func (oq *OrgQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, org.OwnerTable, org.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (oq *OrgQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, org.UsersTable, org.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolesAndGroups chains the current query on the "roles_and_groups" edge.
func (oq *OrgQuery) QueryRolesAndGroups() *OrgRoleQuery {
	query := (&OrgRoleClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(orgrole.Table, orgrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, org.RolesAndGroupsTable, org.RolesAndGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPermissions chains the current query on the "permissions" edge.
func (oq *OrgQuery) QueryPermissions() *PermissionQuery {
	query := (&PermissionClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, org.PermissionsTable, org.PermissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPolicies chains the current query on the "policies" edge.
func (oq *OrgQuery) QueryPolicies() *OrgPolicyQuery {
	query := (&OrgPolicyClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(orgpolicy.Table, orgpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, org.PoliciesTable, org.PoliciesColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApps chains the current query on the "apps" edge.
func (oq *OrgQuery) QueryApps() *AppQuery {
	query := (&AppClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, org.AppsTable, org.AppsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFileIdentities chains the current query on the "file_identities" edge.
func (oq *OrgQuery) QueryFileIdentities() *FileIdentityQuery {
	query := (&FileIdentityClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(fileidentity.Table, fileidentity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, org.FileIdentitiesTable, org.FileIdentitiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgUser chains the current query on the "org_user" edge.
func (oq *OrgQuery) QueryOrgUser() *OrgUserQuery {
	query := (&OrgUserClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(orguser.Table, orguser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, org.OrgUserTable, org.OrgUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgApp chains the current query on the "org_app" edge.
func (oq *OrgQuery) QueryOrgApp() *OrgAppQuery {
	query := (&OrgAppClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(org.Table, org.FieldID, selector),
			sqlgraph.To(orgapp.Table, orgapp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, org.OrgAppTable, org.OrgAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Org entity from the query.
// Returns a *NotFoundError when no Org was found.
func (oq *OrgQuery) First(ctx context.Context) (*Org, error) {
	nodes, err := oq.Limit(1).All(setContextOp(ctx, oq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{org.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oq *OrgQuery) FirstX(ctx context.Context) *Org {
	node, err := oq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Org ID from the query.
// Returns a *NotFoundError when no Org ID was found.
func (oq *OrgQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oq.Limit(1).IDs(setContextOp(ctx, oq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{org.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oq *OrgQuery) FirstIDX(ctx context.Context) int {
	id, err := oq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Org entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Org entity is found.
// Returns a *NotFoundError when no Org entities are found.
func (oq *OrgQuery) Only(ctx context.Context) (*Org, error) {
	nodes, err := oq.Limit(2).All(setContextOp(ctx, oq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{org.Label}
	default:
		return nil, &NotSingularError{org.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oq *OrgQuery) OnlyX(ctx context.Context) *Org {
	node, err := oq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Org ID in the query.
// Returns a *NotSingularError when more than one Org ID is found.
// Returns a *NotFoundError when no entities are found.
func (oq *OrgQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oq.Limit(2).IDs(setContextOp(ctx, oq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{org.Label}
	default:
		err = &NotSingularError{org.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oq *OrgQuery) OnlyIDX(ctx context.Context) int {
	id, err := oq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Orgs.
func (oq *OrgQuery) All(ctx context.Context) ([]*Org, error) {
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryAll)
	if err := oq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Org, *OrgQuery]()
	return withInterceptors[[]*Org](ctx, oq, qr, oq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oq *OrgQuery) AllX(ctx context.Context) []*Org {
	nodes, err := oq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Org IDs.
func (oq *OrgQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oq.ctx.Unique == nil && oq.path != nil {
		oq.Unique(true)
	}
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryIDs)
	if err = oq.Select(org.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oq *OrgQuery) IDsX(ctx context.Context) []int {
	ids, err := oq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oq *OrgQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryCount)
	if err := oq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oq, querierCount[*OrgQuery](), oq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oq *OrgQuery) CountX(ctx context.Context) int {
	count, err := oq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oq *OrgQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oq.ctx, ent.OpQueryExist)
	switch _, err := oq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oq *OrgQuery) ExistX(ctx context.Context) bool {
	exist, err := oq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrgQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oq *OrgQuery) Clone() *OrgQuery {
	if oq == nil {
		return nil
	}
	return &OrgQuery{
		config:             oq.config,
		ctx:                oq.ctx.Clone(),
		order:              append([]org.OrderOption{}, oq.order...),
		inters:             append([]Interceptor{}, oq.inters...),
		predicates:         append([]predicate.Org{}, oq.predicates...),
		withParent:         oq.withParent.Clone(),
		withChildren:       oq.withChildren.Clone(),
		withOwner:          oq.withOwner.Clone(),
		withUsers:          oq.withUsers.Clone(),
		withRolesAndGroups: oq.withRolesAndGroups.Clone(),
		withPermissions:    oq.withPermissions.Clone(),
		withPolicies:       oq.withPolicies.Clone(),
		withApps:           oq.withApps.Clone(),
		withFileIdentities: oq.withFileIdentities.Clone(),
		withOrgUser:        oq.withOrgUser.Clone(),
		withOrgApp:         oq.withOrgApp.Clone(),
		// clone intermediate query.
		sql:  oq.sql.Clone(),
		path: oq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithParent(opts ...func(*OrgQuery)) *OrgQuery {
	query := (&OrgClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withParent = query
	return oq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithChildren(opts ...func(*OrgQuery)) *OrgQuery {
	query := (&OrgClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withChildren = query
	return oq
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithOwner(opts ...func(*UserQuery)) *OrgQuery {
	query := (&UserClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withOwner = query
	return oq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithUsers(opts ...func(*UserQuery)) *OrgQuery {
	query := (&UserClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withUsers = query
	return oq
}

// WithRolesAndGroups tells the query-builder to eager-load the nodes that are connected to
// the "roles_and_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithRolesAndGroups(opts ...func(*OrgRoleQuery)) *OrgQuery {
	query := (&OrgRoleClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withRolesAndGroups = query
	return oq
}

// WithPermissions tells the query-builder to eager-load the nodes that are connected to
// the "permissions" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithPermissions(opts ...func(*PermissionQuery)) *OrgQuery {
	query := (&PermissionClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withPermissions = query
	return oq
}

// WithPolicies tells the query-builder to eager-load the nodes that are connected to
// the "policies" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithPolicies(opts ...func(*OrgPolicyQuery)) *OrgQuery {
	query := (&OrgPolicyClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withPolicies = query
	return oq
}

// WithApps tells the query-builder to eager-load the nodes that are connected to
// the "apps" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithApps(opts ...func(*AppQuery)) *OrgQuery {
	query := (&AppClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withApps = query
	return oq
}

// WithFileIdentities tells the query-builder to eager-load the nodes that are connected to
// the "file_identities" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithFileIdentities(opts ...func(*FileIdentityQuery)) *OrgQuery {
	query := (&FileIdentityClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withFileIdentities = query
	return oq
}

// WithOrgUser tells the query-builder to eager-load the nodes that are connected to
// the "org_user" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithOrgUser(opts ...func(*OrgUserQuery)) *OrgQuery {
	query := (&OrgUserClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withOrgUser = query
	return oq
}

// WithOrgApp tells the query-builder to eager-load the nodes that are connected to
// the "org_app" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithOrgApp(opts ...func(*OrgAppQuery)) *OrgQuery {
	query := (&OrgAppClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withOrgApp = query
	return oq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Org.Query().
//		GroupBy(org.FieldCreatedBy).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oq *OrgQuery) GroupBy(field string, fields ...string) *OrgGroupBy {
	oq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrgGroupBy{build: oq}
	grbuild.flds = &oq.ctx.Fields
	grbuild.label = org.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//	}
//
//	client.Org.Query().
//		Select(org.FieldCreatedBy).
//		Scan(ctx, &v)
func (oq *OrgQuery) Select(fields ...string) *OrgSelect {
	oq.ctx.Fields = append(oq.ctx.Fields, fields...)
	sbuild := &OrgSelect{OrgQuery: oq}
	sbuild.label = org.Label
	sbuild.flds, sbuild.scan = &oq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrgSelect configured with the given aggregations.
func (oq *OrgQuery) Aggregate(fns ...AggregateFunc) *OrgSelect {
	return oq.Select().Aggregate(fns...)
}

func (oq *OrgQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oq); err != nil {
				return err
			}
		}
	}
	for _, f := range oq.ctx.Fields {
		if !org.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oq.path != nil {
		prev, err := oq.path(ctx)
		if err != nil {
			return err
		}
		oq.sql = prev
	}
	return nil
}

func (oq *OrgQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Org, error) {
	var (
		nodes       = []*Org{}
		_spec       = oq.querySpec()
		loadedTypes = [11]bool{
			oq.withParent != nil,
			oq.withChildren != nil,
			oq.withOwner != nil,
			oq.withUsers != nil,
			oq.withRolesAndGroups != nil,
			oq.withPermissions != nil,
			oq.withPolicies != nil,
			oq.withApps != nil,
			oq.withFileIdentities != nil,
			oq.withOrgUser != nil,
			oq.withOrgApp != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Org).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Org{config: oq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oq.withParent; query != nil {
		if err := oq.loadParent(ctx, query, nodes, nil,
			func(n *Org, e *Org) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withChildren; query != nil {
		if err := oq.loadChildren(ctx, query, nodes,
			func(n *Org) { n.Edges.Children = []*Org{} },
			func(n *Org, e *Org) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withOwner; query != nil {
		if err := oq.loadOwner(ctx, query, nodes, nil,
			func(n *Org, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withUsers; query != nil {
		if err := oq.loadUsers(ctx, query, nodes,
			func(n *Org) { n.Edges.Users = []*User{} },
			func(n *Org, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withRolesAndGroups; query != nil {
		if err := oq.loadRolesAndGroups(ctx, query, nodes,
			func(n *Org) { n.Edges.RolesAndGroups = []*OrgRole{} },
			func(n *Org, e *OrgRole) { n.Edges.RolesAndGroups = append(n.Edges.RolesAndGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withPermissions; query != nil {
		if err := oq.loadPermissions(ctx, query, nodes,
			func(n *Org) { n.Edges.Permissions = []*Permission{} },
			func(n *Org, e *Permission) { n.Edges.Permissions = append(n.Edges.Permissions, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withPolicies; query != nil {
		if err := oq.loadPolicies(ctx, query, nodes,
			func(n *Org) { n.Edges.Policies = []*OrgPolicy{} },
			func(n *Org, e *OrgPolicy) { n.Edges.Policies = append(n.Edges.Policies, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withApps; query != nil {
		if err := oq.loadApps(ctx, query, nodes,
			func(n *Org) { n.Edges.Apps = []*App{} },
			func(n *Org, e *App) { n.Edges.Apps = append(n.Edges.Apps, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withFileIdentities; query != nil {
		if err := oq.loadFileIdentities(ctx, query, nodes,
			func(n *Org) { n.Edges.FileIdentities = []*FileIdentity{} },
			func(n *Org, e *FileIdentity) { n.Edges.FileIdentities = append(n.Edges.FileIdentities, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withOrgUser; query != nil {
		if err := oq.loadOrgUser(ctx, query, nodes,
			func(n *Org) { n.Edges.OrgUser = []*OrgUser{} },
			func(n *Org, e *OrgUser) { n.Edges.OrgUser = append(n.Edges.OrgUser, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withOrgApp; query != nil {
		if err := oq.loadOrgApp(ctx, query, nodes,
			func(n *Org) { n.Edges.OrgApp = []*OrgApp{} },
			func(n *Org, e *OrgApp) { n.Edges.OrgApp = append(n.Edges.OrgApp, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedChildren {
		if err := oq.loadChildren(ctx, query, nodes,
			func(n *Org) { n.appendNamedChildren(name) },
			func(n *Org, e *Org) { n.appendNamedChildren(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedUsers {
		if err := oq.loadUsers(ctx, query, nodes,
			func(n *Org) { n.appendNamedUsers(name) },
			func(n *Org, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedRolesAndGroups {
		if err := oq.loadRolesAndGroups(ctx, query, nodes,
			func(n *Org) { n.appendNamedRolesAndGroups(name) },
			func(n *Org, e *OrgRole) { n.appendNamedRolesAndGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedPermissions {
		if err := oq.loadPermissions(ctx, query, nodes,
			func(n *Org) { n.appendNamedPermissions(name) },
			func(n *Org, e *Permission) { n.appendNamedPermissions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedPolicies {
		if err := oq.loadPolicies(ctx, query, nodes,
			func(n *Org) { n.appendNamedPolicies(name) },
			func(n *Org, e *OrgPolicy) { n.appendNamedPolicies(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedApps {
		if err := oq.loadApps(ctx, query, nodes,
			func(n *Org) { n.appendNamedApps(name) },
			func(n *Org, e *App) { n.appendNamedApps(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedFileIdentities {
		if err := oq.loadFileIdentities(ctx, query, nodes,
			func(n *Org) { n.appendNamedFileIdentities(name) },
			func(n *Org, e *FileIdentity) { n.appendNamedFileIdentities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedOrgUser {
		if err := oq.loadOrgUser(ctx, query, nodes,
			func(n *Org) { n.appendNamedOrgUser(name) },
			func(n *Org, e *OrgUser) { n.appendNamedOrgUser(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedOrgApp {
		if err := oq.loadOrgApp(ctx, query, nodes,
			func(n *Org) { n.appendNamedOrgApp(name) },
			func(n *Org, e *OrgApp) { n.appendNamedOrgApp(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range oq.loadTotal {
		if err := oq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oq *OrgQuery) loadParent(ctx context.Context, query *OrgQuery, nodes []*Org, init func(*Org), assign func(*Org, *Org)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Org)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(org.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrgQuery) loadChildren(ctx context.Context, query *OrgQuery, nodes []*Org, init func(*Org), assign func(*Org, *Org)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Org)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(org.FieldParentID)
	}
	query.Where(predicate.Org(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(org.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrgQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*Org, init func(*Org), assign func(*Org, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Org)
	for i := range nodes {
		if nodes[i].OwnerID == nil {
			continue
		}
		fk := *nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrgQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Org, init func(*Org), assign func(*Org, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Org)
	nids := make(map[int]map[*Org]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(org.UsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(org.UsersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(org.UsersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(org.UsersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Org]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrgQuery) loadRolesAndGroups(ctx context.Context, query *OrgRoleQuery, nodes []*Org, init func(*Org), assign func(*Org, *OrgRole)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Org)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgrole.FieldOrgID)
	}
	query.Where(predicate.OrgRole(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(org.RolesAndGroupsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrgQuery) loadPermissions(ctx context.Context, query *PermissionQuery, nodes []*Org, init func(*Org), assign func(*Org, *Permission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Org)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(permission.FieldOrgID)
	}
	query.Where(predicate.Permission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(org.PermissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrgQuery) loadPolicies(ctx context.Context, query *OrgPolicyQuery, nodes []*Org, init func(*Org), assign func(*Org, *OrgPolicy)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Org)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgpolicy.FieldOrgID)
	}
	query.Where(predicate.OrgPolicy(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(org.PoliciesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrgQuery) loadApps(ctx context.Context, query *AppQuery, nodes []*Org, init func(*Org), assign func(*Org, *App)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Org)
	nids := make(map[int]map[*Org]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(org.AppsTable)
		s.Join(joinT).On(s.C(app.FieldID), joinT.C(org.AppsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(org.AppsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(org.AppsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Org]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*App](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "apps" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrgQuery) loadFileIdentities(ctx context.Context, query *FileIdentityQuery, nodes []*Org, init func(*Org), assign func(*Org, *FileIdentity)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Org)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(fileidentity.FieldTenantID)
	}
	query.Where(predicate.FileIdentity(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(org.FileIdentitiesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TenantID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tenant_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrgQuery) loadOrgUser(ctx context.Context, query *OrgUserQuery, nodes []*Org, init func(*Org), assign func(*Org, *OrgUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Org)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orguser.FieldOrgID)
	}
	query.Where(predicate.OrgUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(org.OrgUserColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrgQuery) loadOrgApp(ctx context.Context, query *OrgAppQuery, nodes []*Org, init func(*Org), assign func(*Org, *OrgApp)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Org)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgapp.FieldOrgID)
	}
	query.Where(predicate.OrgApp(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(org.OrgAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (oq *OrgQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oq.querySpec()
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	_spec.Node.Columns = oq.ctx.Fields
	if len(oq.ctx.Fields) > 0 {
		_spec.Unique = oq.ctx.Unique != nil && *oq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oq.driver, _spec)
}

func (oq *OrgQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(org.Table, org.Columns, sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt))
	_spec.From = oq.sql
	if unique := oq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oq.path != nil {
		_spec.Unique = true
	}
	if fields := oq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, org.FieldID)
		for i := range fields {
			if fields[i] != org.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oq.withParent != nil {
			_spec.Node.AddColumnOnce(org.FieldParentID)
		}
		if oq.withOwner != nil {
			_spec.Node.AddColumnOnce(org.FieldOwnerID)
		}
	}
	if ps := oq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oq *OrgQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oq.driver.Dialect())
	t1 := builder.Table(org.Table)
	columns := oq.ctx.Fields
	if len(columns) == 0 {
		columns = org.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oq.sql != nil {
		selector = oq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oq.ctx.Unique != nil && *oq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oq.predicates {
		p(selector)
	}
	for _, p := range oq.order {
		p(selector)
	}
	if offset := oq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedChildren tells the query-builder to eager-load the nodes that are connected to the "children"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedChildren(name string, opts ...func(*OrgQuery)) *OrgQuery {
	query := (&OrgClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedChildren == nil {
		oq.withNamedChildren = make(map[string]*OrgQuery)
	}
	oq.withNamedChildren[name] = query
	return oq
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *OrgQuery {
	query := (&UserClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedUsers == nil {
		oq.withNamedUsers = make(map[string]*UserQuery)
	}
	oq.withNamedUsers[name] = query
	return oq
}

// WithNamedRolesAndGroups tells the query-builder to eager-load the nodes that are connected to the "roles_and_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedRolesAndGroups(name string, opts ...func(*OrgRoleQuery)) *OrgQuery {
	query := (&OrgRoleClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedRolesAndGroups == nil {
		oq.withNamedRolesAndGroups = make(map[string]*OrgRoleQuery)
	}
	oq.withNamedRolesAndGroups[name] = query
	return oq
}

// WithNamedPermissions tells the query-builder to eager-load the nodes that are connected to the "permissions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedPermissions(name string, opts ...func(*PermissionQuery)) *OrgQuery {
	query := (&PermissionClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedPermissions == nil {
		oq.withNamedPermissions = make(map[string]*PermissionQuery)
	}
	oq.withNamedPermissions[name] = query
	return oq
}

// WithNamedPolicies tells the query-builder to eager-load the nodes that are connected to the "policies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedPolicies(name string, opts ...func(*OrgPolicyQuery)) *OrgQuery {
	query := (&OrgPolicyClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedPolicies == nil {
		oq.withNamedPolicies = make(map[string]*OrgPolicyQuery)
	}
	oq.withNamedPolicies[name] = query
	return oq
}

// WithNamedApps tells the query-builder to eager-load the nodes that are connected to the "apps"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedApps(name string, opts ...func(*AppQuery)) *OrgQuery {
	query := (&AppClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedApps == nil {
		oq.withNamedApps = make(map[string]*AppQuery)
	}
	oq.withNamedApps[name] = query
	return oq
}

// WithNamedFileIdentities tells the query-builder to eager-load the nodes that are connected to the "file_identities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedFileIdentities(name string, opts ...func(*FileIdentityQuery)) *OrgQuery {
	query := (&FileIdentityClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedFileIdentities == nil {
		oq.withNamedFileIdentities = make(map[string]*FileIdentityQuery)
	}
	oq.withNamedFileIdentities[name] = query
	return oq
}

// WithNamedOrgUser tells the query-builder to eager-load the nodes that are connected to the "org_user"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedOrgUser(name string, opts ...func(*OrgUserQuery)) *OrgQuery {
	query := (&OrgUserClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedOrgUser == nil {
		oq.withNamedOrgUser = make(map[string]*OrgUserQuery)
	}
	oq.withNamedOrgUser[name] = query
	return oq
}

// WithNamedOrgApp tells the query-builder to eager-load the nodes that are connected to the "org_app"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrgQuery) WithNamedOrgApp(name string, opts ...func(*OrgAppQuery)) *OrgQuery {
	query := (&OrgAppClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedOrgApp == nil {
		oq.withNamedOrgApp = make(map[string]*OrgAppQuery)
	}
	oq.withNamedOrgApp[name] = query
	return oq
}

// OrgGroupBy is the group-by builder for Org entities.
type OrgGroupBy struct {
	selector
	build *OrgQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ogb *OrgGroupBy) Aggregate(fns ...AggregateFunc) *OrgGroupBy {
	ogb.fns = append(ogb.fns, fns...)
	return ogb
}

// Scan applies the selector query and scans the result into the given value.
func (ogb *OrgGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ogb.build.ctx, ent.OpQueryGroupBy)
	if err := ogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgQuery, *OrgGroupBy](ctx, ogb.build, ogb, ogb.build.inters, v)
}

func (ogb *OrgGroupBy) sqlScan(ctx context.Context, root *OrgQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ogb.fns))
	for _, fn := range ogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ogb.flds)+len(ogb.fns))
		for _, f := range *ogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrgSelect is the builder for selecting fields of Org entities.
type OrgSelect struct {
	*OrgQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (os *OrgSelect) Aggregate(fns ...AggregateFunc) *OrgSelect {
	os.fns = append(os.fns, fns...)
	return os
}

// Scan applies the selector query and scans the result into the given value.
func (os *OrgSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, os.ctx, ent.OpQuerySelect)
	if err := os.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgQuery, *OrgSelect](ctx, os.OrgQuery, os, os.inters, v)
}

func (os *OrgSelect) sqlScan(ctx context.Context, root *OrgQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(os.fns))
	for _, fn := range os.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*os.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := os.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
