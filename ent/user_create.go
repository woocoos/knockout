// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orguser"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userdevice"
	"github.com/woocoos/knockout/ent/useridentity"
	"github.com/woocoos/knockout/ent/userloginprofile"
	"github.com/woocoos/knockout/ent/userpassword"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (uc *UserCreate) SetCreatedBy(i int) *UserCreate {
	uc.mutation.SetCreatedBy(i)
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedBy sets the "updated_by" field.
func (uc *UserCreate) SetUpdatedBy(i int) *UserCreate {
	uc.mutation.SetUpdatedBy(i)
	return uc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedBy(i *int) *UserCreate {
	if i != nil {
		uc.SetUpdatedBy(*i)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetPrincipalName sets the "principal_name" field.
func (uc *UserCreate) SetPrincipalName(s string) *UserCreate {
	uc.mutation.SetPrincipalName(s)
	return uc
}

// SetDisplayName sets the "display_name" field.
func (uc *UserCreate) SetDisplayName(s string) *UserCreate {
	uc.mutation.SetDisplayName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetMobile sets the "mobile" field.
func (uc *UserCreate) SetMobile(s string) *UserCreate {
	uc.mutation.SetMobile(s)
	return uc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uc *UserCreate) SetNillableMobile(s *string) *UserCreate {
	if s != nil {
		uc.SetMobile(*s)
	}
	return uc
}

// SetUserType sets the "user_type" field.
func (uc *UserCreate) SetUserType(ut user.UserType) *UserCreate {
	uc.mutation.SetUserType(ut)
	return uc
}

// SetCreationType sets the "creation_type" field.
func (uc *UserCreate) SetCreationType(ut user.CreationType) *UserCreate {
	uc.mutation.SetCreationType(ut)
	return uc
}

// SetRegisterIP sets the "register_ip" field.
func (uc *UserCreate) SetRegisterIP(s string) *UserCreate {
	uc.mutation.SetRegisterIP(s)
	return uc
}

// SetStatus sets the "status" field.
func (uc *UserCreate) SetStatus(ts typex.SimpleStatus) *UserCreate {
	uc.mutation.SetStatus(ts)
	return uc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uc *UserCreate) SetNillableStatus(ts *typex.SimpleStatus) *UserCreate {
	if ts != nil {
		uc.SetStatus(*ts)
	}
	return uc
}

// SetComments sets the "comments" field.
func (uc *UserCreate) SetComments(s string) *UserCreate {
	uc.mutation.SetComments(s)
	return uc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (uc *UserCreate) SetNillableComments(s *string) *UserCreate {
	if s != nil {
		uc.SetComments(*s)
	}
	return uc
}

// SetAvatarFileID sets the "avatar_file_id" field.
func (uc *UserCreate) SetAvatarFileID(i int) *UserCreate {
	uc.mutation.SetAvatarFileID(i)
	return uc
}

// SetNillableAvatarFileID sets the "avatar_file_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatarFileID(i *int) *UserCreate {
	if i != nil {
		uc.SetAvatarFileID(*i)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(i int) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(i *int) *UserCreate {
	if i != nil {
		uc.SetID(*i)
	}
	return uc
}

// AddIdentityIDs adds the "identities" edge to the UserIdentity entity by IDs.
func (uc *UserCreate) AddIdentityIDs(ids ...int) *UserCreate {
	uc.mutation.AddIdentityIDs(ids...)
	return uc
}

// AddIdentities adds the "identities" edges to the UserIdentity entity.
func (uc *UserCreate) AddIdentities(u ...*UserIdentity) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddIdentityIDs(ids...)
}

// SetLoginProfileID sets the "login_profile" edge to the UserLoginProfile entity by ID.
func (uc *UserCreate) SetLoginProfileID(id int) *UserCreate {
	uc.mutation.SetLoginProfileID(id)
	return uc
}

// SetNillableLoginProfileID sets the "login_profile" edge to the UserLoginProfile entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableLoginProfileID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetLoginProfileID(*id)
	}
	return uc
}

// SetLoginProfile sets the "login_profile" edge to the UserLoginProfile entity.
func (uc *UserCreate) SetLoginProfile(u *UserLoginProfile) *UserCreate {
	return uc.SetLoginProfileID(u.ID)
}

// AddPasswordIDs adds the "passwords" edge to the UserPassword entity by IDs.
func (uc *UserCreate) AddPasswordIDs(ids ...int) *UserCreate {
	uc.mutation.AddPasswordIDs(ids...)
	return uc
}

// AddPasswords adds the "passwords" edges to the UserPassword entity.
func (uc *UserCreate) AddPasswords(u ...*UserPassword) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddPasswordIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the UserDevice entity by IDs.
func (uc *UserCreate) AddDeviceIDs(ids ...int) *UserCreate {
	uc.mutation.AddDeviceIDs(ids...)
	return uc
}

// AddDevices adds the "devices" edges to the UserDevice entity.
func (uc *UserCreate) AddDevices(u ...*UserDevice) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddDeviceIDs(ids...)
}

// AddOrgIDs adds the "orgs" edge to the Org entity by IDs.
func (uc *UserCreate) AddOrgIDs(ids ...int) *UserCreate {
	uc.mutation.AddOrgIDs(ids...)
	return uc
}

// AddOrgs adds the "orgs" edges to the Org entity.
func (uc *UserCreate) AddOrgs(o ...*Org) *UserCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddOrgIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (uc *UserCreate) AddPermissionIDs(ids ...int) *UserCreate {
	uc.mutation.AddPermissionIDs(ids...)
	return uc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (uc *UserCreate) AddPermissions(p ...*Permission) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPermissionIDs(ids...)
}

// AddOrgUserIDs adds the "org_user" edge to the OrgUser entity by IDs.
func (uc *UserCreate) AddOrgUserIDs(ids ...int) *UserCreate {
	uc.mutation.AddOrgUserIDs(ids...)
	return uc
}

// AddOrgUser adds the "org_user" edges to the OrgUser entity.
func (uc *UserCreate) AddOrgUser(o ...*OrgUser) *UserCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddOrgUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		if user.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		if user.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultID (forgotten import ent/runtime?)")
		}
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "User.created_by"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.PrincipalName(); !ok {
		return &ValidationError{Name: "principal_name", err: errors.New(`ent: missing required field "User.principal_name"`)}
	}
	if _, ok := uc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "User.display_name"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Mobile(); ok {
		if err := user.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "User.mobile": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`ent: missing required field "User.user_type"`)}
	}
	if v, ok := uc.mutation.UserType(); ok {
		if err := user.UserTypeValidator(v); err != nil {
			return &ValidationError{Name: "user_type", err: fmt.Errorf(`ent: validator failed for field "User.user_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CreationType(); !ok {
		return &ValidationError{Name: "creation_type", err: errors.New(`ent: missing required field "User.creation_type"`)}
	}
	if v, ok := uc.mutation.CreationType(); ok {
		if err := user.CreationTypeValidator(v); err != nil {
			return &ValidationError{Name: "creation_type", err: fmt.Errorf(`ent: validator failed for field "User.creation_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.RegisterIP(); !ok {
		return &ValidationError{Name: "register_ip", err: errors.New(`ent: missing required field "User.register_ip"`)}
	}
	if v, ok := uc.mutation.RegisterIP(); ok {
		if err := user.RegisterIPValidator(v); err != nil {
			return &ValidationError{Name: "register_ip", err: fmt.Errorf(`ent: validator failed for field "User.register_ip": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedBy(); ok {
		_spec.SetField(user.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := uc.mutation.PrincipalName(); ok {
		_spec.SetField(user.FieldPrincipalName, field.TypeString, value)
		_node.PrincipalName = value
	}
	if value, ok := uc.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := uc.mutation.UserType(); ok {
		_spec.SetField(user.FieldUserType, field.TypeEnum, value)
		_node.UserType = value
	}
	if value, ok := uc.mutation.CreationType(); ok {
		_spec.SetField(user.FieldCreationType, field.TypeEnum, value)
		_node.CreationType = value
	}
	if value, ok := uc.mutation.RegisterIP(); ok {
		_spec.SetField(user.FieldRegisterIP, field.TypeString, value)
		_node.RegisterIP = &value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.Comments(); ok {
		_spec.SetField(user.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if value, ok := uc.mutation.AvatarFileID(); ok {
		_spec.SetField(user.FieldAvatarFileID, field.TypeInt, value)
		_node.AvatarFileID = value
	}
	if nodes := uc.mutation.IdentitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.IdentitiesTable,
			Columns: []string{user.IdentitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LoginProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.LoginProfileTable,
			Columns: []string{user.LoginProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userloginprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DevicesTable,
			Columns: []string{user.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.OrgsTable,
			Columns: user.OrgsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: uc.config, mutation: newOrgUserMutation(uc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PermissionsTable,
			Columns: []string{user.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OrgUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgUserTable,
			Columns: []string{user.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orguser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsert) SetUpdatedBy(v int) *UserUpsert {
	u.Set(user.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedBy() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsert) AddUpdatedBy(v int) *UserUpsert {
	u.Add(user.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserUpsert) ClearUpdatedBy() *UserUpsert {
	u.SetNull(user.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserUpsert) ClearUpdatedAt() *UserUpsert {
	u.SetNull(user.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsert) ClearDeletedAt() *UserUpsert {
	u.SetNull(user.FieldDeletedAt)
	return u
}

// SetPrincipalName sets the "principal_name" field.
func (u *UserUpsert) SetPrincipalName(v string) *UserUpsert {
	u.Set(user.FieldPrincipalName, v)
	return u
}

// UpdatePrincipalName sets the "principal_name" field to the value that was provided on create.
func (u *UserUpsert) UpdatePrincipalName() *UserUpsert {
	u.SetExcluded(user.FieldPrincipalName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsert) SetDisplayName(v string) *UserUpsert {
	u.Set(user.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsert) UpdateDisplayName() *UserUpsert {
	u.SetExcluded(user.FieldDisplayName)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsert) ClearEmail() *UserUpsert {
	u.SetNull(user.FieldEmail)
	return u
}

// SetMobile sets the "mobile" field.
func (u *UserUpsert) SetMobile(v string) *UserUpsert {
	u.Set(user.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserUpsert) UpdateMobile() *UserUpsert {
	u.SetExcluded(user.FieldMobile)
	return u
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserUpsert) ClearMobile() *UserUpsert {
	u.SetNull(user.FieldMobile)
	return u
}

// SetUserType sets the "user_type" field.
func (u *UserUpsert) SetUserType(v user.UserType) *UserUpsert {
	u.Set(user.FieldUserType, v)
	return u
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsert) UpdateUserType() *UserUpsert {
	u.SetExcluded(user.FieldUserType)
	return u
}

// SetCreationType sets the "creation_type" field.
func (u *UserUpsert) SetCreationType(v user.CreationType) *UserUpsert {
	u.Set(user.FieldCreationType, v)
	return u
}

// UpdateCreationType sets the "creation_type" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreationType() *UserUpsert {
	u.SetExcluded(user.FieldCreationType)
	return u
}

// SetRegisterIP sets the "register_ip" field.
func (u *UserUpsert) SetRegisterIP(v string) *UserUpsert {
	u.Set(user.FieldRegisterIP, v)
	return u
}

// UpdateRegisterIP sets the "register_ip" field to the value that was provided on create.
func (u *UserUpsert) UpdateRegisterIP() *UserUpsert {
	u.SetExcluded(user.FieldRegisterIP)
	return u
}

// SetStatus sets the "status" field.
func (u *UserUpsert) SetStatus(v typex.SimpleStatus) *UserUpsert {
	u.Set(user.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsert) UpdateStatus() *UserUpsert {
	u.SetExcluded(user.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *UserUpsert) ClearStatus() *UserUpsert {
	u.SetNull(user.FieldStatus)
	return u
}

// SetComments sets the "comments" field.
func (u *UserUpsert) SetComments(v string) *UserUpsert {
	u.Set(user.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *UserUpsert) UpdateComments() *UserUpsert {
	u.SetExcluded(user.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *UserUpsert) ClearComments() *UserUpsert {
	u.SetNull(user.FieldComments)
	return u
}

// SetAvatarFileID sets the "avatar_file_id" field.
func (u *UserUpsert) SetAvatarFileID(v int) *UserUpsert {
	u.Set(user.FieldAvatarFileID, v)
	return u
}

// UpdateAvatarFileID sets the "avatar_file_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatarFileID() *UserUpsert {
	u.SetExcluded(user.FieldAvatarFileID)
	return u
}

// AddAvatarFileID adds v to the "avatar_file_id" field.
func (u *UserUpsert) AddAvatarFileID(v int) *UserUpsert {
	u.Add(user.FieldAvatarFileID, v)
	return u
}

// ClearAvatarFileID clears the value of the "avatar_file_id" field.
func (u *UserUpsert) ClearAvatarFileID() *UserUpsert {
	u.SetNull(user.FieldAvatarFileID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(user.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsertOne) SetUpdatedBy(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsertOne) AddUpdatedBy(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserUpsertOne) ClearUpdatedBy() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserUpsertOne) ClearUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertOne) ClearDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPrincipalName sets the "principal_name" field.
func (u *UserUpsertOne) SetPrincipalName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPrincipalName(v)
	})
}

// UpdatePrincipalName sets the "principal_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePrincipalName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrincipalName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsertOne) SetDisplayName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDisplayName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisplayName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertOne) ClearEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetMobile sets the "mobile" field.
func (u *UserUpsertOne) SetMobile(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMobile() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserUpsertOne) ClearMobile() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMobile()
	})
}

// SetUserType sets the "user_type" field.
func (u *UserUpsertOne) SetUserType(v user.UserType) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUserType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserType()
	})
}

// SetCreationType sets the "creation_type" field.
func (u *UserUpsertOne) SetCreationType(v user.CreationType) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreationType(v)
	})
}

// UpdateCreationType sets the "creation_type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreationType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreationType()
	})
}

// SetRegisterIP sets the "register_ip" field.
func (u *UserUpsertOne) SetRegisterIP(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRegisterIP(v)
	})
}

// UpdateRegisterIP sets the "register_ip" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRegisterIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegisterIP()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertOne) SetStatus(v typex.SimpleStatus) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UserUpsertOne) ClearStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearStatus()
	})
}

// SetComments sets the "comments" field.
func (u *UserUpsertOne) SetComments(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateComments() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *UserUpsertOne) ClearComments() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearComments()
	})
}

// SetAvatarFileID sets the "avatar_file_id" field.
func (u *UserUpsertOne) SetAvatarFileID(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarFileID(v)
	})
}

// AddAvatarFileID adds v to the "avatar_file_id" field.
func (u *UserUpsertOne) AddAvatarFileID(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddAvatarFileID(v)
	})
}

// UpdateAvatarFileID sets the "avatar_file_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatarFileID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarFileID()
	})
}

// ClearAvatarFileID clears the value of the "avatar_file_id" field.
func (u *UserUpsertOne) ClearAvatarFileID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarFileID()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(user.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserUpsertBulk) SetUpdatedBy(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserUpsertBulk) AddUpdatedBy(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserUpsertBulk) ClearUpdatedBy() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserUpsertBulk) ClearUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertBulk) ClearDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetPrincipalName sets the "principal_name" field.
func (u *UserUpsertBulk) SetPrincipalName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPrincipalName(v)
	})
}

// UpdatePrincipalName sets the "principal_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePrincipalName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePrincipalName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *UserUpsertBulk) SetDisplayName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDisplayName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDisplayName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertBulk) ClearEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetMobile sets the "mobile" field.
func (u *UserUpsertBulk) SetMobile(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMobile() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *UserUpsertBulk) ClearMobile() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMobile()
	})
}

// SetUserType sets the "user_type" field.
func (u *UserUpsertBulk) SetUserType(v user.UserType) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUserType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUserType()
	})
}

// SetCreationType sets the "creation_type" field.
func (u *UserUpsertBulk) SetCreationType(v user.CreationType) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreationType(v)
	})
}

// UpdateCreationType sets the "creation_type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreationType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreationType()
	})
}

// SetRegisterIP sets the "register_ip" field.
func (u *UserUpsertBulk) SetRegisterIP(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRegisterIP(v)
	})
}

// UpdateRegisterIP sets the "register_ip" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRegisterIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRegisterIP()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertBulk) SetStatus(v typex.SimpleStatus) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UserUpsertBulk) ClearStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearStatus()
	})
}

// SetComments sets the "comments" field.
func (u *UserUpsertBulk) SetComments(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateComments() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *UserUpsertBulk) ClearComments() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearComments()
	})
}

// SetAvatarFileID sets the "avatar_file_id" field.
func (u *UserUpsertBulk) SetAvatarFileID(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarFileID(v)
	})
}

// AddAvatarFileID adds v to the "avatar_file_id" field.
func (u *UserUpsertBulk) AddAvatarFileID(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddAvatarFileID(v)
	})
}

// UpdateAvatarFileID sets the "avatar_file_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatarFileID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarFileID()
	})
}

// ClearAvatarFileID clears the value of the "avatar_file_id" field.
func (u *UserUpsertBulk) ClearAvatarFileID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarFileID()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
