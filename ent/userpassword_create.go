// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userpassword"
)

// UserPasswordCreate is the builder for creating a UserPassword entity.
type UserPasswordCreate struct {
	config
	mutation *UserPasswordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (upc *UserPasswordCreate) SetCreatedBy(i int) *UserPasswordCreate {
	upc.mutation.SetCreatedBy(i)
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserPasswordCreate) SetCreatedAt(t time.Time) *UserPasswordCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableCreatedAt(t *time.Time) *UserPasswordCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedBy sets the "updated_by" field.
func (upc *UserPasswordCreate) SetUpdatedBy(i int) *UserPasswordCreate {
	upc.mutation.SetUpdatedBy(i)
	return upc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableUpdatedBy(i *int) *UserPasswordCreate {
	if i != nil {
		upc.SetUpdatedBy(*i)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserPasswordCreate) SetUpdatedAt(t time.Time) *UserPasswordCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableUpdatedAt(t *time.Time) *UserPasswordCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// SetUserID sets the "user_id" field.
func (upc *UserPasswordCreate) SetUserID(i int) *UserPasswordCreate {
	upc.mutation.SetUserID(i)
	return upc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableUserID(i *int) *UserPasswordCreate {
	if i != nil {
		upc.SetUserID(*i)
	}
	return upc
}

// SetScene sets the "scene" field.
func (upc *UserPasswordCreate) SetScene(u userpassword.Scene) *UserPasswordCreate {
	upc.mutation.SetScene(u)
	return upc
}

// SetPassword sets the "password" field.
func (upc *UserPasswordCreate) SetPassword(s string) *UserPasswordCreate {
	upc.mutation.SetPassword(s)
	return upc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillablePassword(s *string) *UserPasswordCreate {
	if s != nil {
		upc.SetPassword(*s)
	}
	return upc
}

// SetSalt sets the "salt" field.
func (upc *UserPasswordCreate) SetSalt(s string) *UserPasswordCreate {
	upc.mutation.SetSalt(s)
	return upc
}

// SetStatus sets the "status" field.
func (upc *UserPasswordCreate) SetStatus(ts typex.SimpleStatus) *UserPasswordCreate {
	upc.mutation.SetStatus(ts)
	return upc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableStatus(ts *typex.SimpleStatus) *UserPasswordCreate {
	if ts != nil {
		upc.SetStatus(*ts)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserPasswordCreate) SetID(i int) *UserPasswordCreate {
	upc.mutation.SetID(i)
	return upc
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserPasswordCreate) SetUser(u *User) *UserPasswordCreate {
	return upc.SetUserID(u.ID)
}

// Mutation returns the UserPasswordMutation object of the builder.
func (upc *UserPasswordCreate) Mutation() *UserPasswordMutation {
	return upc.mutation
}

// Save creates the UserPassword in the database.
func (upc *UserPasswordCreate) Save(ctx context.Context) (*UserPassword, error) {
	if err := upc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*UserPassword, UserPasswordMutation](ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPasswordCreate) SaveX(ctx context.Context) *UserPassword {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPasswordCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPasswordCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserPasswordCreate) defaults() error {
	if _, ok := upc.mutation.CreatedAt(); !ok {
		if userpassword.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized userpassword.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := userpassword.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.Status(); !ok {
		v := userpassword.DefaultStatus
		upc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPasswordCreate) check() error {
	if _, ok := upc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserPassword.created_by"`)}
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserPassword.created_at"`)}
	}
	if _, ok := upc.mutation.Scene(); !ok {
		return &ValidationError{Name: "scene", err: errors.New(`ent: missing required field "UserPassword.scene"`)}
	}
	if v, ok := upc.mutation.Scene(); ok {
		if err := userpassword.SceneValidator(v); err != nil {
			return &ValidationError{Name: "scene", err: fmt.Errorf(`ent: validator failed for field "UserPassword.scene": %w`, err)}
		}
	}
	if _, ok := upc.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New(`ent: missing required field "UserPassword.salt"`)}
	}
	if v, ok := upc.mutation.Salt(); ok {
		if err := userpassword.SaltValidator(v); err != nil {
			return &ValidationError{Name: "salt", err: fmt.Errorf(`ent: validator failed for field "UserPassword.salt": %w`, err)}
		}
	}
	if v, ok := upc.mutation.Status(); ok {
		if err := userpassword.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserPassword.status": %w`, err)}
		}
	}
	return nil
}

func (upc *UserPasswordCreate) sqlSave(ctx context.Context) (*UserPassword, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPasswordCreate) createSpec() (*UserPassword, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPassword{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userpassword.Table, sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt))
	)
	_spec.OnConflict = upc.conflict
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := upc.mutation.CreatedBy(); ok {
		_spec.SetField(userpassword.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userpassword.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedBy(); ok {
		_spec.SetField(userpassword.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userpassword.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := upc.mutation.Scene(); ok {
		_spec.SetField(userpassword.FieldScene, field.TypeEnum, value)
		_node.Scene = value
	}
	if value, ok := upc.mutation.Password(); ok {
		_spec.SetField(userpassword.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := upc.mutation.Salt(); ok {
		_spec.SetField(userpassword.FieldSalt, field.TypeString, value)
		_node.Salt = value
	}
	if value, ok := upc.mutation.Status(); ok {
		_spec.SetField(userpassword.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userpassword.UserTable,
			Columns: []string{userpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPassword.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPasswordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (upc *UserPasswordCreate) OnConflict(opts ...sql.ConflictOption) *UserPasswordUpsertOne {
	upc.conflict = opts
	return &UserPasswordUpsertOne{
		create: upc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPassword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upc *UserPasswordCreate) OnConflictColumns(columns ...string) *UserPasswordUpsertOne {
	upc.conflict = append(upc.conflict, sql.ConflictColumns(columns...))
	return &UserPasswordUpsertOne{
		create: upc,
	}
}

type (
	// UserPasswordUpsertOne is the builder for "upsert"-ing
	//  one UserPassword node.
	UserPasswordUpsertOne struct {
		create *UserPasswordCreate
	}

	// UserPasswordUpsert is the "OnConflict" setter.
	UserPasswordUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *UserPasswordUpsert) SetUpdatedBy(v int) *UserPasswordUpsert {
	u.Set(userpassword.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserPasswordUpsert) UpdateUpdatedBy() *UserPasswordUpsert {
	u.SetExcluded(userpassword.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserPasswordUpsert) AddUpdatedBy(v int) *UserPasswordUpsert {
	u.Add(userpassword.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserPasswordUpsert) ClearUpdatedBy() *UserPasswordUpsert {
	u.SetNull(userpassword.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPasswordUpsert) SetUpdatedAt(v time.Time) *UserPasswordUpsert {
	u.Set(userpassword.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPasswordUpsert) UpdateUpdatedAt() *UserPasswordUpsert {
	u.SetExcluded(userpassword.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserPasswordUpsert) ClearUpdatedAt() *UserPasswordUpsert {
	u.SetNull(userpassword.FieldUpdatedAt)
	return u
}

// SetScene sets the "scene" field.
func (u *UserPasswordUpsert) SetScene(v userpassword.Scene) *UserPasswordUpsert {
	u.Set(userpassword.FieldScene, v)
	return u
}

// UpdateScene sets the "scene" field to the value that was provided on create.
func (u *UserPasswordUpsert) UpdateScene() *UserPasswordUpsert {
	u.SetExcluded(userpassword.FieldScene)
	return u
}

// SetPassword sets the "password" field.
func (u *UserPasswordUpsert) SetPassword(v string) *UserPasswordUpsert {
	u.Set(userpassword.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserPasswordUpsert) UpdatePassword() *UserPasswordUpsert {
	u.SetExcluded(userpassword.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *UserPasswordUpsert) ClearPassword() *UserPasswordUpsert {
	u.SetNull(userpassword.FieldPassword)
	return u
}

// SetSalt sets the "salt" field.
func (u *UserPasswordUpsert) SetSalt(v string) *UserPasswordUpsert {
	u.Set(userpassword.FieldSalt, v)
	return u
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *UserPasswordUpsert) UpdateSalt() *UserPasswordUpsert {
	u.SetExcluded(userpassword.FieldSalt)
	return u
}

// SetStatus sets the "status" field.
func (u *UserPasswordUpsert) SetStatus(v typex.SimpleStatus) *UserPasswordUpsert {
	u.Set(userpassword.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserPasswordUpsert) UpdateStatus() *UserPasswordUpsert {
	u.SetExcluded(userpassword.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *UserPasswordUpsert) ClearStatus() *UserPasswordUpsert {
	u.SetNull(userpassword.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserPassword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userpassword.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserPasswordUpsertOne) UpdateNewValues() *UserPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userpassword.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(userpassword.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userpassword.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(userpassword.FieldUserID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPassword.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserPasswordUpsertOne) Ignore() *UserPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPasswordUpsertOne) DoNothing() *UserPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPasswordCreate.OnConflict
// documentation for more info.
func (u *UserPasswordUpsertOne) Update(set func(*UserPasswordUpsert)) *UserPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPasswordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserPasswordUpsertOne) SetUpdatedBy(v int) *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserPasswordUpsertOne) AddUpdatedBy(v int) *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserPasswordUpsertOne) UpdateUpdatedBy() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserPasswordUpsertOne) ClearUpdatedBy() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPasswordUpsertOne) SetUpdatedAt(v time.Time) *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPasswordUpsertOne) UpdateUpdatedAt() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserPasswordUpsertOne) ClearUpdatedAt() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetScene sets the "scene" field.
func (u *UserPasswordUpsertOne) SetScene(v userpassword.Scene) *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetScene(v)
	})
}

// UpdateScene sets the "scene" field to the value that was provided on create.
func (u *UserPasswordUpsertOne) UpdateScene() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateScene()
	})
}

// SetPassword sets the "password" field.
func (u *UserPasswordUpsertOne) SetPassword(v string) *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserPasswordUpsertOne) UpdatePassword() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserPasswordUpsertOne) ClearPassword() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearPassword()
	})
}

// SetSalt sets the "salt" field.
func (u *UserPasswordUpsertOne) SetSalt(v string) *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *UserPasswordUpsertOne) UpdateSalt() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateSalt()
	})
}

// SetStatus sets the "status" field.
func (u *UserPasswordUpsertOne) SetStatus(v typex.SimpleStatus) *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserPasswordUpsertOne) UpdateStatus() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UserPasswordUpsertOne) ClearStatus() *UserPasswordUpsertOne {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *UserPasswordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPasswordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPasswordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserPasswordUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserPasswordUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserPasswordCreateBulk is the builder for creating many UserPassword entities in bulk.
type UserPasswordCreateBulk struct {
	config
	builders []*UserPasswordCreate
	conflict []sql.ConflictOption
}

// Save creates the UserPassword entities in the database.
func (upcb *UserPasswordCreateBulk) Save(ctx context.Context) ([]*UserPassword, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPassword, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPasswordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = upcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPasswordCreateBulk) SaveX(ctx context.Context) []*UserPassword {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPasswordCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPasswordCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserPassword.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserPasswordUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (upcb *UserPasswordCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserPasswordUpsertBulk {
	upcb.conflict = opts
	return &UserPasswordUpsertBulk{
		create: upcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserPassword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (upcb *UserPasswordCreateBulk) OnConflictColumns(columns ...string) *UserPasswordUpsertBulk {
	upcb.conflict = append(upcb.conflict, sql.ConflictColumns(columns...))
	return &UserPasswordUpsertBulk{
		create: upcb,
	}
}

// UserPasswordUpsertBulk is the builder for "upsert"-ing
// a bulk of UserPassword nodes.
type UserPasswordUpsertBulk struct {
	create *UserPasswordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserPassword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userpassword.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserPasswordUpsertBulk) UpdateNewValues() *UserPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userpassword.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(userpassword.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userpassword.FieldCreatedAt)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(userpassword.FieldUserID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserPassword.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserPasswordUpsertBulk) Ignore() *UserPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserPasswordUpsertBulk) DoNothing() *UserPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserPasswordCreateBulk.OnConflict
// documentation for more info.
func (u *UserPasswordUpsertBulk) Update(set func(*UserPasswordUpsert)) *UserPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserPasswordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *UserPasswordUpsertBulk) SetUpdatedBy(v int) *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *UserPasswordUpsertBulk) AddUpdatedBy(v int) *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *UserPasswordUpsertBulk) UpdateUpdatedBy() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *UserPasswordUpsertBulk) ClearUpdatedBy() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserPasswordUpsertBulk) SetUpdatedAt(v time.Time) *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserPasswordUpsertBulk) UpdateUpdatedAt() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserPasswordUpsertBulk) ClearUpdatedAt() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetScene sets the "scene" field.
func (u *UserPasswordUpsertBulk) SetScene(v userpassword.Scene) *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetScene(v)
	})
}

// UpdateScene sets the "scene" field to the value that was provided on create.
func (u *UserPasswordUpsertBulk) UpdateScene() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateScene()
	})
}

// SetPassword sets the "password" field.
func (u *UserPasswordUpsertBulk) SetPassword(v string) *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserPasswordUpsertBulk) UpdatePassword() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserPasswordUpsertBulk) ClearPassword() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearPassword()
	})
}

// SetSalt sets the "salt" field.
func (u *UserPasswordUpsertBulk) SetSalt(v string) *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetSalt(v)
	})
}

// UpdateSalt sets the "salt" field to the value that was provided on create.
func (u *UserPasswordUpsertBulk) UpdateSalt() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateSalt()
	})
}

// SetStatus sets the "status" field.
func (u *UserPasswordUpsertBulk) SetStatus(v typex.SimpleStatus) *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserPasswordUpsertBulk) UpdateStatus() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *UserPasswordUpsertBulk) ClearStatus() *UserPasswordUpsertBulk {
	return u.Update(func(s *UserPasswordUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *UserPasswordUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserPasswordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserPasswordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserPasswordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
