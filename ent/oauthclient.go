// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/oauthclient"
	"github.com/woocoos/knockout/ent/user"
)

// OauthClient is the model entity for the OauthClient schema.
type OauthClient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// id
	ClientID string `json:"client_id,omitempty"`
	// 密钥
	ClientSecret string `json:"client_secret,omitempty"`
	// 授权类型
	GrantTypes oauthclient.GrantTypes `json:"grant_types,omitempty"`
	// 关联用户id
	UserID int `json:"user_id,omitempty"`
	// 最后认证时间
	LastAuthAt time.Time `json:"last_auth_at,omitempty"`
	// 状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OauthClientQuery when eager-loading is set.
	Edges        OauthClientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OauthClientEdges holds the relations/edges for other nodes in the graph.
type OauthClientEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OauthClientEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthclient.FieldID, oauthclient.FieldCreatedBy, oauthclient.FieldUpdatedBy, oauthclient.FieldUserID:
			values[i] = new(sql.NullInt64)
		case oauthclient.FieldName, oauthclient.FieldClientID, oauthclient.FieldClientSecret, oauthclient.FieldGrantTypes, oauthclient.FieldStatus:
			values[i] = new(sql.NullString)
		case oauthclient.FieldCreatedAt, oauthclient.FieldUpdatedAt, oauthclient.FieldLastAuthAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthClient fields.
func (oc *OauthClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthclient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oc.ID = int(value.Int64)
		case oauthclient.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				oc.CreatedBy = int(value.Int64)
			}
		case oauthclient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oc.CreatedAt = value.Time
			}
		case oauthclient.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				oc.UpdatedBy = int(value.Int64)
			}
		case oauthclient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oc.UpdatedAt = value.Time
			}
		case oauthclient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oc.Name = value.String
			}
		case oauthclient.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				oc.ClientID = value.String
			}
		case oauthclient.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				oc.ClientSecret = value.String
			}
		case oauthclient.FieldGrantTypes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grant_types", values[i])
			} else if value.Valid {
				oc.GrantTypes = oauthclient.GrantTypes(value.String)
			}
		case oauthclient.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				oc.UserID = int(value.Int64)
			}
		case oauthclient.FieldLastAuthAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_auth_at", values[i])
			} else if value.Valid {
				oc.LastAuthAt = value.Time
			}
		case oauthclient.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				oc.Status = typex.SimpleStatus(value.String)
			}
		default:
			oc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthClient.
// This includes values selected through modifiers, order, etc.
func (oc *OauthClient) Value(name string) (ent.Value, error) {
	return oc.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the OauthClient entity.
func (oc *OauthClient) QueryUser() *UserQuery {
	return NewOauthClientClient(oc.config).QueryUser(oc)
}

// Update returns a builder for updating this OauthClient.
// Note that you need to call OauthClient.Unwrap() before calling this method if this OauthClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OauthClient) Update() *OauthClientUpdateOne {
	return NewOauthClientClient(oc.config).UpdateOne(oc)
}

// Unwrap unwraps the OauthClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OauthClient) Unwrap() *OauthClient {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthClient is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OauthClient) String() string {
	var builder strings.Builder
	builder.WriteString("OauthClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", oc.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", oc.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oc.Name)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(oc.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(oc.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("grant_types=")
	builder.WriteString(fmt.Sprintf("%v", oc.GrantTypes))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", oc.UserID))
	builder.WriteString(", ")
	builder.WriteString("last_auth_at=")
	builder.WriteString(oc.LastAuthAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", oc.Status))
	builder.WriteByte(')')
	return builder.String()
}

// OauthClients is a parsable slice of OauthClient.
type OauthClients []*OauthClient
