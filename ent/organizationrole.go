// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationrole"
)

// OrganizationRole is the model entity for the OrganizationRole schema.
type OrganizationRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 组织ID
	OrgID int `json:"org_id,omitempty"`
	// 类型,group:组,role:角色
	Kind organizationrole.Kind `json:"kind,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 角色ID,如有表示该角色来源于应用角色
	AppRoleID int `json:"app_role_id,omitempty"`
	// 备注
	Comments string `json:"comments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationRoleQuery when eager-loading is set.
	Edges OrganizationRoleEdges `json:"edges"`
}

// OrganizationRoleEdges holds the relations/edges for other nodes in the graph.
type OrganizationRoleEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationRoleEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[0] {
		if e.Organization == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationrole.FieldID, organizationrole.FieldCreatedBy, organizationrole.FieldUpdatedBy, organizationrole.FieldOrgID, organizationrole.FieldAppRoleID:
			values[i] = new(sql.NullInt64)
		case organizationrole.FieldKind, organizationrole.FieldName, organizationrole.FieldComments:
			values[i] = new(sql.NullString)
		case organizationrole.FieldCreatedAt, organizationrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationRole fields.
func (or *OrganizationRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			or.ID = int(value.Int64)
		case organizationrole.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				or.CreatedBy = int(value.Int64)
			}
		case organizationrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				or.CreatedAt = value.Time
			}
		case organizationrole.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				or.UpdatedBy = int(value.Int64)
			}
		case organizationrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				or.UpdatedAt = value.Time
			}
		case organizationrole.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				or.OrgID = int(value.Int64)
			}
		case organizationrole.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				or.Kind = organizationrole.Kind(value.String)
			}
		case organizationrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				or.Name = value.String
			}
		case organizationrole.FieldAppRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_role_id", values[i])
			} else if value.Valid {
				or.AppRoleID = int(value.Int64)
			}
		case organizationrole.FieldComments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comments", values[i])
			} else if value.Valid {
				or.Comments = value.String
			}
		}
	}
	return nil
}

// QueryOrganization queries the "organization" edge of the OrganizationRole entity.
func (or *OrganizationRole) QueryOrganization() *OrganizationQuery {
	return NewOrganizationRoleClient(or.config).QueryOrganization(or)
}

// Update returns a builder for updating this OrganizationRole.
// Note that you need to call OrganizationRole.Unwrap() before calling this method if this OrganizationRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OrganizationRole) Update() *OrganizationRoleUpdateOne {
	return NewOrganizationRoleClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OrganizationRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OrganizationRole) Unwrap() *OrganizationRole {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationRole is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OrganizationRole) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", or.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(or.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", or.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(or.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", or.OrgID))
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", or.Kind))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(or.Name)
	builder.WriteString(", ")
	builder.WriteString("app_role_id=")
	builder.WriteString(fmt.Sprintf("%v", or.AppRoleID))
	builder.WriteString(", ")
	builder.WriteString("comments=")
	builder.WriteString(or.Comments)
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationRoles is a parsable slice of OrganizationRole.
type OrganizationRoles []*OrganizationRole
