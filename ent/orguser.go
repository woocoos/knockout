// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orguser"
	"github.com/woocoos/knockout/ent/user"
)

// OrgUser is the model entity for the OrgUser schema.
type OrgUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 组织ID
	OrgID int `json:"org_id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 在组织内的显示名称
	DisplayName string `json:"display_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgUserQuery when eager-loading is set.
	Edges OrgUserEdges `json:"edges"`
}

// OrgUserEdges holds the relations/edges for other nodes in the graph.
type OrgUserEdges struct {
	// Org holds the value of the org edge.
	Org *Org `json:"org,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrgOrErr returns the Org value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgUserEdges) OrgOrErr() (*Org, error) {
	if e.loadedTypes[0] {
		if e.Org == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: org.Label}
		}
		return e.Org, nil
	}
	return nil, &NotLoadedError{edge: "org"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orguser.FieldID, orguser.FieldCreatedBy, orguser.FieldUpdatedBy, orguser.FieldOrgID, orguser.FieldUserID:
			values[i] = new(sql.NullInt64)
		case orguser.FieldDisplayName:
			values[i] = new(sql.NullString)
		case orguser.FieldCreatedAt, orguser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrgUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgUser fields.
func (ou *OrgUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orguser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ou.ID = int(value.Int64)
		case orguser.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ou.CreatedBy = int(value.Int64)
			}
		case orguser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ou.CreatedAt = value.Time
			}
		case orguser.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ou.UpdatedBy = int(value.Int64)
			}
		case orguser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ou.UpdatedAt = value.Time
			}
		case orguser.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				ou.OrgID = int(value.Int64)
			}
		case orguser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ou.UserID = int(value.Int64)
			}
		case orguser.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				ou.DisplayName = value.String
			}
		}
	}
	return nil
}

// QueryOrg queries the "org" edge of the OrgUser entity.
func (ou *OrgUser) QueryOrg() *OrgQuery {
	return NewOrgUserClient(ou.config).QueryOrg(ou)
}

// QueryUser queries the "user" edge of the OrgUser entity.
func (ou *OrgUser) QueryUser() *UserQuery {
	return NewOrgUserClient(ou.config).QueryUser(ou)
}

// Update returns a builder for updating this OrgUser.
// Note that you need to call OrgUser.Unwrap() before calling this method if this OrgUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ou *OrgUser) Update() *OrgUserUpdateOne {
	return NewOrgUserClient(ou.config).UpdateOne(ou)
}

// Unwrap unwraps the OrgUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ou *OrgUser) Unwrap() *OrgUser {
	_tx, ok := ou.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrgUser is not a transactional entity")
	}
	ou.config.driver = _tx.drv
	return ou
}

// String implements the fmt.Stringer.
func (ou *OrgUser) String() string {
	var builder strings.Builder
	builder.WriteString("OrgUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ou.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ou.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ou.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ou.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ou.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.OrgID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.UserID))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(ou.DisplayName)
	builder.WriteByte(')')
	return builder.String()
}

// OrgUsers is a parsable slice of OrgUser.
type OrgUsers []*OrgUser
