// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/country"
	"github.com/woocoos/knockout/ent/region"
)

// RegionCreate is the builder for creating a Region entity.
type RegionCreate struct {
	config
	mutation *RegionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (rc *RegionCreate) SetCreatedBy(i int) *RegionCreate {
	rc.mutation.SetCreatedBy(i)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RegionCreate) SetCreatedAt(t time.Time) *RegionCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RegionCreate) SetNillableCreatedAt(t *time.Time) *RegionCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *RegionCreate) SetUpdatedBy(i int) *RegionCreate {
	rc.mutation.SetUpdatedBy(i)
	return rc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rc *RegionCreate) SetNillableUpdatedBy(i *int) *RegionCreate {
	if i != nil {
		rc.SetUpdatedBy(*i)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RegionCreate) SetUpdatedAt(t time.Time) *RegionCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RegionCreate) SetNillableUpdatedAt(t *time.Time) *RegionCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetParentID sets the "parent_id" field.
func (rc *RegionCreate) SetParentID(i int) *RegionCreate {
	rc.mutation.SetParentID(i)
	return rc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (rc *RegionCreate) SetNillableParentID(i *int) *RegionCreate {
	if i != nil {
		rc.SetParentID(*i)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RegionCreate) SetName(s string) *RegionCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rc *RegionCreate) SetNillableName(s *string) *RegionCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetNameEn sets the "name_en" field.
func (rc *RegionCreate) SetNameEn(s string) *RegionCreate {
	rc.mutation.SetNameEn(s)
	return rc
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (rc *RegionCreate) SetNillableNameEn(s *string) *RegionCreate {
	if s != nil {
		rc.SetNameEn(*s)
	}
	return rc
}

// SetShortCode sets the "short_code" field.
func (rc *RegionCreate) SetShortCode(s string) *RegionCreate {
	rc.mutation.SetShortCode(s)
	return rc
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (rc *RegionCreate) SetNillableShortCode(s *string) *RegionCreate {
	if s != nil {
		rc.SetShortCode(*s)
	}
	return rc
}

// SetZipCode sets the "zip_code" field.
func (rc *RegionCreate) SetZipCode(s string) *RegionCreate {
	rc.mutation.SetZipCode(s)
	return rc
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (rc *RegionCreate) SetNillableZipCode(s *string) *RegionCreate {
	if s != nil {
		rc.SetZipCode(*s)
	}
	return rc
}

// SetCountryID sets the "country_id" field.
func (rc *RegionCreate) SetCountryID(i int) *RegionCreate {
	rc.mutation.SetCountryID(i)
	return rc
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (rc *RegionCreate) SetNillableCountryID(i *int) *RegionCreate {
	if i != nil {
		rc.SetCountryID(*i)
	}
	return rc
}

// SetDisplaySort sets the "display_sort" field.
func (rc *RegionCreate) SetDisplaySort(i int32) *RegionCreate {
	rc.mutation.SetDisplaySort(i)
	return rc
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (rc *RegionCreate) SetNillableDisplaySort(i *int32) *RegionCreate {
	if i != nil {
		rc.SetDisplaySort(*i)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *RegionCreate) SetStatus(ts typex.SimpleStatus) *RegionCreate {
	rc.mutation.SetStatus(ts)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *RegionCreate) SetNillableStatus(ts *typex.SimpleStatus) *RegionCreate {
	if ts != nil {
		rc.SetStatus(*ts)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RegionCreate) SetID(i int) *RegionCreate {
	rc.mutation.SetID(i)
	return rc
}

// SetParent sets the "parent" edge to the Region entity.
func (rc *RegionCreate) SetParent(r *Region) *RegionCreate {
	return rc.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Region entity by IDs.
func (rc *RegionCreate) AddChildIDs(ids ...int) *RegionCreate {
	rc.mutation.AddChildIDs(ids...)
	return rc
}

// AddChildren adds the "children" edges to the Region entity.
func (rc *RegionCreate) AddChildren(r ...*Region) *RegionCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddChildIDs(ids...)
}

// SetCountry sets the "country" edge to the Country entity.
func (rc *RegionCreate) SetCountry(c *Country) *RegionCreate {
	return rc.SetCountryID(c.ID)
}

// Mutation returns the RegionMutation object of the builder.
func (rc *RegionCreate) Mutation() *RegionMutation {
	return rc.mutation
}

// Save creates the Region in the database.
func (rc *RegionCreate) Save(ctx context.Context) (*Region, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegionCreate) SaveX(ctx context.Context) *Region {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RegionCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if region.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized region.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := region.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.ParentID(); !ok {
		v := region.DefaultParentID
		rc.mutation.SetParentID(v)
	}
	if _, ok := rc.mutation.Status(); !ok {
		v := region.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegionCreate) check() error {
	if _, ok := rc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Region.created_by"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Region.created_at"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := region.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Region.name": %w`, err)}
		}
	}
	if v, ok := rc.mutation.NameEn(); ok {
		if err := region.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "Region.name_en": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ShortCode(); ok {
		if err := region.ShortCodeValidator(v); err != nil {
			return &ValidationError{Name: "short_code", err: fmt.Errorf(`ent: validator failed for field "Region.short_code": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ZipCode(); ok {
		if err := region.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "Region.zip_code": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := region.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Region.status": %w`, err)}
		}
	}
	return nil
}

func (rc *RegionCreate) sqlSave(ctx context.Context) (*Region, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegionCreate) createSpec() (*Region, *sqlgraph.CreateSpec) {
	var (
		_node = &Region{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(region.Table, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.SetField(region.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(region.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedBy(); ok {
		_spec.SetField(region.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.NameEn(); ok {
		_spec.SetField(region.FieldNameEn, field.TypeString, value)
		_node.NameEn = value
	}
	if value, ok := rc.mutation.ShortCode(); ok {
		_spec.SetField(region.FieldShortCode, field.TypeString, value)
		_node.ShortCode = value
	}
	if value, ok := rc.mutation.ZipCode(); ok {
		_spec.SetField(region.FieldZipCode, field.TypeString, value)
		_node.ZipCode = value
	}
	if value, ok := rc.mutation.DisplaySort(); ok {
		_spec.SetField(region.FieldDisplaySort, field.TypeInt32, value)
		_node.DisplaySort = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(region.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := rc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CountryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Region.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rc *RegionCreate) OnConflict(opts ...sql.ConflictOption) *RegionUpsertOne {
	rc.conflict = opts
	return &RegionUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RegionCreate) OnConflictColumns(columns ...string) *RegionUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RegionUpsertOne{
		create: rc,
	}
}

type (
	// RegionUpsertOne is the builder for "upsert"-ing
	//  one Region node.
	RegionUpsertOne struct {
		create *RegionCreate
	}

	// RegionUpsert is the "OnConflict" setter.
	RegionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *RegionUpsert) SetUpdatedBy(v int) *RegionUpsert {
	u.Set(region.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RegionUpsert) UpdateUpdatedBy() *RegionUpsert {
	u.SetExcluded(region.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RegionUpsert) AddUpdatedBy(v int) *RegionUpsert {
	u.Add(region.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RegionUpsert) ClearUpdatedBy() *RegionUpsert {
	u.SetNull(region.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegionUpsert) SetUpdatedAt(v time.Time) *RegionUpsert {
	u.Set(region.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegionUpsert) UpdateUpdatedAt() *RegionUpsert {
	u.SetExcluded(region.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RegionUpsert) ClearUpdatedAt() *RegionUpsert {
	u.SetNull(region.FieldUpdatedAt)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *RegionUpsert) SetParentID(v int) *RegionUpsert {
	u.Set(region.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RegionUpsert) UpdateParentID() *RegionUpsert {
	u.SetExcluded(region.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RegionUpsert) ClearParentID() *RegionUpsert {
	u.SetNull(region.FieldParentID)
	return u
}

// SetName sets the "name" field.
func (u *RegionUpsert) SetName(v string) *RegionUpsert {
	u.Set(region.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegionUpsert) UpdateName() *RegionUpsert {
	u.SetExcluded(region.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *RegionUpsert) ClearName() *RegionUpsert {
	u.SetNull(region.FieldName)
	return u
}

// SetNameEn sets the "name_en" field.
func (u *RegionUpsert) SetNameEn(v string) *RegionUpsert {
	u.Set(region.FieldNameEn, v)
	return u
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *RegionUpsert) UpdateNameEn() *RegionUpsert {
	u.SetExcluded(region.FieldNameEn)
	return u
}

// ClearNameEn clears the value of the "name_en" field.
func (u *RegionUpsert) ClearNameEn() *RegionUpsert {
	u.SetNull(region.FieldNameEn)
	return u
}

// SetShortCode sets the "short_code" field.
func (u *RegionUpsert) SetShortCode(v string) *RegionUpsert {
	u.Set(region.FieldShortCode, v)
	return u
}

// UpdateShortCode sets the "short_code" field to the value that was provided on create.
func (u *RegionUpsert) UpdateShortCode() *RegionUpsert {
	u.SetExcluded(region.FieldShortCode)
	return u
}

// ClearShortCode clears the value of the "short_code" field.
func (u *RegionUpsert) ClearShortCode() *RegionUpsert {
	u.SetNull(region.FieldShortCode)
	return u
}

// SetZipCode sets the "zip_code" field.
func (u *RegionUpsert) SetZipCode(v string) *RegionUpsert {
	u.Set(region.FieldZipCode, v)
	return u
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *RegionUpsert) UpdateZipCode() *RegionUpsert {
	u.SetExcluded(region.FieldZipCode)
	return u
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *RegionUpsert) ClearZipCode() *RegionUpsert {
	u.SetNull(region.FieldZipCode)
	return u
}

// SetCountryID sets the "country_id" field.
func (u *RegionUpsert) SetCountryID(v int) *RegionUpsert {
	u.Set(region.FieldCountryID, v)
	return u
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *RegionUpsert) UpdateCountryID() *RegionUpsert {
	u.SetExcluded(region.FieldCountryID)
	return u
}

// ClearCountryID clears the value of the "country_id" field.
func (u *RegionUpsert) ClearCountryID() *RegionUpsert {
	u.SetNull(region.FieldCountryID)
	return u
}

// SetDisplaySort sets the "display_sort" field.
func (u *RegionUpsert) SetDisplaySort(v int32) *RegionUpsert {
	u.Set(region.FieldDisplaySort, v)
	return u
}

// UpdateDisplaySort sets the "display_sort" field to the value that was provided on create.
func (u *RegionUpsert) UpdateDisplaySort() *RegionUpsert {
	u.SetExcluded(region.FieldDisplaySort)
	return u
}

// AddDisplaySort adds v to the "display_sort" field.
func (u *RegionUpsert) AddDisplaySort(v int32) *RegionUpsert {
	u.Add(region.FieldDisplaySort, v)
	return u
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (u *RegionUpsert) ClearDisplaySort() *RegionUpsert {
	u.SetNull(region.FieldDisplaySort)
	return u
}

// SetStatus sets the "status" field.
func (u *RegionUpsert) SetStatus(v typex.SimpleStatus) *RegionUpsert {
	u.Set(region.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RegionUpsert) UpdateStatus() *RegionUpsert {
	u.SetExcluded(region.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *RegionUpsert) ClearStatus() *RegionUpsert {
	u.SetNull(region.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(region.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegionUpsertOne) UpdateNewValues() *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(region.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(region.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(region.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Region.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RegionUpsertOne) Ignore() *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegionUpsertOne) DoNothing() *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegionCreate.OnConflict
// documentation for more info.
func (u *RegionUpsertOne) Update(set func(*RegionUpsert)) *RegionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RegionUpsertOne) SetUpdatedBy(v int) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RegionUpsertOne) AddUpdatedBy(v int) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateUpdatedBy() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RegionUpsertOne) ClearUpdatedBy() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegionUpsertOne) SetUpdatedAt(v time.Time) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateUpdatedAt() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RegionUpsertOne) ClearUpdatedAt() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RegionUpsertOne) SetParentID(v int) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateParentID() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RegionUpsertOne) ClearParentID() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearParentID()
	})
}

// SetName sets the "name" field.
func (u *RegionUpsertOne) SetName(v string) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateName() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RegionUpsertOne) ClearName() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearName()
	})
}

// SetNameEn sets the "name_en" field.
func (u *RegionUpsertOne) SetNameEn(v string) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateNameEn() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *RegionUpsertOne) ClearNameEn() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearNameEn()
	})
}

// SetShortCode sets the "short_code" field.
func (u *RegionUpsertOne) SetShortCode(v string) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetShortCode(v)
	})
}

// UpdateShortCode sets the "short_code" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateShortCode() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateShortCode()
	})
}

// ClearShortCode clears the value of the "short_code" field.
func (u *RegionUpsertOne) ClearShortCode() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearShortCode()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *RegionUpsertOne) SetZipCode(v string) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateZipCode() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *RegionUpsertOne) ClearZipCode() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearZipCode()
	})
}

// SetCountryID sets the "country_id" field.
func (u *RegionUpsertOne) SetCountryID(v int) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateCountryID() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateCountryID()
	})
}

// ClearCountryID clears the value of the "country_id" field.
func (u *RegionUpsertOne) ClearCountryID() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearCountryID()
	})
}

// SetDisplaySort sets the "display_sort" field.
func (u *RegionUpsertOne) SetDisplaySort(v int32) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetDisplaySort(v)
	})
}

// AddDisplaySort adds v to the "display_sort" field.
func (u *RegionUpsertOne) AddDisplaySort(v int32) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.AddDisplaySort(v)
	})
}

// UpdateDisplaySort sets the "display_sort" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateDisplaySort() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateDisplaySort()
	})
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (u *RegionUpsertOne) ClearDisplaySort() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearDisplaySort()
	})
}

// SetStatus sets the "status" field.
func (u *RegionUpsertOne) SetStatus(v typex.SimpleStatus) *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RegionUpsertOne) UpdateStatus() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *RegionUpsertOne) ClearStatus() *RegionUpsertOne {
	return u.Update(func(s *RegionUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *RegionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RegionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RegionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RegionCreateBulk is the builder for creating many Region entities in bulk.
type RegionCreateBulk struct {
	config
	err      error
	builders []*RegionCreate
	conflict []sql.ConflictOption
}

// Save creates the Region entities in the database.
func (rcb *RegionCreateBulk) Save(ctx context.Context) ([]*Region, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Region, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegionCreateBulk) SaveX(ctx context.Context) []*Region {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Region.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegionUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (rcb *RegionCreateBulk) OnConflict(opts ...sql.ConflictOption) *RegionUpsertBulk {
	rcb.conflict = opts
	return &RegionUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RegionCreateBulk) OnConflictColumns(columns ...string) *RegionUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RegionUpsertBulk{
		create: rcb,
	}
}

// RegionUpsertBulk is the builder for "upsert"-ing
// a bulk of Region nodes.
type RegionUpsertBulk struct {
	create *RegionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(region.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegionUpsertBulk) UpdateNewValues() *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(region.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(region.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(region.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Region.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RegionUpsertBulk) Ignore() *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegionUpsertBulk) DoNothing() *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegionCreateBulk.OnConflict
// documentation for more info.
func (u *RegionUpsertBulk) Update(set func(*RegionUpsert)) *RegionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *RegionUpsertBulk) SetUpdatedBy(v int) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *RegionUpsertBulk) AddUpdatedBy(v int) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateUpdatedBy() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *RegionUpsertBulk) ClearUpdatedBy() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegionUpsertBulk) SetUpdatedAt(v time.Time) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateUpdatedAt() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RegionUpsertBulk) ClearUpdatedAt() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetParentID sets the "parent_id" field.
func (u *RegionUpsertBulk) SetParentID(v int) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateParentID() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *RegionUpsertBulk) ClearParentID() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearParentID()
	})
}

// SetName sets the "name" field.
func (u *RegionUpsertBulk) SetName(v string) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateName() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RegionUpsertBulk) ClearName() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearName()
	})
}

// SetNameEn sets the "name_en" field.
func (u *RegionUpsertBulk) SetNameEn(v string) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateNameEn() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *RegionUpsertBulk) ClearNameEn() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearNameEn()
	})
}

// SetShortCode sets the "short_code" field.
func (u *RegionUpsertBulk) SetShortCode(v string) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetShortCode(v)
	})
}

// UpdateShortCode sets the "short_code" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateShortCode() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateShortCode()
	})
}

// ClearShortCode clears the value of the "short_code" field.
func (u *RegionUpsertBulk) ClearShortCode() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearShortCode()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *RegionUpsertBulk) SetZipCode(v string) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateZipCode() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *RegionUpsertBulk) ClearZipCode() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearZipCode()
	})
}

// SetCountryID sets the "country_id" field.
func (u *RegionUpsertBulk) SetCountryID(v int) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetCountryID(v)
	})
}

// UpdateCountryID sets the "country_id" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateCountryID() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateCountryID()
	})
}

// ClearCountryID clears the value of the "country_id" field.
func (u *RegionUpsertBulk) ClearCountryID() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearCountryID()
	})
}

// SetDisplaySort sets the "display_sort" field.
func (u *RegionUpsertBulk) SetDisplaySort(v int32) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetDisplaySort(v)
	})
}

// AddDisplaySort adds v to the "display_sort" field.
func (u *RegionUpsertBulk) AddDisplaySort(v int32) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.AddDisplaySort(v)
	})
}

// UpdateDisplaySort sets the "display_sort" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateDisplaySort() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateDisplaySort()
	})
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (u *RegionUpsertBulk) ClearDisplaySort() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearDisplaySort()
	})
}

// SetStatus sets the "status" field.
func (u *RegionUpsertBulk) SetStatus(v typex.SimpleStatus) *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RegionUpsertBulk) UpdateStatus() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *RegionUpsertBulk) ClearStatus() *RegionUpsertBulk {
	return u.Update(func(s *RegionUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *RegionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RegionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
