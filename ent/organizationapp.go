// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationapp"
)

// OrganizationApp is the model entity for the OrganizationApp schema.
type OrganizationApp struct {
	config `json:"-"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 组织ID
	OrgID int `json:"org_id,omitempty"`
	// 应用ID
	AppID int `json:"app_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationAppQuery when eager-loading is set.
	Edges OrganizationAppEdges `json:"edges"`
}

// OrganizationAppEdges holds the relations/edges for other nodes in the graph.
type OrganizationAppEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationAppEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[0] {
		if e.App == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationAppEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[1] {
		if e.Organization == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationApp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationapp.FieldCreatedBy, organizationapp.FieldUpdatedBy, organizationapp.FieldOrgID, organizationapp.FieldAppID:
			values[i] = new(sql.NullInt64)
		case organizationapp.FieldCreatedAt, organizationapp.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrganizationApp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationApp fields.
func (oa *OrganizationApp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationapp.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				oa.CreatedBy = int(value.Int64)
			}
		case organizationapp.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		case organizationapp.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				oa.UpdatedBy = int(value.Int64)
			}
		case organizationapp.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oa.UpdatedAt = value.Time
			}
		case organizationapp.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				oa.OrgID = int(value.Int64)
			}
		case organizationapp.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				oa.AppID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryApp queries the "app" edge of the OrganizationApp entity.
func (oa *OrganizationApp) QueryApp() *AppQuery {
	return NewOrganizationAppClient(oa.config).QueryApp(oa)
}

// QueryOrganization queries the "organization" edge of the OrganizationApp entity.
func (oa *OrganizationApp) QueryOrganization() *OrganizationQuery {
	return NewOrganizationAppClient(oa.config).QueryOrganization(oa)
}

// Update returns a builder for updating this OrganizationApp.
// Note that you need to call OrganizationApp.Unwrap() before calling this method if this OrganizationApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrganizationApp) Update() *OrganizationAppUpdateOne {
	return NewOrganizationAppClient(oa.config).UpdateOne(oa)
}

// Unwrap unwraps the OrganizationApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrganizationApp) Unwrap() *OrganizationApp {
	_tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationApp is not a transactional entity")
	}
	oa.config.driver = _tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrganizationApp) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationApp(")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", oa.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", oa.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrgID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.AppID))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationApps is a parsable slice of OrganizationApp.
type OrganizationApps []*OrganizationApp
