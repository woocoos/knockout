// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgpolicy"
	"github.com/woocoos/knockout/ent/orgrole"
	"github.com/woocoos/knockout/ent/orguser"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/user"
)

// OrgUpdate is the builder for updating Org entities.
type OrgUpdate struct {
	config
	hooks    []Hook
	mutation *OrgMutation
}

// Where appends a list predicates to the OrgUpdate builder.
func (ou *OrgUpdate) Where(ps ...predicate.Org) *OrgUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OrgUpdate) SetUpdatedBy(i int) *OrgUpdate {
	ou.mutation.ResetUpdatedBy()
	ou.mutation.SetUpdatedBy(i)
	return ou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableUpdatedBy(i *int) *OrgUpdate {
	if i != nil {
		ou.SetUpdatedBy(*i)
	}
	return ou
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ou *OrgUpdate) AddUpdatedBy(i int) *OrgUpdate {
	ou.mutation.AddUpdatedBy(i)
	return ou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ou *OrgUpdate) ClearUpdatedBy() *OrgUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrgUpdate) SetUpdatedAt(t time.Time) *OrgUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableUpdatedAt(t *time.Time) *OrgUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrgUpdate) ClearUpdatedAt() *OrgUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrgUpdate) SetDeletedAt(t time.Time) *OrgUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableDeletedAt(t *time.Time) *OrgUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrgUpdate) ClearDeletedAt() *OrgUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetOwnerID sets the "owner_id" field.
func (ou *OrgUpdate) SetOwnerID(i int) *OrgUpdate {
	ou.mutation.SetOwnerID(i)
	return ou
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableOwnerID(i *int) *OrgUpdate {
	if i != nil {
		ou.SetOwnerID(*i)
	}
	return ou
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ou *OrgUpdate) ClearOwnerID() *OrgUpdate {
	ou.mutation.ClearOwnerID()
	return ou
}

// SetKind sets the "kind" field.
func (ou *OrgUpdate) SetKind(o org.Kind) *OrgUpdate {
	ou.mutation.SetKind(o)
	return ou
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableKind(o *org.Kind) *OrgUpdate {
	if o != nil {
		ou.SetKind(*o)
	}
	return ou
}

// ClearKind clears the value of the "kind" field.
func (ou *OrgUpdate) ClearKind() *OrgUpdate {
	ou.mutation.ClearKind()
	return ou
}

// SetParentID sets the "parent_id" field.
func (ou *OrgUpdate) SetParentID(i int) *OrgUpdate {
	ou.mutation.SetParentID(i)
	return ou
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableParentID(i *int) *OrgUpdate {
	if i != nil {
		ou.SetParentID(*i)
	}
	return ou
}

// SetDomain sets the "domain" field.
func (ou *OrgUpdate) SetDomain(s string) *OrgUpdate {
	ou.mutation.SetDomain(s)
	return ou
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableDomain(s *string) *OrgUpdate {
	if s != nil {
		ou.SetDomain(*s)
	}
	return ou
}

// ClearDomain clears the value of the "domain" field.
func (ou *OrgUpdate) ClearDomain() *OrgUpdate {
	ou.mutation.ClearDomain()
	return ou
}

// SetCode sets the "code" field.
func (ou *OrgUpdate) SetCode(s string) *OrgUpdate {
	ou.mutation.SetCode(s)
	return ou
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableCode(s *string) *OrgUpdate {
	if s != nil {
		ou.SetCode(*s)
	}
	return ou
}

// ClearCode clears the value of the "code" field.
func (ou *OrgUpdate) ClearCode() *OrgUpdate {
	ou.mutation.ClearCode()
	return ou
}

// SetName sets the "name" field.
func (ou *OrgUpdate) SetName(s string) *OrgUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetProfile sets the "profile" field.
func (ou *OrgUpdate) SetProfile(s string) *OrgUpdate {
	ou.mutation.SetProfile(s)
	return ou
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableProfile(s *string) *OrgUpdate {
	if s != nil {
		ou.SetProfile(*s)
	}
	return ou
}

// ClearProfile clears the value of the "profile" field.
func (ou *OrgUpdate) ClearProfile() *OrgUpdate {
	ou.mutation.ClearProfile()
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrgUpdate) SetStatus(ts typex.SimpleStatus) *OrgUpdate {
	ou.mutation.SetStatus(ts)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableStatus(ts *typex.SimpleStatus) *OrgUpdate {
	if ts != nil {
		ou.SetStatus(*ts)
	}
	return ou
}

// ClearStatus clears the value of the "status" field.
func (ou *OrgUpdate) ClearStatus() *OrgUpdate {
	ou.mutation.ClearStatus()
	return ou
}

// SetPath sets the "path" field.
func (ou *OrgUpdate) SetPath(s string) *OrgUpdate {
	ou.mutation.SetPath(s)
	return ou
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ou *OrgUpdate) SetNillablePath(s *string) *OrgUpdate {
	if s != nil {
		ou.SetPath(*s)
	}
	return ou
}

// ClearPath clears the value of the "path" field.
func (ou *OrgUpdate) ClearPath() *OrgUpdate {
	ou.mutation.ClearPath()
	return ou
}

// SetDisplaySort sets the "display_sort" field.
func (ou *OrgUpdate) SetDisplaySort(i int32) *OrgUpdate {
	ou.mutation.ResetDisplaySort()
	ou.mutation.SetDisplaySort(i)
	return ou
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableDisplaySort(i *int32) *OrgUpdate {
	if i != nil {
		ou.SetDisplaySort(*i)
	}
	return ou
}

// AddDisplaySort adds i to the "display_sort" field.
func (ou *OrgUpdate) AddDisplaySort(i int32) *OrgUpdate {
	ou.mutation.AddDisplaySort(i)
	return ou
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (ou *OrgUpdate) ClearDisplaySort() *OrgUpdate {
	ou.mutation.ClearDisplaySort()
	return ou
}

// SetCountryCode sets the "country_code" field.
func (ou *OrgUpdate) SetCountryCode(s string) *OrgUpdate {
	ou.mutation.SetCountryCode(s)
	return ou
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableCountryCode(s *string) *OrgUpdate {
	if s != nil {
		ou.SetCountryCode(*s)
	}
	return ou
}

// ClearCountryCode clears the value of the "country_code" field.
func (ou *OrgUpdate) ClearCountryCode() *OrgUpdate {
	ou.mutation.ClearCountryCode()
	return ou
}

// SetTimezone sets the "timezone" field.
func (ou *OrgUpdate) SetTimezone(s string) *OrgUpdate {
	ou.mutation.SetTimezone(s)
	return ou
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ou *OrgUpdate) SetNillableTimezone(s *string) *OrgUpdate {
	if s != nil {
		ou.SetTimezone(*s)
	}
	return ou
}

// ClearTimezone clears the value of the "timezone" field.
func (ou *OrgUpdate) ClearTimezone() *OrgUpdate {
	ou.mutation.ClearTimezone()
	return ou
}

// SetParent sets the "parent" edge to the Org entity.
func (ou *OrgUpdate) SetParent(o *Org) *OrgUpdate {
	return ou.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Org entity by IDs.
func (ou *OrgUpdate) AddChildIDs(ids ...int) *OrgUpdate {
	ou.mutation.AddChildIDs(ids...)
	return ou
}

// AddChildren adds the "children" edges to the Org entity.
func (ou *OrgUpdate) AddChildren(o ...*Org) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddChildIDs(ids...)
}

// SetOwner sets the "owner" edge to the User entity.
func (ou *OrgUpdate) SetOwner(u *User) *OrgUpdate {
	return ou.SetOwnerID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ou *OrgUpdate) AddUserIDs(ids ...int) *OrgUpdate {
	ou.mutation.AddUserIDs(ids...)
	return ou
}

// AddUsers adds the "users" edges to the User entity.
func (ou *OrgUpdate) AddUsers(u ...*User) *OrgUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserIDs(ids...)
}

// AddRolesAndGroupIDs adds the "roles_and_groups" edge to the OrgRole entity by IDs.
func (ou *OrgUpdate) AddRolesAndGroupIDs(ids ...int) *OrgUpdate {
	ou.mutation.AddRolesAndGroupIDs(ids...)
	return ou
}

// AddRolesAndGroups adds the "roles_and_groups" edges to the OrgRole entity.
func (ou *OrgUpdate) AddRolesAndGroups(o ...*OrgRole) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddRolesAndGroupIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ou *OrgUpdate) AddPermissionIDs(ids ...int) *OrgUpdate {
	ou.mutation.AddPermissionIDs(ids...)
	return ou
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ou *OrgUpdate) AddPermissions(p ...*Permission) *OrgUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPermissionIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the OrgPolicy entity by IDs.
func (ou *OrgUpdate) AddPolicyIDs(ids ...int) *OrgUpdate {
	ou.mutation.AddPolicyIDs(ids...)
	return ou
}

// AddPolicies adds the "policies" edges to the OrgPolicy entity.
func (ou *OrgUpdate) AddPolicies(o ...*OrgPolicy) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddPolicyIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the App entity by IDs.
func (ou *OrgUpdate) AddAppIDs(ids ...int) *OrgUpdate {
	ou.mutation.AddAppIDs(ids...)
	return ou
}

// AddApps adds the "apps" edges to the App entity.
func (ou *OrgUpdate) AddApps(a ...*App) *OrgUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.AddAppIDs(ids...)
}

// AddOrgUserIDs adds the "org_user" edge to the OrgUser entity by IDs.
func (ou *OrgUpdate) AddOrgUserIDs(ids ...int) *OrgUpdate {
	ou.mutation.AddOrgUserIDs(ids...)
	return ou
}

// AddOrgUser adds the "org_user" edges to the OrgUser entity.
func (ou *OrgUpdate) AddOrgUser(o ...*OrgUser) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrgUserIDs(ids...)
}

// Mutation returns the OrgMutation object of the builder.
func (ou *OrgUpdate) Mutation() *OrgMutation {
	return ou.mutation
}

// ClearParent clears the "parent" edge to the Org entity.
func (ou *OrgUpdate) ClearParent() *OrgUpdate {
	ou.mutation.ClearParent()
	return ou
}

// ClearChildren clears all "children" edges to the Org entity.
func (ou *OrgUpdate) ClearChildren() *OrgUpdate {
	ou.mutation.ClearChildren()
	return ou
}

// RemoveChildIDs removes the "children" edge to Org entities by IDs.
func (ou *OrgUpdate) RemoveChildIDs(ids ...int) *OrgUpdate {
	ou.mutation.RemoveChildIDs(ids...)
	return ou
}

// RemoveChildren removes "children" edges to Org entities.
func (ou *OrgUpdate) RemoveChildren(o ...*Org) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveChildIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (ou *OrgUpdate) ClearOwner() *OrgUpdate {
	ou.mutation.ClearOwner()
	return ou
}

// ClearUsers clears all "users" edges to the User entity.
func (ou *OrgUpdate) ClearUsers() *OrgUpdate {
	ou.mutation.ClearUsers()
	return ou
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ou *OrgUpdate) RemoveUserIDs(ids ...int) *OrgUpdate {
	ou.mutation.RemoveUserIDs(ids...)
	return ou
}

// RemoveUsers removes "users" edges to User entities.
func (ou *OrgUpdate) RemoveUsers(u ...*User) *OrgUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserIDs(ids...)
}

// ClearRolesAndGroups clears all "roles_and_groups" edges to the OrgRole entity.
func (ou *OrgUpdate) ClearRolesAndGroups() *OrgUpdate {
	ou.mutation.ClearRolesAndGroups()
	return ou
}

// RemoveRolesAndGroupIDs removes the "roles_and_groups" edge to OrgRole entities by IDs.
func (ou *OrgUpdate) RemoveRolesAndGroupIDs(ids ...int) *OrgUpdate {
	ou.mutation.RemoveRolesAndGroupIDs(ids...)
	return ou
}

// RemoveRolesAndGroups removes "roles_and_groups" edges to OrgRole entities.
func (ou *OrgUpdate) RemoveRolesAndGroups(o ...*OrgRole) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveRolesAndGroupIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ou *OrgUpdate) ClearPermissions() *OrgUpdate {
	ou.mutation.ClearPermissions()
	return ou
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ou *OrgUpdate) RemovePermissionIDs(ids ...int) *OrgUpdate {
	ou.mutation.RemovePermissionIDs(ids...)
	return ou
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ou *OrgUpdate) RemovePermissions(p ...*Permission) *OrgUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePermissionIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the OrgPolicy entity.
func (ou *OrgUpdate) ClearPolicies() *OrgUpdate {
	ou.mutation.ClearPolicies()
	return ou
}

// RemovePolicyIDs removes the "policies" edge to OrgPolicy entities by IDs.
func (ou *OrgUpdate) RemovePolicyIDs(ids ...int) *OrgUpdate {
	ou.mutation.RemovePolicyIDs(ids...)
	return ou
}

// RemovePolicies removes "policies" edges to OrgPolicy entities.
func (ou *OrgUpdate) RemovePolicies(o ...*OrgPolicy) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemovePolicyIDs(ids...)
}

// ClearApps clears all "apps" edges to the App entity.
func (ou *OrgUpdate) ClearApps() *OrgUpdate {
	ou.mutation.ClearApps()
	return ou
}

// RemoveAppIDs removes the "apps" edge to App entities by IDs.
func (ou *OrgUpdate) RemoveAppIDs(ids ...int) *OrgUpdate {
	ou.mutation.RemoveAppIDs(ids...)
	return ou
}

// RemoveApps removes "apps" edges to App entities.
func (ou *OrgUpdate) RemoveApps(a ...*App) *OrgUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.RemoveAppIDs(ids...)
}

// ClearOrgUser clears all "org_user" edges to the OrgUser entity.
func (ou *OrgUpdate) ClearOrgUser() *OrgUpdate {
	ou.mutation.ClearOrgUser()
	return ou
}

// RemoveOrgUserIDs removes the "org_user" edge to OrgUser entities by IDs.
func (ou *OrgUpdate) RemoveOrgUserIDs(ids ...int) *OrgUpdate {
	ou.mutation.RemoveOrgUserIDs(ids...)
	return ou
}

// RemoveOrgUser removes "org_user" edges to OrgUser entities.
func (ou *OrgUpdate) RemoveOrgUser(o ...*OrgUser) *OrgUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrgUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrgMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrgUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrgUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrgUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrgUpdate) check() error {
	if v, ok := ou.mutation.Kind(); ok {
		if err := org.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Org.kind": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Domain(); ok {
		if err := org.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Org.domain": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Code(); ok {
		if err := org.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Org.code": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Name(); ok {
		if err := org.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Org.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := org.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Org.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.CountryCode(); ok {
		if err := org.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`ent: validator failed for field "Org.country_code": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Timezone(); ok {
		if err := org.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "Org.timezone": %w`, err)}
		}
	}
	if _, ok := ou.mutation.ParentID(); ou.mutation.ParentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Org.parent"`)
	}
	return nil
}

func (ou *OrgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(org.Table, org.Columns, sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.SetField(org.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(org.FieldUpdatedBy, field.TypeInt, value)
	}
	if ou.mutation.UpdatedByCleared() {
		_spec.ClearField(org.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(org.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(org.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(org.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(org.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Kind(); ok {
		_spec.SetField(org.FieldKind, field.TypeEnum, value)
	}
	if ou.mutation.KindCleared() {
		_spec.ClearField(org.FieldKind, field.TypeEnum)
	}
	if value, ok := ou.mutation.Domain(); ok {
		_spec.SetField(org.FieldDomain, field.TypeString, value)
	}
	if ou.mutation.DomainCleared() {
		_spec.ClearField(org.FieldDomain, field.TypeString)
	}
	if value, ok := ou.mutation.Code(); ok {
		_spec.SetField(org.FieldCode, field.TypeString, value)
	}
	if ou.mutation.CodeCleared() {
		_spec.ClearField(org.FieldCode, field.TypeString)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(org.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Profile(); ok {
		_spec.SetField(org.FieldProfile, field.TypeString, value)
	}
	if ou.mutation.ProfileCleared() {
		_spec.ClearField(org.FieldProfile, field.TypeString)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(org.FieldStatus, field.TypeEnum, value)
	}
	if ou.mutation.StatusCleared() {
		_spec.ClearField(org.FieldStatus, field.TypeEnum)
	}
	if value, ok := ou.mutation.Path(); ok {
		_spec.SetField(org.FieldPath, field.TypeString, value)
	}
	if ou.mutation.PathCleared() {
		_spec.ClearField(org.FieldPath, field.TypeString)
	}
	if value, ok := ou.mutation.DisplaySort(); ok {
		_spec.SetField(org.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedDisplaySort(); ok {
		_spec.AddField(org.FieldDisplaySort, field.TypeInt32, value)
	}
	if ou.mutation.DisplaySortCleared() {
		_spec.ClearField(org.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := ou.mutation.CountryCode(); ok {
		_spec.SetField(org.FieldCountryCode, field.TypeString, value)
	}
	if ou.mutation.CountryCodeCleared() {
		_spec.ClearField(org.FieldCountryCode, field.TypeString)
	}
	if value, ok := ou.mutation.Timezone(); ok {
		_spec.SetField(org.FieldTimezone, field.TypeString, value)
	}
	if ou.mutation.TimezoneCleared() {
		_spec.ClearField(org.FieldTimezone, field.TypeString)
	}
	if ou.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   org.ParentTable,
			Columns: []string{org.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   org.ParentTable,
			Columns: []string{org.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.ChildrenTable,
			Columns: []string{org.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.ChildrenTable,
			Columns: []string{org.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.ChildrenTable,
			Columns: []string{org.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   org.OwnerTable,
			Columns: []string{org.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   org.OwnerTable,
			Columns: []string{org.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: org.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		createE := &OrgUserCreate{config: ou.config, mutation: newOrgUserMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: org.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: ou.config, mutation: newOrgUserMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: org.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: ou.config, mutation: newOrgUserMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.RolesAndGroupsTable,
			Columns: []string{org.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRolesAndGroupsIDs(); len(nodes) > 0 && !ou.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.RolesAndGroupsTable,
			Columns: []string{org.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RolesAndGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.RolesAndGroupsTable,
			Columns: []string{org.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PermissionsTable,
			Columns: []string{org.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ou.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PermissionsTable,
			Columns: []string{org.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PermissionsTable,
			Columns: []string{org.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PoliciesTable,
			Columns: []string{org.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgpolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !ou.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PoliciesTable,
			Columns: []string{org.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PoliciesTable,
			Columns: []string{org.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.AppsTable,
			Columns: org.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		createE := &OrgAppCreate{config: ou.config, mutation: newOrgAppMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAppsIDs(); len(nodes) > 0 && !ou.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.AppsTable,
			Columns: org.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: ou.config, mutation: newOrgAppMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.AppsTable,
			Columns: org.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: ou.config, mutation: newOrgAppMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgUserTable,
			Columns: []string{org.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orguser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrgUserIDs(); len(nodes) > 0 && !ou.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgUserTable,
			Columns: []string{org.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orguser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrgUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgUserTable,
			Columns: []string{org.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orguser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{org.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrgUpdateOne is the builder for updating a single Org entity.
type OrgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OrgUpdateOne) SetUpdatedBy(i int) *OrgUpdateOne {
	ouo.mutation.ResetUpdatedBy()
	ouo.mutation.SetUpdatedBy(i)
	return ouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableUpdatedBy(i *int) *OrgUpdateOne {
	if i != nil {
		ouo.SetUpdatedBy(*i)
	}
	return ouo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ouo *OrgUpdateOne) AddUpdatedBy(i int) *OrgUpdateOne {
	ouo.mutation.AddUpdatedBy(i)
	return ouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ouo *OrgUpdateOne) ClearUpdatedBy() *OrgUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrgUpdateOne) SetUpdatedAt(t time.Time) *OrgUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableUpdatedAt(t *time.Time) *OrgUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrgUpdateOne) ClearUpdatedAt() *OrgUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrgUpdateOne) SetDeletedAt(t time.Time) *OrgUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrgUpdateOne) ClearDeletedAt() *OrgUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetOwnerID sets the "owner_id" field.
func (ouo *OrgUpdateOne) SetOwnerID(i int) *OrgUpdateOne {
	ouo.mutation.SetOwnerID(i)
	return ouo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableOwnerID(i *int) *OrgUpdateOne {
	if i != nil {
		ouo.SetOwnerID(*i)
	}
	return ouo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ouo *OrgUpdateOne) ClearOwnerID() *OrgUpdateOne {
	ouo.mutation.ClearOwnerID()
	return ouo
}

// SetKind sets the "kind" field.
func (ouo *OrgUpdateOne) SetKind(o org.Kind) *OrgUpdateOne {
	ouo.mutation.SetKind(o)
	return ouo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableKind(o *org.Kind) *OrgUpdateOne {
	if o != nil {
		ouo.SetKind(*o)
	}
	return ouo
}

// ClearKind clears the value of the "kind" field.
func (ouo *OrgUpdateOne) ClearKind() *OrgUpdateOne {
	ouo.mutation.ClearKind()
	return ouo
}

// SetParentID sets the "parent_id" field.
func (ouo *OrgUpdateOne) SetParentID(i int) *OrgUpdateOne {
	ouo.mutation.SetParentID(i)
	return ouo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableParentID(i *int) *OrgUpdateOne {
	if i != nil {
		ouo.SetParentID(*i)
	}
	return ouo
}

// SetDomain sets the "domain" field.
func (ouo *OrgUpdateOne) SetDomain(s string) *OrgUpdateOne {
	ouo.mutation.SetDomain(s)
	return ouo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableDomain(s *string) *OrgUpdateOne {
	if s != nil {
		ouo.SetDomain(*s)
	}
	return ouo
}

// ClearDomain clears the value of the "domain" field.
func (ouo *OrgUpdateOne) ClearDomain() *OrgUpdateOne {
	ouo.mutation.ClearDomain()
	return ouo
}

// SetCode sets the "code" field.
func (ouo *OrgUpdateOne) SetCode(s string) *OrgUpdateOne {
	ouo.mutation.SetCode(s)
	return ouo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableCode(s *string) *OrgUpdateOne {
	if s != nil {
		ouo.SetCode(*s)
	}
	return ouo
}

// ClearCode clears the value of the "code" field.
func (ouo *OrgUpdateOne) ClearCode() *OrgUpdateOne {
	ouo.mutation.ClearCode()
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrgUpdateOne) SetName(s string) *OrgUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetProfile sets the "profile" field.
func (ouo *OrgUpdateOne) SetProfile(s string) *OrgUpdateOne {
	ouo.mutation.SetProfile(s)
	return ouo
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableProfile(s *string) *OrgUpdateOne {
	if s != nil {
		ouo.SetProfile(*s)
	}
	return ouo
}

// ClearProfile clears the value of the "profile" field.
func (ouo *OrgUpdateOne) ClearProfile() *OrgUpdateOne {
	ouo.mutation.ClearProfile()
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrgUpdateOne) SetStatus(ts typex.SimpleStatus) *OrgUpdateOne {
	ouo.mutation.SetStatus(ts)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *OrgUpdateOne {
	if ts != nil {
		ouo.SetStatus(*ts)
	}
	return ouo
}

// ClearStatus clears the value of the "status" field.
func (ouo *OrgUpdateOne) ClearStatus() *OrgUpdateOne {
	ouo.mutation.ClearStatus()
	return ouo
}

// SetPath sets the "path" field.
func (ouo *OrgUpdateOne) SetPath(s string) *OrgUpdateOne {
	ouo.mutation.SetPath(s)
	return ouo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillablePath(s *string) *OrgUpdateOne {
	if s != nil {
		ouo.SetPath(*s)
	}
	return ouo
}

// ClearPath clears the value of the "path" field.
func (ouo *OrgUpdateOne) ClearPath() *OrgUpdateOne {
	ouo.mutation.ClearPath()
	return ouo
}

// SetDisplaySort sets the "display_sort" field.
func (ouo *OrgUpdateOne) SetDisplaySort(i int32) *OrgUpdateOne {
	ouo.mutation.ResetDisplaySort()
	ouo.mutation.SetDisplaySort(i)
	return ouo
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableDisplaySort(i *int32) *OrgUpdateOne {
	if i != nil {
		ouo.SetDisplaySort(*i)
	}
	return ouo
}

// AddDisplaySort adds i to the "display_sort" field.
func (ouo *OrgUpdateOne) AddDisplaySort(i int32) *OrgUpdateOne {
	ouo.mutation.AddDisplaySort(i)
	return ouo
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (ouo *OrgUpdateOne) ClearDisplaySort() *OrgUpdateOne {
	ouo.mutation.ClearDisplaySort()
	return ouo
}

// SetCountryCode sets the "country_code" field.
func (ouo *OrgUpdateOne) SetCountryCode(s string) *OrgUpdateOne {
	ouo.mutation.SetCountryCode(s)
	return ouo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableCountryCode(s *string) *OrgUpdateOne {
	if s != nil {
		ouo.SetCountryCode(*s)
	}
	return ouo
}

// ClearCountryCode clears the value of the "country_code" field.
func (ouo *OrgUpdateOne) ClearCountryCode() *OrgUpdateOne {
	ouo.mutation.ClearCountryCode()
	return ouo
}

// SetTimezone sets the "timezone" field.
func (ouo *OrgUpdateOne) SetTimezone(s string) *OrgUpdateOne {
	ouo.mutation.SetTimezone(s)
	return ouo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ouo *OrgUpdateOne) SetNillableTimezone(s *string) *OrgUpdateOne {
	if s != nil {
		ouo.SetTimezone(*s)
	}
	return ouo
}

// ClearTimezone clears the value of the "timezone" field.
func (ouo *OrgUpdateOne) ClearTimezone() *OrgUpdateOne {
	ouo.mutation.ClearTimezone()
	return ouo
}

// SetParent sets the "parent" edge to the Org entity.
func (ouo *OrgUpdateOne) SetParent(o *Org) *OrgUpdateOne {
	return ouo.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Org entity by IDs.
func (ouo *OrgUpdateOne) AddChildIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.AddChildIDs(ids...)
	return ouo
}

// AddChildren adds the "children" edges to the Org entity.
func (ouo *OrgUpdateOne) AddChildren(o ...*Org) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddChildIDs(ids...)
}

// SetOwner sets the "owner" edge to the User entity.
func (ouo *OrgUpdateOne) SetOwner(u *User) *OrgUpdateOne {
	return ouo.SetOwnerID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ouo *OrgUpdateOne) AddUserIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.AddUserIDs(ids...)
	return ouo
}

// AddUsers adds the "users" edges to the User entity.
func (ouo *OrgUpdateOne) AddUsers(u ...*User) *OrgUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserIDs(ids...)
}

// AddRolesAndGroupIDs adds the "roles_and_groups" edge to the OrgRole entity by IDs.
func (ouo *OrgUpdateOne) AddRolesAndGroupIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.AddRolesAndGroupIDs(ids...)
	return ouo
}

// AddRolesAndGroups adds the "roles_and_groups" edges to the OrgRole entity.
func (ouo *OrgUpdateOne) AddRolesAndGroups(o ...*OrgRole) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddRolesAndGroupIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (ouo *OrgUpdateOne) AddPermissionIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.AddPermissionIDs(ids...)
	return ouo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (ouo *OrgUpdateOne) AddPermissions(p ...*Permission) *OrgUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPermissionIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the OrgPolicy entity by IDs.
func (ouo *OrgUpdateOne) AddPolicyIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.AddPolicyIDs(ids...)
	return ouo
}

// AddPolicies adds the "policies" edges to the OrgPolicy entity.
func (ouo *OrgUpdateOne) AddPolicies(o ...*OrgPolicy) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddPolicyIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the App entity by IDs.
func (ouo *OrgUpdateOne) AddAppIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.AddAppIDs(ids...)
	return ouo
}

// AddApps adds the "apps" edges to the App entity.
func (ouo *OrgUpdateOne) AddApps(a ...*App) *OrgUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.AddAppIDs(ids...)
}

// AddOrgUserIDs adds the "org_user" edge to the OrgUser entity by IDs.
func (ouo *OrgUpdateOne) AddOrgUserIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.AddOrgUserIDs(ids...)
	return ouo
}

// AddOrgUser adds the "org_user" edges to the OrgUser entity.
func (ouo *OrgUpdateOne) AddOrgUser(o ...*OrgUser) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrgUserIDs(ids...)
}

// Mutation returns the OrgMutation object of the builder.
func (ouo *OrgUpdateOne) Mutation() *OrgMutation {
	return ouo.mutation
}

// ClearParent clears the "parent" edge to the Org entity.
func (ouo *OrgUpdateOne) ClearParent() *OrgUpdateOne {
	ouo.mutation.ClearParent()
	return ouo
}

// ClearChildren clears all "children" edges to the Org entity.
func (ouo *OrgUpdateOne) ClearChildren() *OrgUpdateOne {
	ouo.mutation.ClearChildren()
	return ouo
}

// RemoveChildIDs removes the "children" edge to Org entities by IDs.
func (ouo *OrgUpdateOne) RemoveChildIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.RemoveChildIDs(ids...)
	return ouo
}

// RemoveChildren removes "children" edges to Org entities.
func (ouo *OrgUpdateOne) RemoveChildren(o ...*Org) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveChildIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (ouo *OrgUpdateOne) ClearOwner() *OrgUpdateOne {
	ouo.mutation.ClearOwner()
	return ouo
}

// ClearUsers clears all "users" edges to the User entity.
func (ouo *OrgUpdateOne) ClearUsers() *OrgUpdateOne {
	ouo.mutation.ClearUsers()
	return ouo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ouo *OrgUpdateOne) RemoveUserIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.RemoveUserIDs(ids...)
	return ouo
}

// RemoveUsers removes "users" edges to User entities.
func (ouo *OrgUpdateOne) RemoveUsers(u ...*User) *OrgUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserIDs(ids...)
}

// ClearRolesAndGroups clears all "roles_and_groups" edges to the OrgRole entity.
func (ouo *OrgUpdateOne) ClearRolesAndGroups() *OrgUpdateOne {
	ouo.mutation.ClearRolesAndGroups()
	return ouo
}

// RemoveRolesAndGroupIDs removes the "roles_and_groups" edge to OrgRole entities by IDs.
func (ouo *OrgUpdateOne) RemoveRolesAndGroupIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.RemoveRolesAndGroupIDs(ids...)
	return ouo
}

// RemoveRolesAndGroups removes "roles_and_groups" edges to OrgRole entities.
func (ouo *OrgUpdateOne) RemoveRolesAndGroups(o ...*OrgRole) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveRolesAndGroupIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (ouo *OrgUpdateOne) ClearPermissions() *OrgUpdateOne {
	ouo.mutation.ClearPermissions()
	return ouo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (ouo *OrgUpdateOne) RemovePermissionIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.RemovePermissionIDs(ids...)
	return ouo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (ouo *OrgUpdateOne) RemovePermissions(p ...*Permission) *OrgUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePermissionIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the OrgPolicy entity.
func (ouo *OrgUpdateOne) ClearPolicies() *OrgUpdateOne {
	ouo.mutation.ClearPolicies()
	return ouo
}

// RemovePolicyIDs removes the "policies" edge to OrgPolicy entities by IDs.
func (ouo *OrgUpdateOne) RemovePolicyIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.RemovePolicyIDs(ids...)
	return ouo
}

// RemovePolicies removes "policies" edges to OrgPolicy entities.
func (ouo *OrgUpdateOne) RemovePolicies(o ...*OrgPolicy) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemovePolicyIDs(ids...)
}

// ClearApps clears all "apps" edges to the App entity.
func (ouo *OrgUpdateOne) ClearApps() *OrgUpdateOne {
	ouo.mutation.ClearApps()
	return ouo
}

// RemoveAppIDs removes the "apps" edge to App entities by IDs.
func (ouo *OrgUpdateOne) RemoveAppIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.RemoveAppIDs(ids...)
	return ouo
}

// RemoveApps removes "apps" edges to App entities.
func (ouo *OrgUpdateOne) RemoveApps(a ...*App) *OrgUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.RemoveAppIDs(ids...)
}

// ClearOrgUser clears all "org_user" edges to the OrgUser entity.
func (ouo *OrgUpdateOne) ClearOrgUser() *OrgUpdateOne {
	ouo.mutation.ClearOrgUser()
	return ouo
}

// RemoveOrgUserIDs removes the "org_user" edge to OrgUser entities by IDs.
func (ouo *OrgUpdateOne) RemoveOrgUserIDs(ids ...int) *OrgUpdateOne {
	ouo.mutation.RemoveOrgUserIDs(ids...)
	return ouo
}

// RemoveOrgUser removes "org_user" edges to OrgUser entities.
func (ouo *OrgUpdateOne) RemoveOrgUser(o ...*OrgUser) *OrgUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrgUserIDs(ids...)
}

// Where appends a list predicates to the OrgUpdate builder.
func (ouo *OrgUpdateOne) Where(ps ...predicate.Org) *OrgUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrgUpdateOne) Select(field string, fields ...string) *OrgUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Org entity.
func (ouo *OrgUpdateOne) Save(ctx context.Context) (*Org, error) {
	return withHooks[*Org, OrgMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrgUpdateOne) SaveX(ctx context.Context) *Org {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrgUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrgUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrgUpdateOne) check() error {
	if v, ok := ouo.mutation.Kind(); ok {
		if err := org.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Org.kind": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Domain(); ok {
		if err := org.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Org.domain": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Code(); ok {
		if err := org.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Org.code": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Name(); ok {
		if err := org.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Org.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := org.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Org.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.CountryCode(); ok {
		if err := org.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "country_code", err: fmt.Errorf(`ent: validator failed for field "Org.country_code": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Timezone(); ok {
		if err := org.TimezoneValidator(v); err != nil {
			return &ValidationError{Name: "timezone", err: fmt.Errorf(`ent: validator failed for field "Org.timezone": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.ParentID(); ouo.mutation.ParentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Org.parent"`)
	}
	return nil
}

func (ouo *OrgUpdateOne) sqlSave(ctx context.Context) (_node *Org, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(org.Table, org.Columns, sqlgraph.NewFieldSpec(org.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Org.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, org.FieldID)
		for _, f := range fields {
			if !org.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != org.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.SetField(org.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(org.FieldUpdatedBy, field.TypeInt, value)
	}
	if ouo.mutation.UpdatedByCleared() {
		_spec.ClearField(org.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(org.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(org.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(org.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(org.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Kind(); ok {
		_spec.SetField(org.FieldKind, field.TypeEnum, value)
	}
	if ouo.mutation.KindCleared() {
		_spec.ClearField(org.FieldKind, field.TypeEnum)
	}
	if value, ok := ouo.mutation.Domain(); ok {
		_spec.SetField(org.FieldDomain, field.TypeString, value)
	}
	if ouo.mutation.DomainCleared() {
		_spec.ClearField(org.FieldDomain, field.TypeString)
	}
	if value, ok := ouo.mutation.Code(); ok {
		_spec.SetField(org.FieldCode, field.TypeString, value)
	}
	if ouo.mutation.CodeCleared() {
		_spec.ClearField(org.FieldCode, field.TypeString)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(org.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Profile(); ok {
		_spec.SetField(org.FieldProfile, field.TypeString, value)
	}
	if ouo.mutation.ProfileCleared() {
		_spec.ClearField(org.FieldProfile, field.TypeString)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(org.FieldStatus, field.TypeEnum, value)
	}
	if ouo.mutation.StatusCleared() {
		_spec.ClearField(org.FieldStatus, field.TypeEnum)
	}
	if value, ok := ouo.mutation.Path(); ok {
		_spec.SetField(org.FieldPath, field.TypeString, value)
	}
	if ouo.mutation.PathCleared() {
		_spec.ClearField(org.FieldPath, field.TypeString)
	}
	if value, ok := ouo.mutation.DisplaySort(); ok {
		_spec.SetField(org.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedDisplaySort(); ok {
		_spec.AddField(org.FieldDisplaySort, field.TypeInt32, value)
	}
	if ouo.mutation.DisplaySortCleared() {
		_spec.ClearField(org.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := ouo.mutation.CountryCode(); ok {
		_spec.SetField(org.FieldCountryCode, field.TypeString, value)
	}
	if ouo.mutation.CountryCodeCleared() {
		_spec.ClearField(org.FieldCountryCode, field.TypeString)
	}
	if value, ok := ouo.mutation.Timezone(); ok {
		_spec.SetField(org.FieldTimezone, field.TypeString, value)
	}
	if ouo.mutation.TimezoneCleared() {
		_spec.ClearField(org.FieldTimezone, field.TypeString)
	}
	if ouo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   org.ParentTable,
			Columns: []string{org.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   org.ParentTable,
			Columns: []string{org.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.ChildrenTable,
			Columns: []string{org.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.ChildrenTable,
			Columns: []string{org.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.ChildrenTable,
			Columns: []string{org.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: org.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   org.OwnerTable,
			Columns: []string{org.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   org.OwnerTable,
			Columns: []string{org.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: org.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		createE := &OrgUserCreate{config: ouo.config, mutation: newOrgUserMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: org.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: ouo.config, mutation: newOrgUserMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.UsersTable,
			Columns: org.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgUserCreate{config: ouo.config, mutation: newOrgUserMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.RolesAndGroupsTable,
			Columns: []string{org.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRolesAndGroupsIDs(); len(nodes) > 0 && !ouo.mutation.RolesAndGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.RolesAndGroupsTable,
			Columns: []string{org.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RolesAndGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.RolesAndGroupsTable,
			Columns: []string{org.RolesAndGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PermissionsTable,
			Columns: []string{org.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !ouo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PermissionsTable,
			Columns: []string{org.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PermissionsTable,
			Columns: []string{org.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: permission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PoliciesTable,
			Columns: []string{org.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgpolicy.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !ouo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PoliciesTable,
			Columns: []string{org.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   org.PoliciesTable,
			Columns: []string{org.PoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orgpolicy.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.AppsTable,
			Columns: org.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		createE := &OrgAppCreate{config: ouo.config, mutation: newOrgAppMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAppsIDs(); len(nodes) > 0 && !ouo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.AppsTable,
			Columns: org.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: ouo.config, mutation: newOrgAppMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   org.AppsTable,
			Columns: org.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgAppCreate{config: ouo.config, mutation: newOrgAppMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgUserTable,
			Columns: []string{org.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orguser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrgUserIDs(); len(nodes) > 0 && !ouo.mutation.OrgUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgUserTable,
			Columns: []string{org.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orguser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrgUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   org.OrgUserTable,
			Columns: []string{org.OrgUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orguser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Org{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{org.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
