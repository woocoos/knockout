// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/country"
	"github.com/woocoos/knockout/ent/region"
)

// Region is the model entity for the Region schema.
type Region struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 父id，0为顶级
	ParentID int `json:"parent_id,omitempty"`
	// 地区中文名称
	Name string `json:"name,omitempty"`
	// 地区英文名称
	NameEn string `json:"name_en,omitempty"`
	// 编码
	ShortCode string `json:"short_code,omitempty"`
	// 邮政编码
	ZipCode string `json:"zip_code,omitempty"`
	// 国家id
	CountryID int `json:"country_id,omitempty"`
	// DisplaySort holds the value of the "display_sort" field.
	DisplaySort int32 `json:"display_sort,omitempty"`
	// 状态
	Status typex.SimpleStatus `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegionQuery when eager-loading is set.
	Edges        RegionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RegionEdges holds the relations/edges for other nodes in the graph.
type RegionEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Region `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Region `json:"children,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedChildren map[string][]*Region
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegionEdges) ParentOrErr() (*Region, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: region.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) ChildrenOrErr() ([]*Region, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegionEdges) CountryOrErr() (*Country, error) {
	if e.Country != nil {
		return e.Country, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: country.Label}
	}
	return nil, &NotLoadedError{edge: "country"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Region) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case region.FieldID, region.FieldCreatedBy, region.FieldUpdatedBy, region.FieldParentID, region.FieldCountryID, region.FieldDisplaySort:
			values[i] = new(sql.NullInt64)
		case region.FieldName, region.FieldNameEn, region.FieldShortCode, region.FieldZipCode, region.FieldStatus:
			values[i] = new(sql.NullString)
		case region.FieldCreatedAt, region.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Region fields.
func (r *Region) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case region.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case region.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				r.CreatedBy = int(value.Int64)
			}
		case region.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case region.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				r.UpdatedBy = int(value.Int64)
			}
		case region.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case region.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				r.ParentID = int(value.Int64)
			}
		case region.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case region.FieldNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_en", values[i])
			} else if value.Valid {
				r.NameEn = value.String
			}
		case region.FieldShortCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_code", values[i])
			} else if value.Valid {
				r.ShortCode = value.String
			}
		case region.FieldZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip_code", values[i])
			} else if value.Valid {
				r.ZipCode = value.String
			}
		case region.FieldCountryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field country_id", values[i])
			} else if value.Valid {
				r.CountryID = int(value.Int64)
			}
		case region.FieldDisplaySort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_sort", values[i])
			} else if value.Valid {
				r.DisplaySort = int32(value.Int64)
			}
		case region.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = typex.SimpleStatus(value.String)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Region.
// This includes values selected through modifiers, order, etc.
func (r *Region) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Region entity.
func (r *Region) QueryParent() *RegionQuery {
	return NewRegionClient(r.config).QueryParent(r)
}

// QueryChildren queries the "children" edge of the Region entity.
func (r *Region) QueryChildren() *RegionQuery {
	return NewRegionClient(r.config).QueryChildren(r)
}

// QueryCountry queries the "country" edge of the Region entity.
func (r *Region) QueryCountry() *CountryQuery {
	return NewRegionClient(r.config).QueryCountry(r)
}

// Update returns a builder for updating this Region.
// Note that you need to call Region.Unwrap() before calling this method if this Region
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Region) Update() *RegionUpdateOne {
	return NewRegionClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Region entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Region) Unwrap() *Region {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Region is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Region) String() string {
	var builder strings.Builder
	builder.WriteString("Region(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", r.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", r.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ParentID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("name_en=")
	builder.WriteString(r.NameEn)
	builder.WriteString(", ")
	builder.WriteString("short_code=")
	builder.WriteString(r.ShortCode)
	builder.WriteString(", ")
	builder.WriteString("zip_code=")
	builder.WriteString(r.ZipCode)
	builder.WriteString(", ")
	builder.WriteString("country_id=")
	builder.WriteString(fmt.Sprintf("%v", r.CountryID))
	builder.WriteString(", ")
	builder.WriteString("display_sort=")
	builder.WriteString(fmt.Sprintf("%v", r.DisplaySort))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Region) NamedChildren(name string) ([]*Region, error) {
	if r.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Region) appendNamedChildren(name string, edges ...*Region) {
	if r.Edges.namedChildren == nil {
		r.Edges.namedChildren = make(map[string][]*Region)
	}
	if len(edges) == 0 {
		r.Edges.namedChildren[name] = []*Region{}
	} else {
		r.Edges.namedChildren[name] = append(r.Edges.namedChildren[name], edges...)
	}
}

// Regions is a parsable slice of Region.
type Regions []*Region
