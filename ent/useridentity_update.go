// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/useridentity"
)

// UserIdentityUpdate is the builder for updating UserIdentity entities.
type UserIdentityUpdate struct {
	config
	hooks    []Hook
	mutation *UserIdentityMutation
}

// Where appends a list predicates to the UserIdentityUpdate builder.
func (uiu *UserIdentityUpdate) Where(ps ...predicate.UserIdentity) *UserIdentityUpdate {
	uiu.mutation.Where(ps...)
	return uiu
}

// SetUpdatedBy sets the "updated_by" field.
func (uiu *UserIdentityUpdate) SetUpdatedBy(i int) *UserIdentityUpdate {
	uiu.mutation.ResetUpdatedBy()
	uiu.mutation.SetUpdatedBy(i)
	return uiu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uiu *UserIdentityUpdate) SetNillableUpdatedBy(i *int) *UserIdentityUpdate {
	if i != nil {
		uiu.SetUpdatedBy(*i)
	}
	return uiu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uiu *UserIdentityUpdate) AddUpdatedBy(i int) *UserIdentityUpdate {
	uiu.mutation.AddUpdatedBy(i)
	return uiu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uiu *UserIdentityUpdate) ClearUpdatedBy() *UserIdentityUpdate {
	uiu.mutation.ClearUpdatedBy()
	return uiu
}

// SetUpdatedAt sets the "updated_at" field.
func (uiu *UserIdentityUpdate) SetUpdatedAt(t time.Time) *UserIdentityUpdate {
	uiu.mutation.SetUpdatedAt(t)
	return uiu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uiu *UserIdentityUpdate) SetNillableUpdatedAt(t *time.Time) *UserIdentityUpdate {
	if t != nil {
		uiu.SetUpdatedAt(*t)
	}
	return uiu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uiu *UserIdentityUpdate) ClearUpdatedAt() *UserIdentityUpdate {
	uiu.mutation.ClearUpdatedAt()
	return uiu
}

// SetKind sets the "kind" field.
func (uiu *UserIdentityUpdate) SetKind(u useridentity.Kind) *UserIdentityUpdate {
	uiu.mutation.SetKind(u)
	return uiu
}

// SetCode sets the "code" field.
func (uiu *UserIdentityUpdate) SetCode(s string) *UserIdentityUpdate {
	uiu.mutation.SetCode(s)
	return uiu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (uiu *UserIdentityUpdate) SetNillableCode(s *string) *UserIdentityUpdate {
	if s != nil {
		uiu.SetCode(*s)
	}
	return uiu
}

// ClearCode clears the value of the "code" field.
func (uiu *UserIdentityUpdate) ClearCode() *UserIdentityUpdate {
	uiu.mutation.ClearCode()
	return uiu
}

// SetCodeExtend sets the "code_extend" field.
func (uiu *UserIdentityUpdate) SetCodeExtend(s string) *UserIdentityUpdate {
	uiu.mutation.SetCodeExtend(s)
	return uiu
}

// SetNillableCodeExtend sets the "code_extend" field if the given value is not nil.
func (uiu *UserIdentityUpdate) SetNillableCodeExtend(s *string) *UserIdentityUpdate {
	if s != nil {
		uiu.SetCodeExtend(*s)
	}
	return uiu
}

// ClearCodeExtend clears the value of the "code_extend" field.
func (uiu *UserIdentityUpdate) ClearCodeExtend() *UserIdentityUpdate {
	uiu.mutation.ClearCodeExtend()
	return uiu
}

// SetStatus sets the "status" field.
func (uiu *UserIdentityUpdate) SetStatus(ts typex.SimpleStatus) *UserIdentityUpdate {
	uiu.mutation.SetStatus(ts)
	return uiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uiu *UserIdentityUpdate) SetNillableStatus(ts *typex.SimpleStatus) *UserIdentityUpdate {
	if ts != nil {
		uiu.SetStatus(*ts)
	}
	return uiu
}

// ClearStatus clears the value of the "status" field.
func (uiu *UserIdentityUpdate) ClearStatus() *UserIdentityUpdate {
	uiu.mutation.ClearStatus()
	return uiu
}

// Mutation returns the UserIdentityMutation object of the builder.
func (uiu *UserIdentityUpdate) Mutation() *UserIdentityMutation {
	return uiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UserIdentityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uiu.sqlSave, uiu.mutation, uiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserIdentityUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserIdentityUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserIdentityUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiu *UserIdentityUpdate) check() error {
	if v, ok := uiu.mutation.Kind(); ok {
		if err := useridentity.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "UserIdentity.kind": %w`, err)}
		}
	}
	if v, ok := uiu.mutation.Status(); ok {
		if err := useridentity.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserIdentity.status": %w`, err)}
		}
	}
	return nil
}

func (uiu *UserIdentityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useridentity.Table, useridentity.Columns, sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt))
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.UpdatedBy(); ok {
		_spec.SetField(useridentity.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uiu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(useridentity.FieldUpdatedBy, field.TypeInt, value)
	}
	if uiu.mutation.UpdatedByCleared() {
		_spec.ClearField(useridentity.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := uiu.mutation.UpdatedAt(); ok {
		_spec.SetField(useridentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if uiu.mutation.UpdatedAtCleared() {
		_spec.ClearField(useridentity.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uiu.mutation.Kind(); ok {
		_spec.SetField(useridentity.FieldKind, field.TypeEnum, value)
	}
	if value, ok := uiu.mutation.Code(); ok {
		_spec.SetField(useridentity.FieldCode, field.TypeString, value)
	}
	if uiu.mutation.CodeCleared() {
		_spec.ClearField(useridentity.FieldCode, field.TypeString)
	}
	if value, ok := uiu.mutation.CodeExtend(); ok {
		_spec.SetField(useridentity.FieldCodeExtend, field.TypeString, value)
	}
	if uiu.mutation.CodeExtendCleared() {
		_spec.ClearField(useridentity.FieldCodeExtend, field.TypeString)
	}
	if value, ok := uiu.mutation.Status(); ok {
		_spec.SetField(useridentity.FieldStatus, field.TypeEnum, value)
	}
	if uiu.mutation.StatusCleared() {
		_spec.ClearField(useridentity.FieldStatus, field.TypeEnum)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useridentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiu.mutation.done = true
	return n, nil
}

// UserIdentityUpdateOne is the builder for updating a single UserIdentity entity.
type UserIdentityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserIdentityMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (uiuo *UserIdentityUpdateOne) SetUpdatedBy(i int) *UserIdentityUpdateOne {
	uiuo.mutation.ResetUpdatedBy()
	uiuo.mutation.SetUpdatedBy(i)
	return uiuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uiuo *UserIdentityUpdateOne) SetNillableUpdatedBy(i *int) *UserIdentityUpdateOne {
	if i != nil {
		uiuo.SetUpdatedBy(*i)
	}
	return uiuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uiuo *UserIdentityUpdateOne) AddUpdatedBy(i int) *UserIdentityUpdateOne {
	uiuo.mutation.AddUpdatedBy(i)
	return uiuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uiuo *UserIdentityUpdateOne) ClearUpdatedBy() *UserIdentityUpdateOne {
	uiuo.mutation.ClearUpdatedBy()
	return uiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uiuo *UserIdentityUpdateOne) SetUpdatedAt(t time.Time) *UserIdentityUpdateOne {
	uiuo.mutation.SetUpdatedAt(t)
	return uiuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uiuo *UserIdentityUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserIdentityUpdateOne {
	if t != nil {
		uiuo.SetUpdatedAt(*t)
	}
	return uiuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uiuo *UserIdentityUpdateOne) ClearUpdatedAt() *UserIdentityUpdateOne {
	uiuo.mutation.ClearUpdatedAt()
	return uiuo
}

// SetKind sets the "kind" field.
func (uiuo *UserIdentityUpdateOne) SetKind(u useridentity.Kind) *UserIdentityUpdateOne {
	uiuo.mutation.SetKind(u)
	return uiuo
}

// SetCode sets the "code" field.
func (uiuo *UserIdentityUpdateOne) SetCode(s string) *UserIdentityUpdateOne {
	uiuo.mutation.SetCode(s)
	return uiuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (uiuo *UserIdentityUpdateOne) SetNillableCode(s *string) *UserIdentityUpdateOne {
	if s != nil {
		uiuo.SetCode(*s)
	}
	return uiuo
}

// ClearCode clears the value of the "code" field.
func (uiuo *UserIdentityUpdateOne) ClearCode() *UserIdentityUpdateOne {
	uiuo.mutation.ClearCode()
	return uiuo
}

// SetCodeExtend sets the "code_extend" field.
func (uiuo *UserIdentityUpdateOne) SetCodeExtend(s string) *UserIdentityUpdateOne {
	uiuo.mutation.SetCodeExtend(s)
	return uiuo
}

// SetNillableCodeExtend sets the "code_extend" field if the given value is not nil.
func (uiuo *UserIdentityUpdateOne) SetNillableCodeExtend(s *string) *UserIdentityUpdateOne {
	if s != nil {
		uiuo.SetCodeExtend(*s)
	}
	return uiuo
}

// ClearCodeExtend clears the value of the "code_extend" field.
func (uiuo *UserIdentityUpdateOne) ClearCodeExtend() *UserIdentityUpdateOne {
	uiuo.mutation.ClearCodeExtend()
	return uiuo
}

// SetStatus sets the "status" field.
func (uiuo *UserIdentityUpdateOne) SetStatus(ts typex.SimpleStatus) *UserIdentityUpdateOne {
	uiuo.mutation.SetStatus(ts)
	return uiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uiuo *UserIdentityUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *UserIdentityUpdateOne {
	if ts != nil {
		uiuo.SetStatus(*ts)
	}
	return uiuo
}

// ClearStatus clears the value of the "status" field.
func (uiuo *UserIdentityUpdateOne) ClearStatus() *UserIdentityUpdateOne {
	uiuo.mutation.ClearStatus()
	return uiuo
}

// Mutation returns the UserIdentityMutation object of the builder.
func (uiuo *UserIdentityUpdateOne) Mutation() *UserIdentityMutation {
	return uiuo.mutation
}

// Where appends a list predicates to the UserIdentityUpdate builder.
func (uiuo *UserIdentityUpdateOne) Where(ps ...predicate.UserIdentity) *UserIdentityUpdateOne {
	uiuo.mutation.Where(ps...)
	return uiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiuo *UserIdentityUpdateOne) Select(field string, fields ...string) *UserIdentityUpdateOne {
	uiuo.fields = append([]string{field}, fields...)
	return uiuo
}

// Save executes the query and returns the updated UserIdentity entity.
func (uiuo *UserIdentityUpdateOne) Save(ctx context.Context) (*UserIdentity, error) {
	return withHooks(ctx, uiuo.sqlSave, uiuo.mutation, uiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserIdentityUpdateOne) SaveX(ctx context.Context) *UserIdentity {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserIdentityUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserIdentityUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiuo *UserIdentityUpdateOne) check() error {
	if v, ok := uiuo.mutation.Kind(); ok {
		if err := useridentity.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "UserIdentity.kind": %w`, err)}
		}
	}
	if v, ok := uiuo.mutation.Status(); ok {
		if err := useridentity.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "UserIdentity.status": %w`, err)}
		}
	}
	return nil
}

func (uiuo *UserIdentityUpdateOne) sqlSave(ctx context.Context) (_node *UserIdentity, err error) {
	if err := uiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useridentity.Table, useridentity.Columns, sqlgraph.NewFieldSpec(useridentity.FieldID, field.TypeInt))
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserIdentity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useridentity.FieldID)
		for _, f := range fields {
			if !useridentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useridentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(useridentity.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uiuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(useridentity.FieldUpdatedBy, field.TypeInt, value)
	}
	if uiuo.mutation.UpdatedByCleared() {
		_spec.ClearField(useridentity.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := uiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(useridentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if uiuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(useridentity.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uiuo.mutation.Kind(); ok {
		_spec.SetField(useridentity.FieldKind, field.TypeEnum, value)
	}
	if value, ok := uiuo.mutation.Code(); ok {
		_spec.SetField(useridentity.FieldCode, field.TypeString, value)
	}
	if uiuo.mutation.CodeCleared() {
		_spec.ClearField(useridentity.FieldCode, field.TypeString)
	}
	if value, ok := uiuo.mutation.CodeExtend(); ok {
		_spec.SetField(useridentity.FieldCodeExtend, field.TypeString, value)
	}
	if uiuo.mutation.CodeExtendCleared() {
		_spec.ClearField(useridentity.FieldCodeExtend, field.TypeString)
	}
	if value, ok := uiuo.mutation.Status(); ok {
		_spec.SetField(useridentity.FieldStatus, field.TypeEnum, value)
	}
	if uiuo.mutation.StatusCleared() {
		_spec.ClearField(useridentity.FieldStatus, field.TypeEnum)
	}
	_node = &UserIdentity{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useridentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiuo.mutation.done = true
	return _node, nil
}
