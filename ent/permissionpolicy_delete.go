// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/permissionpolicy"
	"github.com/woocoos/knockout/ent/predicate"
)

// PermissionPolicyDelete is the builder for deleting a PermissionPolicy entity.
type PermissionPolicyDelete struct {
	config
	hooks    []Hook
	mutation *PermissionPolicyMutation
}

// Where appends a list predicates to the PermissionPolicyDelete builder.
func (ppd *PermissionPolicyDelete) Where(ps ...predicate.PermissionPolicy) *PermissionPolicyDelete {
	ppd.mutation.Where(ps...)
	return ppd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ppd *PermissionPolicyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, PermissionPolicyMutation](ctx, ppd.sqlExec, ppd.mutation, ppd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ppd *PermissionPolicyDelete) ExecX(ctx context.Context) int {
	n, err := ppd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ppd *PermissionPolicyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(permissionpolicy.Table, sqlgraph.NewFieldSpec(permissionpolicy.FieldID, field.TypeInt))
	if ps := ppd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ppd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ppd.mutation.done = true
	return affected, err
}

// PermissionPolicyDeleteOne is the builder for deleting a single PermissionPolicy entity.
type PermissionPolicyDeleteOne struct {
	ppd *PermissionPolicyDelete
}

// Where appends a list predicates to the PermissionPolicyDelete builder.
func (ppdo *PermissionPolicyDeleteOne) Where(ps ...predicate.PermissionPolicy) *PermissionPolicyDeleteOne {
	ppdo.ppd.mutation.Where(ps...)
	return ppdo
}

// Exec executes the deletion query.
func (ppdo *PermissionPolicyDeleteOne) Exec(ctx context.Context) error {
	n, err := ppdo.ppd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{permissionpolicy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ppdo *PermissionPolicyDeleteOne) ExecX(ctx context.Context) {
	if err := ppdo.Exec(ctx); err != nil {
		panic(err)
	}
}
