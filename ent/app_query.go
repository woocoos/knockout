// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/appres"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/org"
	"github.com/woocoos/knockout/ent/orgapp"
	"github.com/woocoos/knockout/ent/predicate"
)

// AppQuery is the builder for querying App entities.
type AppQuery struct {
	config
	ctx                *QueryContext
	order              []app.OrderOption
	inters             []Interceptor
	predicates         []predicate.App
	withMenus          *AppMenuQuery
	withActions        *AppActionQuery
	withResources      *AppResQuery
	withRoles          *AppRoleQuery
	withPolicies       *AppPolicyQuery
	withOrgs           *OrgQuery
	withOrgApp         *OrgAppQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*App) error
	withNamedMenus     map[string]*AppMenuQuery
	withNamedActions   map[string]*AppActionQuery
	withNamedResources map[string]*AppResQuery
	withNamedRoles     map[string]*AppRoleQuery
	withNamedPolicies  map[string]*AppPolicyQuery
	withNamedOrgs      map[string]*OrgQuery
	withNamedOrgApp    map[string]*OrgAppQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppQuery builder.
func (aq *AppQuery) Where(ps ...predicate.App) *AppQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AppQuery) Limit(limit int) *AppQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *AppQuery) Offset(offset int) *AppQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AppQuery) Unique(unique bool) *AppQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AppQuery) Order(o ...app.OrderOption) *AppQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryMenus chains the current query on the "menus" edge.
func (aq *AppQuery) QueryMenus() *AppMenuQuery {
	query := (&AppMenuClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, selector),
			sqlgraph.To(appmenu.Table, appmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.MenusTable, app.MenusColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActions chains the current query on the "actions" edge.
func (aq *AppQuery) QueryActions() *AppActionQuery {
	query := (&AppActionClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, selector),
			sqlgraph.To(appaction.Table, appaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.ActionsTable, app.ActionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResources chains the current query on the "resources" edge.
func (aq *AppQuery) QueryResources() *AppResQuery {
	query := (&AppResClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, selector),
			sqlgraph.To(appres.Table, appres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.ResourcesTable, app.ResourcesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoles chains the current query on the "roles" edge.
func (aq *AppQuery) QueryRoles() *AppRoleQuery {
	query := (&AppRoleClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, selector),
			sqlgraph.To(approle.Table, approle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.RolesTable, app.RolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPolicies chains the current query on the "policies" edge.
func (aq *AppQuery) QueryPolicies() *AppPolicyQuery {
	query := (&AppPolicyClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, selector),
			sqlgraph.To(apppolicy.Table, apppolicy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.PoliciesTable, app.PoliciesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgs chains the current query on the "orgs" edge.
func (aq *AppQuery) QueryOrgs() *OrgQuery {
	query := (&OrgClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, selector),
			sqlgraph.To(org.Table, org.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, app.OrgsTable, app.OrgsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgApp chains the current query on the "org_app" edge.
func (aq *AppQuery) QueryOrgApp() *OrgAppQuery {
	query := (&OrgAppClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, selector),
			sqlgraph.To(orgapp.Table, orgapp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, app.OrgAppTable, app.OrgAppColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first App entity from the query.
// Returns a *NotFoundError when no App was found.
func (aq *AppQuery) First(ctx context.Context) (*App, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{app.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AppQuery) FirstX(ctx context.Context) *App {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first App ID from the query.
// Returns a *NotFoundError when no App ID was found.
func (aq *AppQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{app.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AppQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single App entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one App entity is found.
// Returns a *NotFoundError when no App entities are found.
func (aq *AppQuery) Only(ctx context.Context) (*App, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{app.Label}
	default:
		return nil, &NotSingularError{app.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AppQuery) OnlyX(ctx context.Context) *App {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only App ID in the query.
// Returns a *NotSingularError when more than one App ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AppQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{app.Label}
	default:
		err = &NotSingularError{app.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AppQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Apps.
func (aq *AppQuery) All(ctx context.Context) ([]*App, error) {
	ctx = setContextOp(ctx, aq.ctx, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*App, *AppQuery]()
	return withInterceptors[[]*App](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AppQuery) AllX(ctx context.Context) []*App {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of App IDs.
func (aq *AppQuery) IDs(ctx context.Context) (ids []int, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, "IDs")
	if err = aq.Select(app.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AppQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AppQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AppQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AppQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AppQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AppQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AppQuery) Clone() *AppQuery {
	if aq == nil {
		return nil
	}
	return &AppQuery{
		config:        aq.config,
		ctx:           aq.ctx.Clone(),
		order:         append([]app.OrderOption{}, aq.order...),
		inters:        append([]Interceptor{}, aq.inters...),
		predicates:    append([]predicate.App{}, aq.predicates...),
		withMenus:     aq.withMenus.Clone(),
		withActions:   aq.withActions.Clone(),
		withResources: aq.withResources.Clone(),
		withRoles:     aq.withRoles.Clone(),
		withPolicies:  aq.withPolicies.Clone(),
		withOrgs:      aq.withOrgs.Clone(),
		withOrgApp:    aq.withOrgApp.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithMenus tells the query-builder to eager-load the nodes that are connected to
// the "menus" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithMenus(opts ...func(*AppMenuQuery)) *AppQuery {
	query := (&AppMenuClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMenus = query
	return aq
}

// WithActions tells the query-builder to eager-load the nodes that are connected to
// the "actions" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithActions(opts ...func(*AppActionQuery)) *AppQuery {
	query := (&AppActionClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withActions = query
	return aq
}

// WithResources tells the query-builder to eager-load the nodes that are connected to
// the "resources" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithResources(opts ...func(*AppResQuery)) *AppQuery {
	query := (&AppResClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withResources = query
	return aq
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithRoles(opts ...func(*AppRoleQuery)) *AppQuery {
	query := (&AppRoleClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRoles = query
	return aq
}

// WithPolicies tells the query-builder to eager-load the nodes that are connected to
// the "policies" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithPolicies(opts ...func(*AppPolicyQuery)) *AppQuery {
	query := (&AppPolicyClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withPolicies = query
	return aq
}

// WithOrgs tells the query-builder to eager-load the nodes that are connected to
// the "orgs" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithOrgs(opts ...func(*OrgQuery)) *AppQuery {
	query := (&OrgClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOrgs = query
	return aq
}

// WithOrgApp tells the query-builder to eager-load the nodes that are connected to
// the "org_app" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithOrgApp(opts ...func(*OrgAppQuery)) *AppQuery {
	query := (&OrgAppClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOrgApp = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.App.Query().
//		GroupBy(app.FieldCreatedBy).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *AppQuery) GroupBy(field string, fields ...string) *AppGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = app.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy int `json:"created_by,omitempty"`
//	}
//
//	client.App.Query().
//		Select(app.FieldCreatedBy).
//		Scan(ctx, &v)
func (aq *AppQuery) Select(fields ...string) *AppSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &AppSelect{AppQuery: aq}
	sbuild.label = app.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppSelect configured with the given aggregations.
func (aq *AppQuery) Aggregate(fns ...AggregateFunc) *AppSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AppQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !app.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AppQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*App, error) {
	var (
		nodes       = []*App{}
		_spec       = aq.querySpec()
		loadedTypes = [7]bool{
			aq.withMenus != nil,
			aq.withActions != nil,
			aq.withResources != nil,
			aq.withRoles != nil,
			aq.withPolicies != nil,
			aq.withOrgs != nil,
			aq.withOrgApp != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*App).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &App{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withMenus; query != nil {
		if err := aq.loadMenus(ctx, query, nodes,
			func(n *App) { n.Edges.Menus = []*AppMenu{} },
			func(n *App, e *AppMenu) { n.Edges.Menus = append(n.Edges.Menus, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withActions; query != nil {
		if err := aq.loadActions(ctx, query, nodes,
			func(n *App) { n.Edges.Actions = []*AppAction{} },
			func(n *App, e *AppAction) { n.Edges.Actions = append(n.Edges.Actions, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withResources; query != nil {
		if err := aq.loadResources(ctx, query, nodes,
			func(n *App) { n.Edges.Resources = []*AppRes{} },
			func(n *App, e *AppRes) { n.Edges.Resources = append(n.Edges.Resources, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRoles; query != nil {
		if err := aq.loadRoles(ctx, query, nodes,
			func(n *App) { n.Edges.Roles = []*AppRole{} },
			func(n *App, e *AppRole) { n.Edges.Roles = append(n.Edges.Roles, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withPolicies; query != nil {
		if err := aq.loadPolicies(ctx, query, nodes,
			func(n *App) { n.Edges.Policies = []*AppPolicy{} },
			func(n *App, e *AppPolicy) { n.Edges.Policies = append(n.Edges.Policies, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOrgs; query != nil {
		if err := aq.loadOrgs(ctx, query, nodes,
			func(n *App) { n.Edges.Orgs = []*Org{} },
			func(n *App, e *Org) { n.Edges.Orgs = append(n.Edges.Orgs, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOrgApp; query != nil {
		if err := aq.loadOrgApp(ctx, query, nodes,
			func(n *App) { n.Edges.OrgApp = []*OrgApp{} },
			func(n *App, e *OrgApp) { n.Edges.OrgApp = append(n.Edges.OrgApp, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedMenus {
		if err := aq.loadMenus(ctx, query, nodes,
			func(n *App) { n.appendNamedMenus(name) },
			func(n *App, e *AppMenu) { n.appendNamedMenus(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedActions {
		if err := aq.loadActions(ctx, query, nodes,
			func(n *App) { n.appendNamedActions(name) },
			func(n *App, e *AppAction) { n.appendNamedActions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedResources {
		if err := aq.loadResources(ctx, query, nodes,
			func(n *App) { n.appendNamedResources(name) },
			func(n *App, e *AppRes) { n.appendNamedResources(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedRoles {
		if err := aq.loadRoles(ctx, query, nodes,
			func(n *App) { n.appendNamedRoles(name) },
			func(n *App, e *AppRole) { n.appendNamedRoles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedPolicies {
		if err := aq.loadPolicies(ctx, query, nodes,
			func(n *App) { n.appendNamedPolicies(name) },
			func(n *App, e *AppPolicy) { n.appendNamedPolicies(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedOrgs {
		if err := aq.loadOrgs(ctx, query, nodes,
			func(n *App) { n.appendNamedOrgs(name) },
			func(n *App, e *Org) { n.appendNamedOrgs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedOrgApp {
		if err := aq.loadOrgApp(ctx, query, nodes,
			func(n *App) { n.appendNamedOrgApp(name) },
			func(n *App, e *OrgApp) { n.appendNamedOrgApp(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range aq.loadTotal {
		if err := aq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AppQuery) loadMenus(ctx context.Context, query *AppMenuQuery, nodes []*App, init func(*App), assign func(*App, *AppMenu)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(appmenu.FieldAppID)
	}
	query.Where(predicate.AppMenu(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(app.MenusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AppQuery) loadActions(ctx context.Context, query *AppActionQuery, nodes []*App, init func(*App), assign func(*App, *AppAction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(appaction.FieldAppID)
	}
	query.Where(predicate.AppAction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(app.ActionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AppQuery) loadResources(ctx context.Context, query *AppResQuery, nodes []*App, init func(*App), assign func(*App, *AppRes)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(appres.FieldAppID)
	}
	query.Where(predicate.AppRes(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(app.ResourcesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AppQuery) loadRoles(ctx context.Context, query *AppRoleQuery, nodes []*App, init func(*App), assign func(*App, *AppRole)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(approle.FieldAppID)
	}
	query.Where(predicate.AppRole(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(app.RolesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AppQuery) loadPolicies(ctx context.Context, query *AppPolicyQuery, nodes []*App, init func(*App), assign func(*App, *AppPolicy)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(apppolicy.FieldAppID)
	}
	query.Where(predicate.AppPolicy(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(app.PoliciesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AppQuery) loadOrgs(ctx context.Context, query *OrgQuery, nodes []*App, init func(*App), assign func(*App, *Org)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*App)
	nids := make(map[int]map[*App]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(app.OrgsTable)
		s.Join(joinT).On(s.C(org.FieldID), joinT.C(app.OrgsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(app.OrgsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(app.OrgsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*App]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Org](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "orgs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *AppQuery) loadOrgApp(ctx context.Context, query *OrgAppQuery, nodes []*App, init func(*App), assign func(*App, *OrgApp)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*App)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgapp.FieldAppID)
	}
	query.Where(predicate.OrgApp(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(app.OrgAppColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (aq *AppQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AppQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for i := range fields {
			if fields[i] != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AppQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(app.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = app.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedMenus tells the query-builder to eager-load the nodes that are connected to the "menus"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithNamedMenus(name string, opts ...func(*AppMenuQuery)) *AppQuery {
	query := (&AppMenuClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedMenus == nil {
		aq.withNamedMenus = make(map[string]*AppMenuQuery)
	}
	aq.withNamedMenus[name] = query
	return aq
}

// WithNamedActions tells the query-builder to eager-load the nodes that are connected to the "actions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithNamedActions(name string, opts ...func(*AppActionQuery)) *AppQuery {
	query := (&AppActionClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedActions == nil {
		aq.withNamedActions = make(map[string]*AppActionQuery)
	}
	aq.withNamedActions[name] = query
	return aq
}

// WithNamedResources tells the query-builder to eager-load the nodes that are connected to the "resources"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithNamedResources(name string, opts ...func(*AppResQuery)) *AppQuery {
	query := (&AppResClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedResources == nil {
		aq.withNamedResources = make(map[string]*AppResQuery)
	}
	aq.withNamedResources[name] = query
	return aq
}

// WithNamedRoles tells the query-builder to eager-load the nodes that are connected to the "roles"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithNamedRoles(name string, opts ...func(*AppRoleQuery)) *AppQuery {
	query := (&AppRoleClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedRoles == nil {
		aq.withNamedRoles = make(map[string]*AppRoleQuery)
	}
	aq.withNamedRoles[name] = query
	return aq
}

// WithNamedPolicies tells the query-builder to eager-load the nodes that are connected to the "policies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithNamedPolicies(name string, opts ...func(*AppPolicyQuery)) *AppQuery {
	query := (&AppPolicyClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedPolicies == nil {
		aq.withNamedPolicies = make(map[string]*AppPolicyQuery)
	}
	aq.withNamedPolicies[name] = query
	return aq
}

// WithNamedOrgs tells the query-builder to eager-load the nodes that are connected to the "orgs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithNamedOrgs(name string, opts ...func(*OrgQuery)) *AppQuery {
	query := (&OrgClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedOrgs == nil {
		aq.withNamedOrgs = make(map[string]*OrgQuery)
	}
	aq.withNamedOrgs[name] = query
	return aq
}

// WithNamedOrgApp tells the query-builder to eager-load the nodes that are connected to the "org_app"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *AppQuery) WithNamedOrgApp(name string, opts ...func(*OrgAppQuery)) *AppQuery {
	query := (&OrgAppClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedOrgApp == nil {
		aq.withNamedOrgApp = make(map[string]*OrgAppQuery)
	}
	aq.withNamedOrgApp[name] = query
	return aq
}

// AppGroupBy is the group-by builder for App entities.
type AppGroupBy struct {
	selector
	build *AppQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AppGroupBy) Aggregate(fns ...AggregateFunc) *AppGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AppGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppQuery, *AppGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AppGroupBy) sqlScan(ctx context.Context, root *AppQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppSelect is the builder for selecting fields of App entities.
type AppSelect struct {
	*AppQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AppSelect) Aggregate(fns ...AggregateFunc) *AppSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AppSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppQuery, *AppSelect](ctx, as.AppQuery, as, as.inters, v)
}

func (as *AppSelect) sqlScan(ctx context.Context, root *AppQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
