// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appdict"
	"github.com/woocoos/knockout/ent/appdictitem"
)

// AppDictCreate is the builder for creating a AppDict entity.
type AppDictCreate struct {
	config
	mutation *AppDictMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (adc *AppDictCreate) SetCreatedBy(i int) *AppDictCreate {
	adc.mutation.SetCreatedBy(i)
	return adc
}

// SetCreatedAt sets the "created_at" field.
func (adc *AppDictCreate) SetCreatedAt(t time.Time) *AppDictCreate {
	adc.mutation.SetCreatedAt(t)
	return adc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adc *AppDictCreate) SetNillableCreatedAt(t *time.Time) *AppDictCreate {
	if t != nil {
		adc.SetCreatedAt(*t)
	}
	return adc
}

// SetUpdatedBy sets the "updated_by" field.
func (adc *AppDictCreate) SetUpdatedBy(i int) *AppDictCreate {
	adc.mutation.SetUpdatedBy(i)
	return adc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (adc *AppDictCreate) SetNillableUpdatedBy(i *int) *AppDictCreate {
	if i != nil {
		adc.SetUpdatedBy(*i)
	}
	return adc
}

// SetUpdatedAt sets the "updated_at" field.
func (adc *AppDictCreate) SetUpdatedAt(t time.Time) *AppDictCreate {
	adc.mutation.SetUpdatedAt(t)
	return adc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adc *AppDictCreate) SetNillableUpdatedAt(t *time.Time) *AppDictCreate {
	if t != nil {
		adc.SetUpdatedAt(*t)
	}
	return adc
}

// SetAppID sets the "app_id" field.
func (adc *AppDictCreate) SetAppID(i int) *AppDictCreate {
	adc.mutation.SetAppID(i)
	return adc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (adc *AppDictCreate) SetNillableAppID(i *int) *AppDictCreate {
	if i != nil {
		adc.SetAppID(*i)
	}
	return adc
}

// SetCode sets the "code" field.
func (adc *AppDictCreate) SetCode(s string) *AppDictCreate {
	adc.mutation.SetCode(s)
	return adc
}

// SetName sets the "name" field.
func (adc *AppDictCreate) SetName(s string) *AppDictCreate {
	adc.mutation.SetName(s)
	return adc
}

// SetComments sets the "comments" field.
func (adc *AppDictCreate) SetComments(s string) *AppDictCreate {
	adc.mutation.SetComments(s)
	return adc
}

// SetNillableComments sets the "comments" field if the given value is not nil.
func (adc *AppDictCreate) SetNillableComments(s *string) *AppDictCreate {
	if s != nil {
		adc.SetComments(*s)
	}
	return adc
}

// SetID sets the "id" field.
func (adc *AppDictCreate) SetID(i int) *AppDictCreate {
	adc.mutation.SetID(i)
	return adc
}

// SetApp sets the "app" edge to the App entity.
func (adc *AppDictCreate) SetApp(a *App) *AppDictCreate {
	return adc.SetAppID(a.ID)
}

// AddItemIDs adds the "items" edge to the AppDictItem entity by IDs.
func (adc *AppDictCreate) AddItemIDs(ids ...int) *AppDictCreate {
	adc.mutation.AddItemIDs(ids...)
	return adc
}

// AddItems adds the "items" edges to the AppDictItem entity.
func (adc *AppDictCreate) AddItems(a ...*AppDictItem) *AppDictCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return adc.AddItemIDs(ids...)
}

// Mutation returns the AppDictMutation object of the builder.
func (adc *AppDictCreate) Mutation() *AppDictMutation {
	return adc.mutation
}

// Save creates the AppDict in the database.
func (adc *AppDictCreate) Save(ctx context.Context) (*AppDict, error) {
	if err := adc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, adc.sqlSave, adc.mutation, adc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (adc *AppDictCreate) SaveX(ctx context.Context) *AppDict {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *AppDictCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *AppDictCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adc *AppDictCreate) defaults() error {
	if _, ok := adc.mutation.CreatedAt(); !ok {
		if appdict.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appdict.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appdict.DefaultCreatedAt()
		adc.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (adc *AppDictCreate) check() error {
	if _, ok := adc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "AppDict.created_by"`)}
	}
	if _, ok := adc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppDict.created_at"`)}
	}
	if _, ok := adc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "AppDict.code"`)}
	}
	if v, ok := adc.mutation.Code(); ok {
		if err := appdict.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AppDict.code": %w`, err)}
		}
	}
	if _, ok := adc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AppDict.name"`)}
	}
	if v, ok := adc.mutation.Name(); ok {
		if err := appdict.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AppDict.name": %w`, err)}
		}
	}
	return nil
}

func (adc *AppDictCreate) sqlSave(ctx context.Context) (*AppDict, error) {
	if err := adc.check(); err != nil {
		return nil, err
	}
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	adc.mutation.id = &_node.ID
	adc.mutation.done = true
	return _node, nil
}

func (adc *AppDictCreate) createSpec() (*AppDict, *sqlgraph.CreateSpec) {
	var (
		_node = &AppDict{config: adc.config}
		_spec = sqlgraph.NewCreateSpec(appdict.Table, sqlgraph.NewFieldSpec(appdict.FieldID, field.TypeInt))
	)
	_spec.OnConflict = adc.conflict
	if id, ok := adc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := adc.mutation.CreatedBy(); ok {
		_spec.SetField(appdict.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := adc.mutation.CreatedAt(); ok {
		_spec.SetField(appdict.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := adc.mutation.UpdatedBy(); ok {
		_spec.SetField(appdict.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := adc.mutation.UpdatedAt(); ok {
		_spec.SetField(appdict.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := adc.mutation.Code(); ok {
		_spec.SetField(appdict.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := adc.mutation.Name(); ok {
		_spec.SetField(appdict.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := adc.mutation.Comments(); ok {
		_spec.SetField(appdict.FieldComments, field.TypeString, value)
		_node.Comments = value
	}
	if nodes := adc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appdict.AppTable,
			Columns: []string{appdict.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := adc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   appdict.ItemsTable,
			Columns: []string{appdict.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appdictitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppDict.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppDictUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (adc *AppDictCreate) OnConflict(opts ...sql.ConflictOption) *AppDictUpsertOne {
	adc.conflict = opts
	return &AppDictUpsertOne{
		create: adc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppDict.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (adc *AppDictCreate) OnConflictColumns(columns ...string) *AppDictUpsertOne {
	adc.conflict = append(adc.conflict, sql.ConflictColumns(columns...))
	return &AppDictUpsertOne{
		create: adc,
	}
}

type (
	// AppDictUpsertOne is the builder for "upsert"-ing
	//  one AppDict node.
	AppDictUpsertOne struct {
		create *AppDictCreate
	}

	// AppDictUpsert is the "OnConflict" setter.
	AppDictUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedBy sets the "updated_by" field.
func (u *AppDictUpsert) SetUpdatedBy(v int) *AppDictUpsert {
	u.Set(appdict.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppDictUpsert) UpdateUpdatedBy() *AppDictUpsert {
	u.SetExcluded(appdict.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppDictUpsert) AddUpdatedBy(v int) *AppDictUpsert {
	u.Add(appdict.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppDictUpsert) ClearUpdatedBy() *AppDictUpsert {
	u.SetNull(appdict.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppDictUpsert) SetUpdatedAt(v time.Time) *AppDictUpsert {
	u.Set(appdict.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppDictUpsert) UpdateUpdatedAt() *AppDictUpsert {
	u.SetExcluded(appdict.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppDictUpsert) ClearUpdatedAt() *AppDictUpsert {
	u.SetNull(appdict.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *AppDictUpsert) SetName(v string) *AppDictUpsert {
	u.Set(appdict.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppDictUpsert) UpdateName() *AppDictUpsert {
	u.SetExcluded(appdict.FieldName)
	return u
}

// SetComments sets the "comments" field.
func (u *AppDictUpsert) SetComments(v string) *AppDictUpsert {
	u.Set(appdict.FieldComments, v)
	return u
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *AppDictUpsert) UpdateComments() *AppDictUpsert {
	u.SetExcluded(appdict.FieldComments)
	return u
}

// ClearComments clears the value of the "comments" field.
func (u *AppDictUpsert) ClearComments() *AppDictUpsert {
	u.SetNull(appdict.FieldComments)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppDict.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appdict.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppDictUpsertOne) UpdateNewValues() *AppDictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appdict.FieldID)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(appdict.FieldCreatedBy)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(appdict.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.AppID(); exists {
			s.SetIgnore(appdict.FieldAppID)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(appdict.FieldCode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppDict.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppDictUpsertOne) Ignore() *AppDictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppDictUpsertOne) DoNothing() *AppDictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppDictCreate.OnConflict
// documentation for more info.
func (u *AppDictUpsertOne) Update(set func(*AppDictUpsert)) *AppDictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppDictUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AppDictUpsertOne) SetUpdatedBy(v int) *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppDictUpsertOne) AddUpdatedBy(v int) *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppDictUpsertOne) UpdateUpdatedBy() *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppDictUpsertOne) ClearUpdatedBy() *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppDictUpsertOne) SetUpdatedAt(v time.Time) *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppDictUpsertOne) UpdateUpdatedAt() *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppDictUpsertOne) ClearUpdatedAt() *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AppDictUpsertOne) SetName(v string) *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppDictUpsertOne) UpdateName() *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateName()
	})
}

// SetComments sets the "comments" field.
func (u *AppDictUpsertOne) SetComments(v string) *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *AppDictUpsertOne) UpdateComments() *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *AppDictUpsertOne) ClearComments() *AppDictUpsertOne {
	return u.Update(func(s *AppDictUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *AppDictUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppDictCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppDictUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppDictUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppDictUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppDictCreateBulk is the builder for creating many AppDict entities in bulk.
type AppDictCreateBulk struct {
	config
	err      error
	builders []*AppDictCreate
	conflict []sql.ConflictOption
}

// Save creates the AppDict entities in the database.
func (adcb *AppDictCreateBulk) Save(ctx context.Context) ([]*AppDict, error) {
	if adcb.err != nil {
		return nil, adcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*AppDict, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppDictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = adcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *AppDictCreateBulk) SaveX(ctx context.Context) []*AppDict {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *AppDictCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *AppDictCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppDict.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppDictUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (adcb *AppDictCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppDictUpsertBulk {
	adcb.conflict = opts
	return &AppDictUpsertBulk{
		create: adcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppDict.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (adcb *AppDictCreateBulk) OnConflictColumns(columns ...string) *AppDictUpsertBulk {
	adcb.conflict = append(adcb.conflict, sql.ConflictColumns(columns...))
	return &AppDictUpsertBulk{
		create: adcb,
	}
}

// AppDictUpsertBulk is the builder for "upsert"-ing
// a bulk of AppDict nodes.
type AppDictUpsertBulk struct {
	create *AppDictCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppDict.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appdict.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppDictUpsertBulk) UpdateNewValues() *AppDictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appdict.FieldID)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(appdict.FieldCreatedBy)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(appdict.FieldCreatedAt)
			}
			if _, exists := b.mutation.AppID(); exists {
				s.SetIgnore(appdict.FieldAppID)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(appdict.FieldCode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppDict.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppDictUpsertBulk) Ignore() *AppDictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppDictUpsertBulk) DoNothing() *AppDictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppDictCreateBulk.OnConflict
// documentation for more info.
func (u *AppDictUpsertBulk) Update(set func(*AppDictUpsert)) *AppDictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppDictUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *AppDictUpsertBulk) SetUpdatedBy(v int) *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *AppDictUpsertBulk) AddUpdatedBy(v int) *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *AppDictUpsertBulk) UpdateUpdatedBy() *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *AppDictUpsertBulk) ClearUpdatedBy() *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppDictUpsertBulk) SetUpdatedAt(v time.Time) *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppDictUpsertBulk) UpdateUpdatedAt() *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppDictUpsertBulk) ClearUpdatedAt() *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AppDictUpsertBulk) SetName(v string) *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppDictUpsertBulk) UpdateName() *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateName()
	})
}

// SetComments sets the "comments" field.
func (u *AppDictUpsertBulk) SetComments(v string) *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.SetComments(v)
	})
}

// UpdateComments sets the "comments" field to the value that was provided on create.
func (u *AppDictUpsertBulk) UpdateComments() *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.UpdateComments()
	})
}

// ClearComments clears the value of the "comments" field.
func (u *AppDictUpsertBulk) ClearComments() *AppDictUpsertBulk {
	return u.Update(func(s *AppDictUpsert) {
		s.ClearComments()
	})
}

// Exec executes the query.
func (u *AppDictUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppDictCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppDictCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppDictUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
