// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax/typex"
	"github.com/woocoos/knockout/ent/country"
	"github.com/woocoos/knockout/ent/predicate"
	"github.com/woocoos/knockout/ent/region"
)

// RegionUpdate is the builder for updating Region entities.
type RegionUpdate struct {
	config
	hooks    []Hook
	mutation *RegionMutation
}

// Where appends a list predicates to the RegionUpdate builder.
func (ru *RegionUpdate) Where(ps ...predicate.Region) *RegionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RegionUpdate) SetUpdatedBy(i int) *RegionUpdate {
	ru.mutation.ResetUpdatedBy()
	ru.mutation.SetUpdatedBy(i)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableUpdatedBy(i *int) *RegionUpdate {
	if i != nil {
		ru.SetUpdatedBy(*i)
	}
	return ru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ru *RegionUpdate) AddUpdatedBy(i int) *RegionUpdate {
	ru.mutation.AddUpdatedBy(i)
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RegionUpdate) ClearUpdatedBy() *RegionUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RegionUpdate) SetUpdatedAt(t time.Time) *RegionUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableUpdatedAt(t *time.Time) *RegionUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RegionUpdate) ClearUpdatedAt() *RegionUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetParentID sets the "parent_id" field.
func (ru *RegionUpdate) SetParentID(i int) *RegionUpdate {
	ru.mutation.SetParentID(i)
	return ru
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableParentID(i *int) *RegionUpdate {
	if i != nil {
		ru.SetParentID(*i)
	}
	return ru
}

// ClearParentID clears the value of the "parent_id" field.
func (ru *RegionUpdate) ClearParentID() *RegionUpdate {
	ru.mutation.ClearParentID()
	return ru
}

// SetName sets the "name" field.
func (ru *RegionUpdate) SetName(s string) *RegionUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableName(s *string) *RegionUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *RegionUpdate) ClearName() *RegionUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetNameEn sets the "name_en" field.
func (ru *RegionUpdate) SetNameEn(s string) *RegionUpdate {
	ru.mutation.SetNameEn(s)
	return ru
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableNameEn(s *string) *RegionUpdate {
	if s != nil {
		ru.SetNameEn(*s)
	}
	return ru
}

// ClearNameEn clears the value of the "name_en" field.
func (ru *RegionUpdate) ClearNameEn() *RegionUpdate {
	ru.mutation.ClearNameEn()
	return ru
}

// SetShortCode sets the "short_code" field.
func (ru *RegionUpdate) SetShortCode(s string) *RegionUpdate {
	ru.mutation.SetShortCode(s)
	return ru
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableShortCode(s *string) *RegionUpdate {
	if s != nil {
		ru.SetShortCode(*s)
	}
	return ru
}

// ClearShortCode clears the value of the "short_code" field.
func (ru *RegionUpdate) ClearShortCode() *RegionUpdate {
	ru.mutation.ClearShortCode()
	return ru
}

// SetZipCode sets the "zip_code" field.
func (ru *RegionUpdate) SetZipCode(s string) *RegionUpdate {
	ru.mutation.SetZipCode(s)
	return ru
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableZipCode(s *string) *RegionUpdate {
	if s != nil {
		ru.SetZipCode(*s)
	}
	return ru
}

// ClearZipCode clears the value of the "zip_code" field.
func (ru *RegionUpdate) ClearZipCode() *RegionUpdate {
	ru.mutation.ClearZipCode()
	return ru
}

// SetCountryID sets the "country_id" field.
func (ru *RegionUpdate) SetCountryID(i int) *RegionUpdate {
	ru.mutation.SetCountryID(i)
	return ru
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableCountryID(i *int) *RegionUpdate {
	if i != nil {
		ru.SetCountryID(*i)
	}
	return ru
}

// ClearCountryID clears the value of the "country_id" field.
func (ru *RegionUpdate) ClearCountryID() *RegionUpdate {
	ru.mutation.ClearCountryID()
	return ru
}

// SetDisplaySort sets the "display_sort" field.
func (ru *RegionUpdate) SetDisplaySort(i int32) *RegionUpdate {
	ru.mutation.ResetDisplaySort()
	ru.mutation.SetDisplaySort(i)
	return ru
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableDisplaySort(i *int32) *RegionUpdate {
	if i != nil {
		ru.SetDisplaySort(*i)
	}
	return ru
}

// AddDisplaySort adds i to the "display_sort" field.
func (ru *RegionUpdate) AddDisplaySort(i int32) *RegionUpdate {
	ru.mutation.AddDisplaySort(i)
	return ru
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (ru *RegionUpdate) ClearDisplaySort() *RegionUpdate {
	ru.mutation.ClearDisplaySort()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RegionUpdate) SetStatus(ts typex.SimpleStatus) *RegionUpdate {
	ru.mutation.SetStatus(ts)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RegionUpdate) SetNillableStatus(ts *typex.SimpleStatus) *RegionUpdate {
	if ts != nil {
		ru.SetStatus(*ts)
	}
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *RegionUpdate) ClearStatus() *RegionUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetParent sets the "parent" edge to the Region entity.
func (ru *RegionUpdate) SetParent(r *Region) *RegionUpdate {
	return ru.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Region entity by IDs.
func (ru *RegionUpdate) AddChildIDs(ids ...int) *RegionUpdate {
	ru.mutation.AddChildIDs(ids...)
	return ru
}

// AddChildren adds the "children" edges to the Region entity.
func (ru *RegionUpdate) AddChildren(r ...*Region) *RegionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddChildIDs(ids...)
}

// SetCountry sets the "country" edge to the Country entity.
func (ru *RegionUpdate) SetCountry(c *Country) *RegionUpdate {
	return ru.SetCountryID(c.ID)
}

// Mutation returns the RegionMutation object of the builder.
func (ru *RegionUpdate) Mutation() *RegionMutation {
	return ru.mutation
}

// ClearParent clears the "parent" edge to the Region entity.
func (ru *RegionUpdate) ClearParent() *RegionUpdate {
	ru.mutation.ClearParent()
	return ru
}

// ClearChildren clears all "children" edges to the Region entity.
func (ru *RegionUpdate) ClearChildren() *RegionUpdate {
	ru.mutation.ClearChildren()
	return ru
}

// RemoveChildIDs removes the "children" edge to Region entities by IDs.
func (ru *RegionUpdate) RemoveChildIDs(ids ...int) *RegionUpdate {
	ru.mutation.RemoveChildIDs(ids...)
	return ru
}

// RemoveChildren removes "children" edges to Region entities.
func (ru *RegionUpdate) RemoveChildren(r ...*Region) *RegionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveChildIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (ru *RegionUpdate) ClearCountry() *RegionUpdate {
	ru.mutation.ClearCountry()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RegionUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := region.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Region.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.NameEn(); ok {
		if err := region.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "Region.name_en": %w`, err)}
		}
	}
	if v, ok := ru.mutation.ShortCode(); ok {
		if err := region.ShortCodeValidator(v); err != nil {
			return &ValidationError{Name: "short_code", err: fmt.Errorf(`ent: validator failed for field "Region.short_code": %w`, err)}
		}
	}
	if v, ok := ru.mutation.ZipCode(); ok {
		if err := region.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "Region.zip_code": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := region.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Region.status": %w`, err)}
		}
	}
	return nil
}

func (ru *RegionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(region.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(region.FieldUpdatedBy, field.TypeInt, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(region.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(region.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(region.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.NameEn(); ok {
		_spec.SetField(region.FieldNameEn, field.TypeString, value)
	}
	if ru.mutation.NameEnCleared() {
		_spec.ClearField(region.FieldNameEn, field.TypeString)
	}
	if value, ok := ru.mutation.ShortCode(); ok {
		_spec.SetField(region.FieldShortCode, field.TypeString, value)
	}
	if ru.mutation.ShortCodeCleared() {
		_spec.ClearField(region.FieldShortCode, field.TypeString)
	}
	if value, ok := ru.mutation.ZipCode(); ok {
		_spec.SetField(region.FieldZipCode, field.TypeString, value)
	}
	if ru.mutation.ZipCodeCleared() {
		_spec.ClearField(region.FieldZipCode, field.TypeString)
	}
	if value, ok := ru.mutation.DisplaySort(); ok {
		_spec.SetField(region.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedDisplaySort(); ok {
		_spec.AddField(region.FieldDisplaySort, field.TypeInt32, value)
	}
	if ru.mutation.DisplaySortCleared() {
		_spec.ClearField(region.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(region.FieldStatus, field.TypeEnum, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(region.FieldStatus, field.TypeEnum)
	}
	if ru.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RegionUpdateOne is the builder for updating a single Region entity.
type RegionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegionMutation
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RegionUpdateOne) SetUpdatedBy(i int) *RegionUpdateOne {
	ruo.mutation.ResetUpdatedBy()
	ruo.mutation.SetUpdatedBy(i)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableUpdatedBy(i *int) *RegionUpdateOne {
	if i != nil {
		ruo.SetUpdatedBy(*i)
	}
	return ruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ruo *RegionUpdateOne) AddUpdatedBy(i int) *RegionUpdateOne {
	ruo.mutation.AddUpdatedBy(i)
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RegionUpdateOne) ClearUpdatedBy() *RegionUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RegionUpdateOne) SetUpdatedAt(t time.Time) *RegionUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableUpdatedAt(t *time.Time) *RegionUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RegionUpdateOne) ClearUpdatedAt() *RegionUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetParentID sets the "parent_id" field.
func (ruo *RegionUpdateOne) SetParentID(i int) *RegionUpdateOne {
	ruo.mutation.SetParentID(i)
	return ruo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableParentID(i *int) *RegionUpdateOne {
	if i != nil {
		ruo.SetParentID(*i)
	}
	return ruo
}

// ClearParentID clears the value of the "parent_id" field.
func (ruo *RegionUpdateOne) ClearParentID() *RegionUpdateOne {
	ruo.mutation.ClearParentID()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RegionUpdateOne) SetName(s string) *RegionUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableName(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *RegionUpdateOne) ClearName() *RegionUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetNameEn sets the "name_en" field.
func (ruo *RegionUpdateOne) SetNameEn(s string) *RegionUpdateOne {
	ruo.mutation.SetNameEn(s)
	return ruo
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableNameEn(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetNameEn(*s)
	}
	return ruo
}

// ClearNameEn clears the value of the "name_en" field.
func (ruo *RegionUpdateOne) ClearNameEn() *RegionUpdateOne {
	ruo.mutation.ClearNameEn()
	return ruo
}

// SetShortCode sets the "short_code" field.
func (ruo *RegionUpdateOne) SetShortCode(s string) *RegionUpdateOne {
	ruo.mutation.SetShortCode(s)
	return ruo
}

// SetNillableShortCode sets the "short_code" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableShortCode(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetShortCode(*s)
	}
	return ruo
}

// ClearShortCode clears the value of the "short_code" field.
func (ruo *RegionUpdateOne) ClearShortCode() *RegionUpdateOne {
	ruo.mutation.ClearShortCode()
	return ruo
}

// SetZipCode sets the "zip_code" field.
func (ruo *RegionUpdateOne) SetZipCode(s string) *RegionUpdateOne {
	ruo.mutation.SetZipCode(s)
	return ruo
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableZipCode(s *string) *RegionUpdateOne {
	if s != nil {
		ruo.SetZipCode(*s)
	}
	return ruo
}

// ClearZipCode clears the value of the "zip_code" field.
func (ruo *RegionUpdateOne) ClearZipCode() *RegionUpdateOne {
	ruo.mutation.ClearZipCode()
	return ruo
}

// SetCountryID sets the "country_id" field.
func (ruo *RegionUpdateOne) SetCountryID(i int) *RegionUpdateOne {
	ruo.mutation.SetCountryID(i)
	return ruo
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableCountryID(i *int) *RegionUpdateOne {
	if i != nil {
		ruo.SetCountryID(*i)
	}
	return ruo
}

// ClearCountryID clears the value of the "country_id" field.
func (ruo *RegionUpdateOne) ClearCountryID() *RegionUpdateOne {
	ruo.mutation.ClearCountryID()
	return ruo
}

// SetDisplaySort sets the "display_sort" field.
func (ruo *RegionUpdateOne) SetDisplaySort(i int32) *RegionUpdateOne {
	ruo.mutation.ResetDisplaySort()
	ruo.mutation.SetDisplaySort(i)
	return ruo
}

// SetNillableDisplaySort sets the "display_sort" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableDisplaySort(i *int32) *RegionUpdateOne {
	if i != nil {
		ruo.SetDisplaySort(*i)
	}
	return ruo
}

// AddDisplaySort adds i to the "display_sort" field.
func (ruo *RegionUpdateOne) AddDisplaySort(i int32) *RegionUpdateOne {
	ruo.mutation.AddDisplaySort(i)
	return ruo
}

// ClearDisplaySort clears the value of the "display_sort" field.
func (ruo *RegionUpdateOne) ClearDisplaySort() *RegionUpdateOne {
	ruo.mutation.ClearDisplaySort()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RegionUpdateOne) SetStatus(ts typex.SimpleStatus) *RegionUpdateOne {
	ruo.mutation.SetStatus(ts)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RegionUpdateOne) SetNillableStatus(ts *typex.SimpleStatus) *RegionUpdateOne {
	if ts != nil {
		ruo.SetStatus(*ts)
	}
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *RegionUpdateOne) ClearStatus() *RegionUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetParent sets the "parent" edge to the Region entity.
func (ruo *RegionUpdateOne) SetParent(r *Region) *RegionUpdateOne {
	return ruo.SetParentID(r.ID)
}

// AddChildIDs adds the "children" edge to the Region entity by IDs.
func (ruo *RegionUpdateOne) AddChildIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.AddChildIDs(ids...)
	return ruo
}

// AddChildren adds the "children" edges to the Region entity.
func (ruo *RegionUpdateOne) AddChildren(r ...*Region) *RegionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddChildIDs(ids...)
}

// SetCountry sets the "country" edge to the Country entity.
func (ruo *RegionUpdateOne) SetCountry(c *Country) *RegionUpdateOne {
	return ruo.SetCountryID(c.ID)
}

// Mutation returns the RegionMutation object of the builder.
func (ruo *RegionUpdateOne) Mutation() *RegionMutation {
	return ruo.mutation
}

// ClearParent clears the "parent" edge to the Region entity.
func (ruo *RegionUpdateOne) ClearParent() *RegionUpdateOne {
	ruo.mutation.ClearParent()
	return ruo
}

// ClearChildren clears all "children" edges to the Region entity.
func (ruo *RegionUpdateOne) ClearChildren() *RegionUpdateOne {
	ruo.mutation.ClearChildren()
	return ruo
}

// RemoveChildIDs removes the "children" edge to Region entities by IDs.
func (ruo *RegionUpdateOne) RemoveChildIDs(ids ...int) *RegionUpdateOne {
	ruo.mutation.RemoveChildIDs(ids...)
	return ruo
}

// RemoveChildren removes "children" edges to Region entities.
func (ruo *RegionUpdateOne) RemoveChildren(r ...*Region) *RegionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveChildIDs(ids...)
}

// ClearCountry clears the "country" edge to the Country entity.
func (ruo *RegionUpdateOne) ClearCountry() *RegionUpdateOne {
	ruo.mutation.ClearCountry()
	return ruo
}

// Where appends a list predicates to the RegionUpdate builder.
func (ruo *RegionUpdateOne) Where(ps ...predicate.Region) *RegionUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegionUpdateOne) Select(field string, fields ...string) *RegionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Region entity.
func (ruo *RegionUpdateOne) Save(ctx context.Context) (*Region, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegionUpdateOne) SaveX(ctx context.Context) *Region {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RegionUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := region.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Region.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.NameEn(); ok {
		if err := region.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "Region.name_en": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.ShortCode(); ok {
		if err := region.ShortCodeValidator(v); err != nil {
			return &ValidationError{Name: "short_code", err: fmt.Errorf(`ent: validator failed for field "Region.short_code": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.ZipCode(); ok {
		if err := region.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "Region.zip_code": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := region.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Region.status": %w`, err)}
		}
	}
	return nil
}

func (ruo *RegionUpdateOne) sqlSave(ctx context.Context) (_node *Region, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(region.Table, region.Columns, sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Region.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, region.FieldID)
		for _, f := range fields {
			if !region.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != region.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(region.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(region.FieldUpdatedBy, field.TypeInt, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(region.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(region.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(region.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(region.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(region.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.NameEn(); ok {
		_spec.SetField(region.FieldNameEn, field.TypeString, value)
	}
	if ruo.mutation.NameEnCleared() {
		_spec.ClearField(region.FieldNameEn, field.TypeString)
	}
	if value, ok := ruo.mutation.ShortCode(); ok {
		_spec.SetField(region.FieldShortCode, field.TypeString, value)
	}
	if ruo.mutation.ShortCodeCleared() {
		_spec.ClearField(region.FieldShortCode, field.TypeString)
	}
	if value, ok := ruo.mutation.ZipCode(); ok {
		_spec.SetField(region.FieldZipCode, field.TypeString, value)
	}
	if ruo.mutation.ZipCodeCleared() {
		_spec.ClearField(region.FieldZipCode, field.TypeString)
	}
	if value, ok := ruo.mutation.DisplaySort(); ok {
		_spec.SetField(region.FieldDisplaySort, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedDisplaySort(); ok {
		_spec.AddField(region.FieldDisplaySort, field.TypeInt32, value)
	}
	if ruo.mutation.DisplaySortCleared() {
		_spec.ClearField(region.FieldDisplaySort, field.TypeInt32)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(region.FieldStatus, field.TypeEnum, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(region.FieldStatus, field.TypeEnum)
	}
	if ruo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.ParentTable,
			Columns: []string{region.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.ChildrenTable,
			Columns: []string{region.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(region.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   region.CountryTable,
			Columns: []string{region.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Region{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{region.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
