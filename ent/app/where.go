// Code generated by ent, DO NOT EDIT.

package app

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/entco/schemax/typex"
	"github.com/woocoos/knockout/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.App {
	return predicate.App(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.App {
	return predicate.App(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.App {
	return predicate.App(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.App {
	return predicate.App(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.App {
	return predicate.App(sql.FieldLTE(FieldID, id))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCode, v))
}

// RedirectURI applies equality check predicate on the "redirect_uri" field. It's identical to RedirectURIEQ.
func RedirectURI(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRedirectURI, v))
}

// AppKey applies equality check predicate on the "app_key" field. It's identical to AppKeyEQ.
func AppKey(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldAppKey, v))
}

// AppSecret applies equality check predicate on the "app_secret" field. It's identical to AppSecretEQ.
func AppSecret(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldAppSecret, v))
}

// Scopes applies equality check predicate on the "scopes" field. It's identical to ScopesEQ.
func Scopes(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldScopes, v))
}

// TokenValidity applies equality check predicate on the "token_validity" field. It's identical to TokenValidityEQ.
func TokenValidity(v int32) predicate.App {
	return predicate.App(sql.FieldEQ(FieldTokenValidity, v))
}

// RefreshTokenValidity applies equality check predicate on the "refresh_token_validity" field. It's identical to RefreshTokenValidityEQ.
func RefreshTokenValidity(v int32) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRefreshTokenValidity, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldLogo, v))
}

// Comments applies equality check predicate on the "comments" field. It's identical to CommentsEQ.
func Comments(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldComments, v))
}

// Private applies equality check predicate on the "private" field. It's identical to PrivateEQ.
func Private(v bool) predicate.App {
	return predicate.App(sql.FieldEQ(FieldPrivate, v))
}

// OwnerOrgID applies equality check predicate on the "owner_org_id" field. It's identical to OwnerOrgIDEQ.
func OwnerOrgID(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldOwnerOrgID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.App {
	return predicate.App(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.App {
	return predicate.App(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.App {
	return predicate.App(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.App {
	return predicate.App(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.App {
	return predicate.App(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.App {
	return predicate.App(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.App {
	return predicate.App(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.App {
	return predicate.App(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.App {
	return predicate.App(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.App {
	return predicate.App(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.App {
	return predicate.App(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.App {
	return predicate.App(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.App {
	return predicate.App(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldUpdatedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldCode, v))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v Kind) predicate.App {
	return predicate.App(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v Kind) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...Kind) predicate.App {
	return predicate.App(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...Kind) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldKind, vs...))
}

// RedirectURIEQ applies the EQ predicate on the "redirect_uri" field.
func RedirectURIEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRedirectURI, v))
}

// RedirectURINEQ applies the NEQ predicate on the "redirect_uri" field.
func RedirectURINEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldRedirectURI, v))
}

// RedirectURIIn applies the In predicate on the "redirect_uri" field.
func RedirectURIIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldRedirectURI, vs...))
}

// RedirectURINotIn applies the NotIn predicate on the "redirect_uri" field.
func RedirectURINotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldRedirectURI, vs...))
}

// RedirectURIGT applies the GT predicate on the "redirect_uri" field.
func RedirectURIGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldRedirectURI, v))
}

// RedirectURIGTE applies the GTE predicate on the "redirect_uri" field.
func RedirectURIGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldRedirectURI, v))
}

// RedirectURILT applies the LT predicate on the "redirect_uri" field.
func RedirectURILT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldRedirectURI, v))
}

// RedirectURILTE applies the LTE predicate on the "redirect_uri" field.
func RedirectURILTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldRedirectURI, v))
}

// RedirectURIContains applies the Contains predicate on the "redirect_uri" field.
func RedirectURIContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldRedirectURI, v))
}

// RedirectURIHasPrefix applies the HasPrefix predicate on the "redirect_uri" field.
func RedirectURIHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldRedirectURI, v))
}

// RedirectURIHasSuffix applies the HasSuffix predicate on the "redirect_uri" field.
func RedirectURIHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldRedirectURI, v))
}

// RedirectURIIsNil applies the IsNil predicate on the "redirect_uri" field.
func RedirectURIIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldRedirectURI))
}

// RedirectURINotNil applies the NotNil predicate on the "redirect_uri" field.
func RedirectURINotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldRedirectURI))
}

// RedirectURIEqualFold applies the EqualFold predicate on the "redirect_uri" field.
func RedirectURIEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldRedirectURI, v))
}

// RedirectURIContainsFold applies the ContainsFold predicate on the "redirect_uri" field.
func RedirectURIContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldRedirectURI, v))
}

// AppKeyEQ applies the EQ predicate on the "app_key" field.
func AppKeyEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldAppKey, v))
}

// AppKeyNEQ applies the NEQ predicate on the "app_key" field.
func AppKeyNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldAppKey, v))
}

// AppKeyIn applies the In predicate on the "app_key" field.
func AppKeyIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldAppKey, vs...))
}

// AppKeyNotIn applies the NotIn predicate on the "app_key" field.
func AppKeyNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldAppKey, vs...))
}

// AppKeyGT applies the GT predicate on the "app_key" field.
func AppKeyGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldAppKey, v))
}

// AppKeyGTE applies the GTE predicate on the "app_key" field.
func AppKeyGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldAppKey, v))
}

// AppKeyLT applies the LT predicate on the "app_key" field.
func AppKeyLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldAppKey, v))
}

// AppKeyLTE applies the LTE predicate on the "app_key" field.
func AppKeyLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldAppKey, v))
}

// AppKeyContains applies the Contains predicate on the "app_key" field.
func AppKeyContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldAppKey, v))
}

// AppKeyHasPrefix applies the HasPrefix predicate on the "app_key" field.
func AppKeyHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldAppKey, v))
}

// AppKeyHasSuffix applies the HasSuffix predicate on the "app_key" field.
func AppKeyHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldAppKey, v))
}

// AppKeyIsNil applies the IsNil predicate on the "app_key" field.
func AppKeyIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldAppKey))
}

// AppKeyNotNil applies the NotNil predicate on the "app_key" field.
func AppKeyNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldAppKey))
}

// AppKeyEqualFold applies the EqualFold predicate on the "app_key" field.
func AppKeyEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldAppKey, v))
}

// AppKeyContainsFold applies the ContainsFold predicate on the "app_key" field.
func AppKeyContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldAppKey, v))
}

// AppSecretEQ applies the EQ predicate on the "app_secret" field.
func AppSecretEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldAppSecret, v))
}

// AppSecretNEQ applies the NEQ predicate on the "app_secret" field.
func AppSecretNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldAppSecret, v))
}

// AppSecretIn applies the In predicate on the "app_secret" field.
func AppSecretIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldAppSecret, vs...))
}

// AppSecretNotIn applies the NotIn predicate on the "app_secret" field.
func AppSecretNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldAppSecret, vs...))
}

// AppSecretGT applies the GT predicate on the "app_secret" field.
func AppSecretGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldAppSecret, v))
}

// AppSecretGTE applies the GTE predicate on the "app_secret" field.
func AppSecretGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldAppSecret, v))
}

// AppSecretLT applies the LT predicate on the "app_secret" field.
func AppSecretLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldAppSecret, v))
}

// AppSecretLTE applies the LTE predicate on the "app_secret" field.
func AppSecretLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldAppSecret, v))
}

// AppSecretContains applies the Contains predicate on the "app_secret" field.
func AppSecretContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldAppSecret, v))
}

// AppSecretHasPrefix applies the HasPrefix predicate on the "app_secret" field.
func AppSecretHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldAppSecret, v))
}

// AppSecretHasSuffix applies the HasSuffix predicate on the "app_secret" field.
func AppSecretHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldAppSecret, v))
}

// AppSecretIsNil applies the IsNil predicate on the "app_secret" field.
func AppSecretIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldAppSecret))
}

// AppSecretNotNil applies the NotNil predicate on the "app_secret" field.
func AppSecretNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldAppSecret))
}

// AppSecretEqualFold applies the EqualFold predicate on the "app_secret" field.
func AppSecretEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldAppSecret, v))
}

// AppSecretContainsFold applies the ContainsFold predicate on the "app_secret" field.
func AppSecretContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldAppSecret, v))
}

// ScopesEQ applies the EQ predicate on the "scopes" field.
func ScopesEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldScopes, v))
}

// ScopesNEQ applies the NEQ predicate on the "scopes" field.
func ScopesNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldScopes, v))
}

// ScopesIn applies the In predicate on the "scopes" field.
func ScopesIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldScopes, vs...))
}

// ScopesNotIn applies the NotIn predicate on the "scopes" field.
func ScopesNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldScopes, vs...))
}

// ScopesGT applies the GT predicate on the "scopes" field.
func ScopesGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldScopes, v))
}

// ScopesGTE applies the GTE predicate on the "scopes" field.
func ScopesGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldScopes, v))
}

// ScopesLT applies the LT predicate on the "scopes" field.
func ScopesLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldScopes, v))
}

// ScopesLTE applies the LTE predicate on the "scopes" field.
func ScopesLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldScopes, v))
}

// ScopesContains applies the Contains predicate on the "scopes" field.
func ScopesContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldScopes, v))
}

// ScopesHasPrefix applies the HasPrefix predicate on the "scopes" field.
func ScopesHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldScopes, v))
}

// ScopesHasSuffix applies the HasSuffix predicate on the "scopes" field.
func ScopesHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldScopes, v))
}

// ScopesIsNil applies the IsNil predicate on the "scopes" field.
func ScopesIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldScopes))
}

// ScopesNotNil applies the NotNil predicate on the "scopes" field.
func ScopesNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldScopes))
}

// ScopesEqualFold applies the EqualFold predicate on the "scopes" field.
func ScopesEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldScopes, v))
}

// ScopesContainsFold applies the ContainsFold predicate on the "scopes" field.
func ScopesContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldScopes, v))
}

// TokenValidityEQ applies the EQ predicate on the "token_validity" field.
func TokenValidityEQ(v int32) predicate.App {
	return predicate.App(sql.FieldEQ(FieldTokenValidity, v))
}

// TokenValidityNEQ applies the NEQ predicate on the "token_validity" field.
func TokenValidityNEQ(v int32) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldTokenValidity, v))
}

// TokenValidityIn applies the In predicate on the "token_validity" field.
func TokenValidityIn(vs ...int32) predicate.App {
	return predicate.App(sql.FieldIn(FieldTokenValidity, vs...))
}

// TokenValidityNotIn applies the NotIn predicate on the "token_validity" field.
func TokenValidityNotIn(vs ...int32) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldTokenValidity, vs...))
}

// TokenValidityGT applies the GT predicate on the "token_validity" field.
func TokenValidityGT(v int32) predicate.App {
	return predicate.App(sql.FieldGT(FieldTokenValidity, v))
}

// TokenValidityGTE applies the GTE predicate on the "token_validity" field.
func TokenValidityGTE(v int32) predicate.App {
	return predicate.App(sql.FieldGTE(FieldTokenValidity, v))
}

// TokenValidityLT applies the LT predicate on the "token_validity" field.
func TokenValidityLT(v int32) predicate.App {
	return predicate.App(sql.FieldLT(FieldTokenValidity, v))
}

// TokenValidityLTE applies the LTE predicate on the "token_validity" field.
func TokenValidityLTE(v int32) predicate.App {
	return predicate.App(sql.FieldLTE(FieldTokenValidity, v))
}

// TokenValidityIsNil applies the IsNil predicate on the "token_validity" field.
func TokenValidityIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldTokenValidity))
}

// TokenValidityNotNil applies the NotNil predicate on the "token_validity" field.
func TokenValidityNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldTokenValidity))
}

// RefreshTokenValidityEQ applies the EQ predicate on the "refresh_token_validity" field.
func RefreshTokenValidityEQ(v int32) predicate.App {
	return predicate.App(sql.FieldEQ(FieldRefreshTokenValidity, v))
}

// RefreshTokenValidityNEQ applies the NEQ predicate on the "refresh_token_validity" field.
func RefreshTokenValidityNEQ(v int32) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldRefreshTokenValidity, v))
}

// RefreshTokenValidityIn applies the In predicate on the "refresh_token_validity" field.
func RefreshTokenValidityIn(vs ...int32) predicate.App {
	return predicate.App(sql.FieldIn(FieldRefreshTokenValidity, vs...))
}

// RefreshTokenValidityNotIn applies the NotIn predicate on the "refresh_token_validity" field.
func RefreshTokenValidityNotIn(vs ...int32) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldRefreshTokenValidity, vs...))
}

// RefreshTokenValidityGT applies the GT predicate on the "refresh_token_validity" field.
func RefreshTokenValidityGT(v int32) predicate.App {
	return predicate.App(sql.FieldGT(FieldRefreshTokenValidity, v))
}

// RefreshTokenValidityGTE applies the GTE predicate on the "refresh_token_validity" field.
func RefreshTokenValidityGTE(v int32) predicate.App {
	return predicate.App(sql.FieldGTE(FieldRefreshTokenValidity, v))
}

// RefreshTokenValidityLT applies the LT predicate on the "refresh_token_validity" field.
func RefreshTokenValidityLT(v int32) predicate.App {
	return predicate.App(sql.FieldLT(FieldRefreshTokenValidity, v))
}

// RefreshTokenValidityLTE applies the LTE predicate on the "refresh_token_validity" field.
func RefreshTokenValidityLTE(v int32) predicate.App {
	return predicate.App(sql.FieldLTE(FieldRefreshTokenValidity, v))
}

// RefreshTokenValidityIsNil applies the IsNil predicate on the "refresh_token_validity" field.
func RefreshTokenValidityIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldRefreshTokenValidity))
}

// RefreshTokenValidityNotNil applies the NotNil predicate on the "refresh_token_validity" field.
func RefreshTokenValidityNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldRefreshTokenValidity))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldLogo))
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldLogo))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldLogo, v))
}

// CommentsEQ applies the EQ predicate on the "comments" field.
func CommentsEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldComments, v))
}

// CommentsNEQ applies the NEQ predicate on the "comments" field.
func CommentsNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldComments, v))
}

// CommentsIn applies the In predicate on the "comments" field.
func CommentsIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldComments, vs...))
}

// CommentsNotIn applies the NotIn predicate on the "comments" field.
func CommentsNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldComments, vs...))
}

// CommentsGT applies the GT predicate on the "comments" field.
func CommentsGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldComments, v))
}

// CommentsGTE applies the GTE predicate on the "comments" field.
func CommentsGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldComments, v))
}

// CommentsLT applies the LT predicate on the "comments" field.
func CommentsLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldComments, v))
}

// CommentsLTE applies the LTE predicate on the "comments" field.
func CommentsLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldComments, v))
}

// CommentsContains applies the Contains predicate on the "comments" field.
func CommentsContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldComments, v))
}

// CommentsHasPrefix applies the HasPrefix predicate on the "comments" field.
func CommentsHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldComments, v))
}

// CommentsHasSuffix applies the HasSuffix predicate on the "comments" field.
func CommentsHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldComments, v))
}

// CommentsIsNil applies the IsNil predicate on the "comments" field.
func CommentsIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldComments))
}

// CommentsNotNil applies the NotNil predicate on the "comments" field.
func CommentsNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldComments))
}

// CommentsEqualFold applies the EqualFold predicate on the "comments" field.
func CommentsEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldComments, v))
}

// CommentsContainsFold applies the ContainsFold predicate on the "comments" field.
func CommentsContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldComments, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v typex.SimpleStatus) predicate.App {
	vc := v
	return predicate.App(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v typex.SimpleStatus) predicate.App {
	vc := v
	return predicate.App(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...typex.SimpleStatus) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...typex.SimpleStatus) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldStatus))
}

// PrivateEQ applies the EQ predicate on the "private" field.
func PrivateEQ(v bool) predicate.App {
	return predicate.App(sql.FieldEQ(FieldPrivate, v))
}

// PrivateNEQ applies the NEQ predicate on the "private" field.
func PrivateNEQ(v bool) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldPrivate, v))
}

// PrivateIsNil applies the IsNil predicate on the "private" field.
func PrivateIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldPrivate))
}

// PrivateNotNil applies the NotNil predicate on the "private" field.
func PrivateNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldPrivate))
}

// OwnerOrgIDEQ applies the EQ predicate on the "owner_org_id" field.
func OwnerOrgIDEQ(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldOwnerOrgID, v))
}

// OwnerOrgIDNEQ applies the NEQ predicate on the "owner_org_id" field.
func OwnerOrgIDNEQ(v int) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldOwnerOrgID, v))
}

// OwnerOrgIDIn applies the In predicate on the "owner_org_id" field.
func OwnerOrgIDIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldIn(FieldOwnerOrgID, vs...))
}

// OwnerOrgIDNotIn applies the NotIn predicate on the "owner_org_id" field.
func OwnerOrgIDNotIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldOwnerOrgID, vs...))
}

// OwnerOrgIDGT applies the GT predicate on the "owner_org_id" field.
func OwnerOrgIDGT(v int) predicate.App {
	return predicate.App(sql.FieldGT(FieldOwnerOrgID, v))
}

// OwnerOrgIDGTE applies the GTE predicate on the "owner_org_id" field.
func OwnerOrgIDGTE(v int) predicate.App {
	return predicate.App(sql.FieldGTE(FieldOwnerOrgID, v))
}

// OwnerOrgIDLT applies the LT predicate on the "owner_org_id" field.
func OwnerOrgIDLT(v int) predicate.App {
	return predicate.App(sql.FieldLT(FieldOwnerOrgID, v))
}

// OwnerOrgIDLTE applies the LTE predicate on the "owner_org_id" field.
func OwnerOrgIDLTE(v int) predicate.App {
	return predicate.App(sql.FieldLTE(FieldOwnerOrgID, v))
}

// OwnerOrgIDIsNil applies the IsNil predicate on the "owner_org_id" field.
func OwnerOrgIDIsNil() predicate.App {
	return predicate.App(sql.FieldIsNull(FieldOwnerOrgID))
}

// OwnerOrgIDNotNil applies the NotNil predicate on the "owner_org_id" field.
func OwnerOrgIDNotNil() predicate.App {
	return predicate.App(sql.FieldNotNull(FieldOwnerOrgID))
}

// HasMenus applies the HasEdge predicate on the "menus" edge.
func HasMenus() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MenusTable, MenusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenusWith applies the HasEdge predicate on the "menus" edge with a given conditions (other predicates).
func HasMenusWith(preds ...predicate.AppMenu) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newMenusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActions applies the HasEdge predicate on the "actions" edge.
func HasActions() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActionsTable, ActionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionsWith applies the HasEdge predicate on the "actions" edge with a given conditions (other predicates).
func HasActionsWith(preds ...predicate.AppAction) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newActionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResources applies the HasEdge predicate on the "resources" edge.
func HasResources() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResourcesTable, ResourcesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResourcesWith applies the HasEdge predicate on the "resources" edge with a given conditions (other predicates).
func HasResourcesWith(preds ...predicate.AppRes) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newResourcesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.AppRole) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPolicies applies the HasEdge predicate on the "policies" edge.
func HasPolicies() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PoliciesTable, PoliciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPoliciesWith applies the HasEdge predicate on the "policies" edge with a given conditions (other predicates).
func HasPoliciesWith(preds ...predicate.AppPolicy) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newPoliciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgs applies the HasEdge predicate on the "orgs" edge.
func HasOrgs() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OrgsTable, OrgsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgsWith applies the HasEdge predicate on the "orgs" edge with a given conditions (other predicates).
func HasOrgsWith(preds ...predicate.Org) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newOrgsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgApp applies the HasEdge predicate on the "org_app" edge.
func HasOrgApp() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OrgAppTable, OrgAppColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgAppWith applies the HasEdge predicate on the "org_app" edge with a given conditions (other predicates).
func HasOrgAppWith(preds ...predicate.OrgApp) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newOrgAppStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		p(s.Not())
	})
}
