// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/woocoos/knockout/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/woocoos/knockout/ent/app"
	"github.com/woocoos/knockout/ent/appaction"
	"github.com/woocoos/knockout/ent/appmenu"
	"github.com/woocoos/knockout/ent/apppolicy"
	"github.com/woocoos/knockout/ent/appres"
	"github.com/woocoos/knockout/ent/approle"
	"github.com/woocoos/knockout/ent/approlepolicy"
	"github.com/woocoos/knockout/ent/organization"
	"github.com/woocoos/knockout/ent/organizationapp"
	"github.com/woocoos/knockout/ent/organizationpolicy"
	"github.com/woocoos/knockout/ent/organizationrole"
	"github.com/woocoos/knockout/ent/organizationuser"
	"github.com/woocoos/knockout/ent/permission"
	"github.com/woocoos/knockout/ent/user"
	"github.com/woocoos/knockout/ent/userdevice"
	"github.com/woocoos/knockout/ent/useridentity"
	"github.com/woocoos/knockout/ent/userloginprofile"
	"github.com/woocoos/knockout/ent/userpassword"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// App is the client for interacting with the App builders.
	App *AppClient
	// AppAction is the client for interacting with the AppAction builders.
	AppAction *AppActionClient
	// AppMenu is the client for interacting with the AppMenu builders.
	AppMenu *AppMenuClient
	// AppPolicy is the client for interacting with the AppPolicy builders.
	AppPolicy *AppPolicyClient
	// AppRes is the client for interacting with the AppRes builders.
	AppRes *AppResClient
	// AppRole is the client for interacting with the AppRole builders.
	AppRole *AppRoleClient
	// AppRolePolicy is the client for interacting with the AppRolePolicy builders.
	AppRolePolicy *AppRolePolicyClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationApp is the client for interacting with the OrganizationApp builders.
	OrganizationApp *OrganizationAppClient
	// OrganizationPolicy is the client for interacting with the OrganizationPolicy builders.
	OrganizationPolicy *OrganizationPolicyClient
	// OrganizationRole is the client for interacting with the OrganizationRole builders.
	OrganizationRole *OrganizationRoleClient
	// OrganizationUser is the client for interacting with the OrganizationUser builders.
	OrganizationUser *OrganizationUserClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserDevice is the client for interacting with the UserDevice builders.
	UserDevice *UserDeviceClient
	// UserIdentity is the client for interacting with the UserIdentity builders.
	UserIdentity *UserIdentityClient
	// UserLoginProfile is the client for interacting with the UserLoginProfile builders.
	UserLoginProfile *UserLoginProfileClient
	// UserPassword is the client for interacting with the UserPassword builders.
	UserPassword *UserPasswordClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.App = NewAppClient(c.config)
	c.AppAction = NewAppActionClient(c.config)
	c.AppMenu = NewAppMenuClient(c.config)
	c.AppPolicy = NewAppPolicyClient(c.config)
	c.AppRes = NewAppResClient(c.config)
	c.AppRole = NewAppRoleClient(c.config)
	c.AppRolePolicy = NewAppRolePolicyClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationApp = NewOrganizationAppClient(c.config)
	c.OrganizationPolicy = NewOrganizationPolicyClient(c.config)
	c.OrganizationRole = NewOrganizationRoleClient(c.config)
	c.OrganizationUser = NewOrganizationUserClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserDevice = NewUserDeviceClient(c.config)
	c.UserIdentity = NewUserIdentityClient(c.config)
	c.UserLoginProfile = NewUserLoginProfileClient(c.config)
	c.UserPassword = NewUserPasswordClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		App:                NewAppClient(cfg),
		AppAction:          NewAppActionClient(cfg),
		AppMenu:            NewAppMenuClient(cfg),
		AppPolicy:          NewAppPolicyClient(cfg),
		AppRes:             NewAppResClient(cfg),
		AppRole:            NewAppRoleClient(cfg),
		AppRolePolicy:      NewAppRolePolicyClient(cfg),
		Organization:       NewOrganizationClient(cfg),
		OrganizationApp:    NewOrganizationAppClient(cfg),
		OrganizationPolicy: NewOrganizationPolicyClient(cfg),
		OrganizationRole:   NewOrganizationRoleClient(cfg),
		OrganizationUser:   NewOrganizationUserClient(cfg),
		Permission:         NewPermissionClient(cfg),
		User:               NewUserClient(cfg),
		UserDevice:         NewUserDeviceClient(cfg),
		UserIdentity:       NewUserIdentityClient(cfg),
		UserLoginProfile:   NewUserLoginProfileClient(cfg),
		UserPassword:       NewUserPasswordClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		App:                NewAppClient(cfg),
		AppAction:          NewAppActionClient(cfg),
		AppMenu:            NewAppMenuClient(cfg),
		AppPolicy:          NewAppPolicyClient(cfg),
		AppRes:             NewAppResClient(cfg),
		AppRole:            NewAppRoleClient(cfg),
		AppRolePolicy:      NewAppRolePolicyClient(cfg),
		Organization:       NewOrganizationClient(cfg),
		OrganizationApp:    NewOrganizationAppClient(cfg),
		OrganizationPolicy: NewOrganizationPolicyClient(cfg),
		OrganizationRole:   NewOrganizationRoleClient(cfg),
		OrganizationUser:   NewOrganizationUserClient(cfg),
		Permission:         NewPermissionClient(cfg),
		User:               NewUserClient(cfg),
		UserDevice:         NewUserDeviceClient(cfg),
		UserIdentity:       NewUserIdentityClient(cfg),
		UserLoginProfile:   NewUserLoginProfileClient(cfg),
		UserPassword:       NewUserPasswordClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		App.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.App, c.AppAction, c.AppMenu, c.AppPolicy, c.AppRes, c.AppRole,
		c.AppRolePolicy, c.Organization, c.OrganizationApp, c.OrganizationPolicy,
		c.OrganizationRole, c.OrganizationUser, c.Permission, c.User, c.UserDevice,
		c.UserIdentity, c.UserLoginProfile, c.UserPassword,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.App, c.AppAction, c.AppMenu, c.AppPolicy, c.AppRes, c.AppRole,
		c.AppRolePolicy, c.Organization, c.OrganizationApp, c.OrganizationPolicy,
		c.OrganizationRole, c.OrganizationUser, c.Permission, c.User, c.UserDevice,
		c.UserIdentity, c.UserLoginProfile, c.UserPassword,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AppMutation:
		return c.App.mutate(ctx, m)
	case *AppActionMutation:
		return c.AppAction.mutate(ctx, m)
	case *AppMenuMutation:
		return c.AppMenu.mutate(ctx, m)
	case *AppPolicyMutation:
		return c.AppPolicy.mutate(ctx, m)
	case *AppResMutation:
		return c.AppRes.mutate(ctx, m)
	case *AppRoleMutation:
		return c.AppRole.mutate(ctx, m)
	case *AppRolePolicyMutation:
		return c.AppRolePolicy.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *OrganizationAppMutation:
		return c.OrganizationApp.mutate(ctx, m)
	case *OrganizationPolicyMutation:
		return c.OrganizationPolicy.mutate(ctx, m)
	case *OrganizationRoleMutation:
		return c.OrganizationRole.mutate(ctx, m)
	case *OrganizationUserMutation:
		return c.OrganizationUser.mutate(ctx, m)
	case *PermissionMutation:
		return c.Permission.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserDeviceMutation:
		return c.UserDevice.mutate(ctx, m)
	case *UserIdentityMutation:
		return c.UserIdentity.mutate(ctx, m)
	case *UserLoginProfileMutation:
		return c.UserLoginProfile.mutate(ctx, m)
	case *UserPasswordMutation:
		return c.UserPassword.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `app.Intercept(f(g(h())))`.
func (c *AppClient) Intercept(interceptors ...Interceptor) {
	c.inters.App = append(c.inters.App, interceptors...)
}

// Create returns a builder for creating a App entity.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id int) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppClient) DeleteOneID(id int) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApp},
		inters: c.Interceptors(),
	}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id int) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id int) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMenus queries the menus edge of a App.
func (c *AppClient) QueryMenus(a *App) *AppMenuQuery {
	query := (&AppMenuClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(appmenu.Table, appmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.MenusTable, app.MenusColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActions queries the actions edge of a App.
func (c *AppClient) QueryActions(a *App) *AppActionQuery {
	query := (&AppActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(appaction.Table, appaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.ActionsTable, app.ActionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResources queries the resources edge of a App.
func (c *AppClient) QueryResources(a *App) *AppResQuery {
	query := (&AppResClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(appres.Table, appres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.ResourcesTable, app.ResourcesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a App.
func (c *AppClient) QueryRoles(a *App) *AppRoleQuery {
	query := (&AppRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(approle.Table, approle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.RolesTable, app.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPolicies queries the policies edge of a App.
func (c *AppClient) QueryPolicies(a *App) *AppPolicyQuery {
	query := (&AppPolicyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(apppolicy.Table, apppolicy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, app.PoliciesTable, app.PoliciesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizations queries the organizations edge of a App.
func (c *AppClient) QueryOrganizations(a *App) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, app.OrganizationsTable, app.OrganizationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationApp queries the organization_app edge of a App.
func (c *AppClient) QueryOrganizationApp(a *App) *OrganizationAppQuery {
	query := (&OrganizationAppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(app.Table, app.FieldID, id),
			sqlgraph.To(organizationapp.Table, organizationapp.AppColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, app.OrganizationAppTable, app.OrganizationAppColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	hooks := c.hooks.App
	return append(hooks[:len(hooks):len(hooks)], app.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppClient) Interceptors() []Interceptor {
	return c.inters.App
}

func (c *AppClient) mutate(ctx context.Context, m *AppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown App mutation op: %q", m.Op())
	}
}

// AppActionClient is a client for the AppAction schema.
type AppActionClient struct {
	config
}

// NewAppActionClient returns a client for the AppAction from the given config.
func NewAppActionClient(c config) *AppActionClient {
	return &AppActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appaction.Hooks(f(g(h())))`.
func (c *AppActionClient) Use(hooks ...Hook) {
	c.hooks.AppAction = append(c.hooks.AppAction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appaction.Intercept(f(g(h())))`.
func (c *AppActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppAction = append(c.inters.AppAction, interceptors...)
}

// Create returns a builder for creating a AppAction entity.
func (c *AppActionClient) Create() *AppActionCreate {
	mutation := newAppActionMutation(c.config, OpCreate)
	return &AppActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppAction entities.
func (c *AppActionClient) CreateBulk(builders ...*AppActionCreate) *AppActionCreateBulk {
	return &AppActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppAction.
func (c *AppActionClient) Update() *AppActionUpdate {
	mutation := newAppActionMutation(c.config, OpUpdate)
	return &AppActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppActionClient) UpdateOne(aa *AppAction) *AppActionUpdateOne {
	mutation := newAppActionMutation(c.config, OpUpdateOne, withAppAction(aa))
	return &AppActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppActionClient) UpdateOneID(id int) *AppActionUpdateOne {
	mutation := newAppActionMutation(c.config, OpUpdateOne, withAppActionID(id))
	return &AppActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppAction.
func (c *AppActionClient) Delete() *AppActionDelete {
	mutation := newAppActionMutation(c.config, OpDelete)
	return &AppActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppActionClient) DeleteOne(aa *AppAction) *AppActionDeleteOne {
	return c.DeleteOneID(aa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppActionClient) DeleteOneID(id int) *AppActionDeleteOne {
	builder := c.Delete().Where(appaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppActionDeleteOne{builder}
}

// Query returns a query builder for AppAction.
func (c *AppActionClient) Query() *AppActionQuery {
	return &AppActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppAction},
		inters: c.Interceptors(),
	}
}

// Get returns a AppAction entity by its id.
func (c *AppActionClient) Get(ctx context.Context, id int) (*AppAction, error) {
	return c.Query().Where(appaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppActionClient) GetX(ctx context.Context, id int) *AppAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppAction.
func (c *AppActionClient) QueryApp(aa *AppAction) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appaction.Table, appaction.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appaction.AppTable, appaction.AppColumn),
		)
		fromV = sqlgraph.Neighbors(aa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMenus queries the menus edge of a AppAction.
func (c *AppActionClient) QueryMenus(aa *AppAction) *AppMenuQuery {
	query := (&AppMenuClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appaction.Table, appaction.FieldID, id),
			sqlgraph.To(appmenu.Table, appmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appaction.MenusTable, appaction.MenusColumn),
		)
		fromV = sqlgraph.Neighbors(aa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResources queries the resources edge of a AppAction.
func (c *AppActionClient) QueryResources(aa *AppAction) *AppResQuery {
	query := (&AppResClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appaction.Table, appaction.FieldID, id),
			sqlgraph.To(appres.Table, appres.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appaction.ResourcesTable, appaction.ResourcesColumn),
		)
		fromV = sqlgraph.Neighbors(aa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppActionClient) Hooks() []Hook {
	hooks := c.hooks.AppAction
	return append(hooks[:len(hooks):len(hooks)], appaction.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppActionClient) Interceptors() []Interceptor {
	return c.inters.AppAction
}

func (c *AppActionClient) mutate(ctx context.Context, m *AppActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppAction mutation op: %q", m.Op())
	}
}

// AppMenuClient is a client for the AppMenu schema.
type AppMenuClient struct {
	config
}

// NewAppMenuClient returns a client for the AppMenu from the given config.
func NewAppMenuClient(c config) *AppMenuClient {
	return &AppMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appmenu.Hooks(f(g(h())))`.
func (c *AppMenuClient) Use(hooks ...Hook) {
	c.hooks.AppMenu = append(c.hooks.AppMenu, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appmenu.Intercept(f(g(h())))`.
func (c *AppMenuClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppMenu = append(c.inters.AppMenu, interceptors...)
}

// Create returns a builder for creating a AppMenu entity.
func (c *AppMenuClient) Create() *AppMenuCreate {
	mutation := newAppMenuMutation(c.config, OpCreate)
	return &AppMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppMenu entities.
func (c *AppMenuClient) CreateBulk(builders ...*AppMenuCreate) *AppMenuCreateBulk {
	return &AppMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppMenu.
func (c *AppMenuClient) Update() *AppMenuUpdate {
	mutation := newAppMenuMutation(c.config, OpUpdate)
	return &AppMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppMenuClient) UpdateOne(am *AppMenu) *AppMenuUpdateOne {
	mutation := newAppMenuMutation(c.config, OpUpdateOne, withAppMenu(am))
	return &AppMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppMenuClient) UpdateOneID(id int) *AppMenuUpdateOne {
	mutation := newAppMenuMutation(c.config, OpUpdateOne, withAppMenuID(id))
	return &AppMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppMenu.
func (c *AppMenuClient) Delete() *AppMenuDelete {
	mutation := newAppMenuMutation(c.config, OpDelete)
	return &AppMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppMenuClient) DeleteOne(am *AppMenu) *AppMenuDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppMenuClient) DeleteOneID(id int) *AppMenuDeleteOne {
	builder := c.Delete().Where(appmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppMenuDeleteOne{builder}
}

// Query returns a query builder for AppMenu.
func (c *AppMenuClient) Query() *AppMenuQuery {
	return &AppMenuQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppMenu},
		inters: c.Interceptors(),
	}
}

// Get returns a AppMenu entity by its id.
func (c *AppMenuClient) Get(ctx context.Context, id int) (*AppMenu, error) {
	return c.Query().Where(appmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppMenuClient) GetX(ctx context.Context, id int) *AppMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppMenu.
func (c *AppMenuClient) QueryApp(am *AppMenu) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appmenu.Table, appmenu.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appmenu.AppTable, appmenu.AppColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAction queries the action edge of a AppMenu.
func (c *AppMenuClient) QueryAction(am *AppMenu) *AppActionQuery {
	query := (&AppActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appmenu.Table, appmenu.FieldID, id),
			sqlgraph.To(appaction.Table, appaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appmenu.ActionTable, appmenu.ActionColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppMenuClient) Hooks() []Hook {
	hooks := c.hooks.AppMenu
	return append(hooks[:len(hooks):len(hooks)], appmenu.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppMenuClient) Interceptors() []Interceptor {
	return c.inters.AppMenu
}

func (c *AppMenuClient) mutate(ctx context.Context, m *AppMenuMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppMenuCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppMenuDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppMenu mutation op: %q", m.Op())
	}
}

// AppPolicyClient is a client for the AppPolicy schema.
type AppPolicyClient struct {
	config
}

// NewAppPolicyClient returns a client for the AppPolicy from the given config.
func NewAppPolicyClient(c config) *AppPolicyClient {
	return &AppPolicyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apppolicy.Hooks(f(g(h())))`.
func (c *AppPolicyClient) Use(hooks ...Hook) {
	c.hooks.AppPolicy = append(c.hooks.AppPolicy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apppolicy.Intercept(f(g(h())))`.
func (c *AppPolicyClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppPolicy = append(c.inters.AppPolicy, interceptors...)
}

// Create returns a builder for creating a AppPolicy entity.
func (c *AppPolicyClient) Create() *AppPolicyCreate {
	mutation := newAppPolicyMutation(c.config, OpCreate)
	return &AppPolicyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppPolicy entities.
func (c *AppPolicyClient) CreateBulk(builders ...*AppPolicyCreate) *AppPolicyCreateBulk {
	return &AppPolicyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppPolicy.
func (c *AppPolicyClient) Update() *AppPolicyUpdate {
	mutation := newAppPolicyMutation(c.config, OpUpdate)
	return &AppPolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppPolicyClient) UpdateOne(ap *AppPolicy) *AppPolicyUpdateOne {
	mutation := newAppPolicyMutation(c.config, OpUpdateOne, withAppPolicy(ap))
	return &AppPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppPolicyClient) UpdateOneID(id int) *AppPolicyUpdateOne {
	mutation := newAppPolicyMutation(c.config, OpUpdateOne, withAppPolicyID(id))
	return &AppPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppPolicy.
func (c *AppPolicyClient) Delete() *AppPolicyDelete {
	mutation := newAppPolicyMutation(c.config, OpDelete)
	return &AppPolicyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppPolicyClient) DeleteOne(ap *AppPolicy) *AppPolicyDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppPolicyClient) DeleteOneID(id int) *AppPolicyDeleteOne {
	builder := c.Delete().Where(apppolicy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppPolicyDeleteOne{builder}
}

// Query returns a query builder for AppPolicy.
func (c *AppPolicyClient) Query() *AppPolicyQuery {
	return &AppPolicyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppPolicy},
		inters: c.Interceptors(),
	}
}

// Get returns a AppPolicy entity by its id.
func (c *AppPolicyClient) Get(ctx context.Context, id int) (*AppPolicy, error) {
	return c.Query().Where(apppolicy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppPolicyClient) GetX(ctx context.Context, id int) *AppPolicy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppPolicy.
func (c *AppPolicyClient) QueryApp(ap *AppPolicy) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apppolicy.Table, apppolicy.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apppolicy.AppTable, apppolicy.AppColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a AppPolicy.
func (c *AppPolicyClient) QueryRoles(ap *AppPolicy) *AppRoleQuery {
	query := (&AppRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apppolicy.Table, apppolicy.FieldID, id),
			sqlgraph.To(approle.Table, approle.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, apppolicy.RolesTable, apppolicy.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppRolePolicy queries the app_role_policy edge of a AppPolicy.
func (c *AppPolicyClient) QueryAppRolePolicy(ap *AppPolicy) *AppRolePolicyQuery {
	query := (&AppRolePolicyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apppolicy.Table, apppolicy.FieldID, id),
			sqlgraph.To(approlepolicy.Table, approlepolicy.PolicyColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, apppolicy.AppRolePolicyTable, apppolicy.AppRolePolicyColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppPolicyClient) Hooks() []Hook {
	hooks := c.hooks.AppPolicy
	return append(hooks[:len(hooks):len(hooks)], apppolicy.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppPolicyClient) Interceptors() []Interceptor {
	return c.inters.AppPolicy
}

func (c *AppPolicyClient) mutate(ctx context.Context, m *AppPolicyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppPolicyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppPolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppPolicyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppPolicy mutation op: %q", m.Op())
	}
}

// AppResClient is a client for the AppRes schema.
type AppResClient struct {
	config
}

// NewAppResClient returns a client for the AppRes from the given config.
func NewAppResClient(c config) *AppResClient {
	return &AppResClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appres.Hooks(f(g(h())))`.
func (c *AppResClient) Use(hooks ...Hook) {
	c.hooks.AppRes = append(c.hooks.AppRes, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appres.Intercept(f(g(h())))`.
func (c *AppResClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppRes = append(c.inters.AppRes, interceptors...)
}

// Create returns a builder for creating a AppRes entity.
func (c *AppResClient) Create() *AppResCreate {
	mutation := newAppResMutation(c.config, OpCreate)
	return &AppResCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppRes entities.
func (c *AppResClient) CreateBulk(builders ...*AppResCreate) *AppResCreateBulk {
	return &AppResCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppRes.
func (c *AppResClient) Update() *AppResUpdate {
	mutation := newAppResMutation(c.config, OpUpdate)
	return &AppResUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppResClient) UpdateOne(ar *AppRes) *AppResUpdateOne {
	mutation := newAppResMutation(c.config, OpUpdateOne, withAppRes(ar))
	return &AppResUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppResClient) UpdateOneID(id int) *AppResUpdateOne {
	mutation := newAppResMutation(c.config, OpUpdateOne, withAppResID(id))
	return &AppResUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppRes.
func (c *AppResClient) Delete() *AppResDelete {
	mutation := newAppResMutation(c.config, OpDelete)
	return &AppResDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppResClient) DeleteOne(ar *AppRes) *AppResDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppResClient) DeleteOneID(id int) *AppResDeleteOne {
	builder := c.Delete().Where(appres.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppResDeleteOne{builder}
}

// Query returns a query builder for AppRes.
func (c *AppResClient) Query() *AppResQuery {
	return &AppResQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppRes},
		inters: c.Interceptors(),
	}
}

// Get returns a AppRes entity by its id.
func (c *AppResClient) Get(ctx context.Context, id int) (*AppRes, error) {
	return c.Query().Where(appres.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppResClient) GetX(ctx context.Context, id int) *AppRes {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppRes.
func (c *AppResClient) QueryApp(ar *AppRes) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appres.Table, appres.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appres.AppTable, appres.AppColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppResClient) Hooks() []Hook {
	hooks := c.hooks.AppRes
	return append(hooks[:len(hooks):len(hooks)], appres.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppResClient) Interceptors() []Interceptor {
	return c.inters.AppRes
}

func (c *AppResClient) mutate(ctx context.Context, m *AppResMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppResCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppResUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppResUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppResDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppRes mutation op: %q", m.Op())
	}
}

// AppRoleClient is a client for the AppRole schema.
type AppRoleClient struct {
	config
}

// NewAppRoleClient returns a client for the AppRole from the given config.
func NewAppRoleClient(c config) *AppRoleClient {
	return &AppRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approle.Hooks(f(g(h())))`.
func (c *AppRoleClient) Use(hooks ...Hook) {
	c.hooks.AppRole = append(c.hooks.AppRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `approle.Intercept(f(g(h())))`.
func (c *AppRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppRole = append(c.inters.AppRole, interceptors...)
}

// Create returns a builder for creating a AppRole entity.
func (c *AppRoleClient) Create() *AppRoleCreate {
	mutation := newAppRoleMutation(c.config, OpCreate)
	return &AppRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppRole entities.
func (c *AppRoleClient) CreateBulk(builders ...*AppRoleCreate) *AppRoleCreateBulk {
	return &AppRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppRole.
func (c *AppRoleClient) Update() *AppRoleUpdate {
	mutation := newAppRoleMutation(c.config, OpUpdate)
	return &AppRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppRoleClient) UpdateOne(ar *AppRole) *AppRoleUpdateOne {
	mutation := newAppRoleMutation(c.config, OpUpdateOne, withAppRole(ar))
	return &AppRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppRoleClient) UpdateOneID(id int) *AppRoleUpdateOne {
	mutation := newAppRoleMutation(c.config, OpUpdateOne, withAppRoleID(id))
	return &AppRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppRole.
func (c *AppRoleClient) Delete() *AppRoleDelete {
	mutation := newAppRoleMutation(c.config, OpDelete)
	return &AppRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppRoleClient) DeleteOne(ar *AppRole) *AppRoleDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppRoleClient) DeleteOneID(id int) *AppRoleDeleteOne {
	builder := c.Delete().Where(approle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppRoleDeleteOne{builder}
}

// Query returns a query builder for AppRole.
func (c *AppRoleClient) Query() *AppRoleQuery {
	return &AppRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppRole},
		inters: c.Interceptors(),
	}
}

// Get returns a AppRole entity by its id.
func (c *AppRoleClient) Get(ctx context.Context, id int) (*AppRole, error) {
	return c.Query().Where(approle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppRoleClient) GetX(ctx context.Context, id int) *AppRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApp queries the app edge of a AppRole.
func (c *AppRoleClient) QueryApp(ar *AppRole) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approle.Table, approle.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, approle.AppTable, approle.AppColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPolicies queries the policies edge of a AppRole.
func (c *AppRoleClient) QueryPolicies(ar *AppRole) *AppPolicyQuery {
	query := (&AppPolicyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approle.Table, approle.FieldID, id),
			sqlgraph.To(apppolicy.Table, apppolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, approle.PoliciesTable, approle.PoliciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppRolePolicy queries the app_role_policy edge of a AppRole.
func (c *AppRoleClient) QueryAppRolePolicy(ar *AppRole) *AppRolePolicyQuery {
	query := (&AppRolePolicyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approle.Table, approle.FieldID, id),
			sqlgraph.To(approlepolicy.Table, approlepolicy.RoleColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, approle.AppRolePolicyTable, approle.AppRolePolicyColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppRoleClient) Hooks() []Hook {
	hooks := c.hooks.AppRole
	return append(hooks[:len(hooks):len(hooks)], approle.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppRoleClient) Interceptors() []Interceptor {
	return c.inters.AppRole
}

func (c *AppRoleClient) mutate(ctx context.Context, m *AppRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppRole mutation op: %q", m.Op())
	}
}

// AppRolePolicyClient is a client for the AppRolePolicy schema.
type AppRolePolicyClient struct {
	config
}

// NewAppRolePolicyClient returns a client for the AppRolePolicy from the given config.
func NewAppRolePolicyClient(c config) *AppRolePolicyClient {
	return &AppRolePolicyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approlepolicy.Hooks(f(g(h())))`.
func (c *AppRolePolicyClient) Use(hooks ...Hook) {
	c.hooks.AppRolePolicy = append(c.hooks.AppRolePolicy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `approlepolicy.Intercept(f(g(h())))`.
func (c *AppRolePolicyClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppRolePolicy = append(c.inters.AppRolePolicy, interceptors...)
}

// Create returns a builder for creating a AppRolePolicy entity.
func (c *AppRolePolicyClient) Create() *AppRolePolicyCreate {
	mutation := newAppRolePolicyMutation(c.config, OpCreate)
	return &AppRolePolicyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppRolePolicy entities.
func (c *AppRolePolicyClient) CreateBulk(builders ...*AppRolePolicyCreate) *AppRolePolicyCreateBulk {
	return &AppRolePolicyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppRolePolicy.
func (c *AppRolePolicyClient) Update() *AppRolePolicyUpdate {
	mutation := newAppRolePolicyMutation(c.config, OpUpdate)
	return &AppRolePolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppRolePolicyClient) UpdateOne(arp *AppRolePolicy) *AppRolePolicyUpdateOne {
	mutation := newAppRolePolicyMutation(c.config, OpUpdateOne)
	mutation.role = &arp.RoleID
	mutation.policy = &arp.PolicyID
	return &AppRolePolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppRolePolicy.
func (c *AppRolePolicyClient) Delete() *AppRolePolicyDelete {
	mutation := newAppRolePolicyMutation(c.config, OpDelete)
	return &AppRolePolicyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for AppRolePolicy.
func (c *AppRolePolicyClient) Query() *AppRolePolicyQuery {
	return &AppRolePolicyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppRolePolicy},
		inters: c.Interceptors(),
	}
}

// QueryRole queries the role edge of a AppRolePolicy.
func (c *AppRolePolicyClient) QueryRole(arp *AppRolePolicy) *AppRoleQuery {
	return c.Query().
		Where(approlepolicy.RoleID(arp.RoleID), approlepolicy.PolicyID(arp.PolicyID)).
		QueryRole()
}

// QueryPolicy queries the policy edge of a AppRolePolicy.
func (c *AppRolePolicyClient) QueryPolicy(arp *AppRolePolicy) *AppPolicyQuery {
	return c.Query().
		Where(approlepolicy.RoleID(arp.RoleID), approlepolicy.PolicyID(arp.PolicyID)).
		QueryPolicy()
}

// Hooks returns the client hooks.
func (c *AppRolePolicyClient) Hooks() []Hook {
	hooks := c.hooks.AppRolePolicy
	return append(hooks[:len(hooks):len(hooks)], approlepolicy.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AppRolePolicyClient) Interceptors() []Interceptor {
	return c.inters.AppRolePolicy
}

func (c *AppRolePolicyClient) mutate(ctx context.Context, m *AppRolePolicyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppRolePolicyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppRolePolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppRolePolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppRolePolicyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AppRolePolicy mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id int) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id int) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id int) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id int) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a Organization.
func (c *OrganizationClient) QueryParent(o *Organization) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organization.ParentTable, organization.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Organization.
func (c *OrganizationClient) QueryChildren(o *Organization) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ChildrenTable, organization.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Organization.
func (c *OrganizationClient) QueryOwner(o *Organization) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organization.OwnerTable, organization.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Organization.
func (c *OrganizationClient) QueryUsers(o *Organization) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.UsersTable, organization.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolesAndGroups queries the rolesAndGroups edge of a Organization.
func (c *OrganizationClient) QueryRolesAndGroups(o *Organization) *OrganizationRoleQuery {
	query := (&OrganizationRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationrole.Table, organizationrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.RolesAndGroupsTable, organization.RolesAndGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a Organization.
func (c *OrganizationClient) QueryPermissions(o *Organization) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.PermissionsTable, organization.PermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPolicies queries the policies edge of a Organization.
func (c *OrganizationClient) QueryPolicies(o *Organization) *OrganizationPolicyQuery {
	query := (&OrganizationPolicyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationpolicy.Table, organizationpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.PoliciesTable, organization.PoliciesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApps queries the apps edge of a Organization.
func (c *OrganizationClient) QueryApps(o *Organization) *AppQuery {
	query := (&AppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.AppsTable, organization.AppsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationUser queries the organization_user edge of a Organization.
func (c *OrganizationClient) QueryOrganizationUser(o *Organization) *OrganizationUserQuery {
	query := (&OrganizationUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationuser.Table, organizationuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, organization.OrganizationUserTable, organization.OrganizationUserColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationApp queries the organization_app edge of a Organization.
func (c *OrganizationClient) QueryOrganizationApp(o *Organization) *OrganizationAppQuery {
	query := (&OrganizationAppClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationapp.Table, organizationapp.OrganizationColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, organization.OrganizationAppTable, organization.OrganizationAppColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	hooks := c.hooks.Organization
	return append(hooks[:len(hooks):len(hooks)], organization.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	inters := c.inters.Organization
	return append(inters[:len(inters):len(inters)], organization.Interceptors[:]...)
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// OrganizationAppClient is a client for the OrganizationApp schema.
type OrganizationAppClient struct {
	config
}

// NewOrganizationAppClient returns a client for the OrganizationApp from the given config.
func NewOrganizationAppClient(c config) *OrganizationAppClient {
	return &OrganizationAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationapp.Hooks(f(g(h())))`.
func (c *OrganizationAppClient) Use(hooks ...Hook) {
	c.hooks.OrganizationApp = append(c.hooks.OrganizationApp, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationapp.Intercept(f(g(h())))`.
func (c *OrganizationAppClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationApp = append(c.inters.OrganizationApp, interceptors...)
}

// Create returns a builder for creating a OrganizationApp entity.
func (c *OrganizationAppClient) Create() *OrganizationAppCreate {
	mutation := newOrganizationAppMutation(c.config, OpCreate)
	return &OrganizationAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationApp entities.
func (c *OrganizationAppClient) CreateBulk(builders ...*OrganizationAppCreate) *OrganizationAppCreateBulk {
	return &OrganizationAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationApp.
func (c *OrganizationAppClient) Update() *OrganizationAppUpdate {
	mutation := newOrganizationAppMutation(c.config, OpUpdate)
	return &OrganizationAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationAppClient) UpdateOne(oa *OrganizationApp) *OrganizationAppUpdateOne {
	mutation := newOrganizationAppMutation(c.config, OpUpdateOne)
	mutation.organization = &oa.OrgID
	mutation.app = &oa.AppID
	return &OrganizationAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationApp.
func (c *OrganizationAppClient) Delete() *OrganizationAppDelete {
	mutation := newOrganizationAppMutation(c.config, OpDelete)
	return &OrganizationAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for OrganizationApp.
func (c *OrganizationAppClient) Query() *OrganizationAppQuery {
	return &OrganizationAppQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationApp},
		inters: c.Interceptors(),
	}
}

// QueryApp queries the app edge of a OrganizationApp.
func (c *OrganizationAppClient) QueryApp(oa *OrganizationApp) *AppQuery {
	return c.Query().
		Where(organizationapp.OrgID(oa.OrgID), organizationapp.AppID(oa.AppID)).
		QueryApp()
}

// QueryOrganization queries the organization edge of a OrganizationApp.
func (c *OrganizationAppClient) QueryOrganization(oa *OrganizationApp) *OrganizationQuery {
	return c.Query().
		Where(organizationapp.OrgID(oa.OrgID), organizationapp.AppID(oa.AppID)).
		QueryOrganization()
}

// Hooks returns the client hooks.
func (c *OrganizationAppClient) Hooks() []Hook {
	hooks := c.hooks.OrganizationApp
	return append(hooks[:len(hooks):len(hooks)], organizationapp.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrganizationAppClient) Interceptors() []Interceptor {
	return c.inters.OrganizationApp
}

func (c *OrganizationAppClient) mutate(ctx context.Context, m *OrganizationAppMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationAppCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationAppUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationAppDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationApp mutation op: %q", m.Op())
	}
}

// OrganizationPolicyClient is a client for the OrganizationPolicy schema.
type OrganizationPolicyClient struct {
	config
}

// NewOrganizationPolicyClient returns a client for the OrganizationPolicy from the given config.
func NewOrganizationPolicyClient(c config) *OrganizationPolicyClient {
	return &OrganizationPolicyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationpolicy.Hooks(f(g(h())))`.
func (c *OrganizationPolicyClient) Use(hooks ...Hook) {
	c.hooks.OrganizationPolicy = append(c.hooks.OrganizationPolicy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationpolicy.Intercept(f(g(h())))`.
func (c *OrganizationPolicyClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationPolicy = append(c.inters.OrganizationPolicy, interceptors...)
}

// Create returns a builder for creating a OrganizationPolicy entity.
func (c *OrganizationPolicyClient) Create() *OrganizationPolicyCreate {
	mutation := newOrganizationPolicyMutation(c.config, OpCreate)
	return &OrganizationPolicyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationPolicy entities.
func (c *OrganizationPolicyClient) CreateBulk(builders ...*OrganizationPolicyCreate) *OrganizationPolicyCreateBulk {
	return &OrganizationPolicyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationPolicy.
func (c *OrganizationPolicyClient) Update() *OrganizationPolicyUpdate {
	mutation := newOrganizationPolicyMutation(c.config, OpUpdate)
	return &OrganizationPolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationPolicyClient) UpdateOne(op *OrganizationPolicy) *OrganizationPolicyUpdateOne {
	mutation := newOrganizationPolicyMutation(c.config, OpUpdateOne, withOrganizationPolicy(op))
	return &OrganizationPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationPolicyClient) UpdateOneID(id int) *OrganizationPolicyUpdateOne {
	mutation := newOrganizationPolicyMutation(c.config, OpUpdateOne, withOrganizationPolicyID(id))
	return &OrganizationPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationPolicy.
func (c *OrganizationPolicyClient) Delete() *OrganizationPolicyDelete {
	mutation := newOrganizationPolicyMutation(c.config, OpDelete)
	return &OrganizationPolicyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationPolicyClient) DeleteOne(op *OrganizationPolicy) *OrganizationPolicyDeleteOne {
	return c.DeleteOneID(op.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationPolicyClient) DeleteOneID(id int) *OrganizationPolicyDeleteOne {
	builder := c.Delete().Where(organizationpolicy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationPolicyDeleteOne{builder}
}

// Query returns a query builder for OrganizationPolicy.
func (c *OrganizationPolicyClient) Query() *OrganizationPolicyQuery {
	return &OrganizationPolicyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationPolicy},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationPolicy entity by its id.
func (c *OrganizationPolicyClient) Get(ctx context.Context, id int) (*OrganizationPolicy, error) {
	return c.Query().Where(organizationpolicy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationPolicyClient) GetX(ctx context.Context, id int) *OrganizationPolicy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a OrganizationPolicy.
func (c *OrganizationPolicyClient) QueryOrganization(op *OrganizationPolicy) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationpolicy.Table, organizationpolicy.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationpolicy.OrganizationTable, organizationpolicy.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationPolicyClient) Hooks() []Hook {
	hooks := c.hooks.OrganizationPolicy
	return append(hooks[:len(hooks):len(hooks)], organizationpolicy.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrganizationPolicyClient) Interceptors() []Interceptor {
	return c.inters.OrganizationPolicy
}

func (c *OrganizationPolicyClient) mutate(ctx context.Context, m *OrganizationPolicyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationPolicyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationPolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationPolicyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationPolicy mutation op: %q", m.Op())
	}
}

// OrganizationRoleClient is a client for the OrganizationRole schema.
type OrganizationRoleClient struct {
	config
}

// NewOrganizationRoleClient returns a client for the OrganizationRole from the given config.
func NewOrganizationRoleClient(c config) *OrganizationRoleClient {
	return &OrganizationRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationrole.Hooks(f(g(h())))`.
func (c *OrganizationRoleClient) Use(hooks ...Hook) {
	c.hooks.OrganizationRole = append(c.hooks.OrganizationRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationrole.Intercept(f(g(h())))`.
func (c *OrganizationRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationRole = append(c.inters.OrganizationRole, interceptors...)
}

// Create returns a builder for creating a OrganizationRole entity.
func (c *OrganizationRoleClient) Create() *OrganizationRoleCreate {
	mutation := newOrganizationRoleMutation(c.config, OpCreate)
	return &OrganizationRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationRole entities.
func (c *OrganizationRoleClient) CreateBulk(builders ...*OrganizationRoleCreate) *OrganizationRoleCreateBulk {
	return &OrganizationRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationRole.
func (c *OrganizationRoleClient) Update() *OrganizationRoleUpdate {
	mutation := newOrganizationRoleMutation(c.config, OpUpdate)
	return &OrganizationRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationRoleClient) UpdateOne(or *OrganizationRole) *OrganizationRoleUpdateOne {
	mutation := newOrganizationRoleMutation(c.config, OpUpdateOne, withOrganizationRole(or))
	return &OrganizationRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationRoleClient) UpdateOneID(id int) *OrganizationRoleUpdateOne {
	mutation := newOrganizationRoleMutation(c.config, OpUpdateOne, withOrganizationRoleID(id))
	return &OrganizationRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationRole.
func (c *OrganizationRoleClient) Delete() *OrganizationRoleDelete {
	mutation := newOrganizationRoleMutation(c.config, OpDelete)
	return &OrganizationRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationRoleClient) DeleteOne(or *OrganizationRole) *OrganizationRoleDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationRoleClient) DeleteOneID(id int) *OrganizationRoleDeleteOne {
	builder := c.Delete().Where(organizationrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationRoleDeleteOne{builder}
}

// Query returns a query builder for OrganizationRole.
func (c *OrganizationRoleClient) Query() *OrganizationRoleQuery {
	return &OrganizationRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationRole},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationRole entity by its id.
func (c *OrganizationRoleClient) Get(ctx context.Context, id int) (*OrganizationRole, error) {
	return c.Query().Where(organizationrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationRoleClient) GetX(ctx context.Context, id int) *OrganizationRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a OrganizationRole.
func (c *OrganizationRoleClient) QueryOrganization(or *OrganizationRole) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationrole.Table, organizationrole.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organizationrole.OrganizationTable, organizationrole.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationRoleClient) Hooks() []Hook {
	hooks := c.hooks.OrganizationRole
	return append(hooks[:len(hooks):len(hooks)], organizationrole.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrganizationRoleClient) Interceptors() []Interceptor {
	return c.inters.OrganizationRole
}

func (c *OrganizationRoleClient) mutate(ctx context.Context, m *OrganizationRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationRole mutation op: %q", m.Op())
	}
}

// OrganizationUserClient is a client for the OrganizationUser schema.
type OrganizationUserClient struct {
	config
}

// NewOrganizationUserClient returns a client for the OrganizationUser from the given config.
func NewOrganizationUserClient(c config) *OrganizationUserClient {
	return &OrganizationUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationuser.Hooks(f(g(h())))`.
func (c *OrganizationUserClient) Use(hooks ...Hook) {
	c.hooks.OrganizationUser = append(c.hooks.OrganizationUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationuser.Intercept(f(g(h())))`.
func (c *OrganizationUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationUser = append(c.inters.OrganizationUser, interceptors...)
}

// Create returns a builder for creating a OrganizationUser entity.
func (c *OrganizationUserClient) Create() *OrganizationUserCreate {
	mutation := newOrganizationUserMutation(c.config, OpCreate)
	return &OrganizationUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationUser entities.
func (c *OrganizationUserClient) CreateBulk(builders ...*OrganizationUserCreate) *OrganizationUserCreateBulk {
	return &OrganizationUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationUser.
func (c *OrganizationUserClient) Update() *OrganizationUserUpdate {
	mutation := newOrganizationUserMutation(c.config, OpUpdate)
	return &OrganizationUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationUserClient) UpdateOne(ou *OrganizationUser) *OrganizationUserUpdateOne {
	mutation := newOrganizationUserMutation(c.config, OpUpdateOne, withOrganizationUser(ou))
	return &OrganizationUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationUserClient) UpdateOneID(id int) *OrganizationUserUpdateOne {
	mutation := newOrganizationUserMutation(c.config, OpUpdateOne, withOrganizationUserID(id))
	return &OrganizationUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationUser.
func (c *OrganizationUserClient) Delete() *OrganizationUserDelete {
	mutation := newOrganizationUserMutation(c.config, OpDelete)
	return &OrganizationUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationUserClient) DeleteOne(ou *OrganizationUser) *OrganizationUserDeleteOne {
	return c.DeleteOneID(ou.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationUserClient) DeleteOneID(id int) *OrganizationUserDeleteOne {
	builder := c.Delete().Where(organizationuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationUserDeleteOne{builder}
}

// Query returns a query builder for OrganizationUser.
func (c *OrganizationUserClient) Query() *OrganizationUserQuery {
	return &OrganizationUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationUser},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationUser entity by its id.
func (c *OrganizationUserClient) Get(ctx context.Context, id int) (*OrganizationUser, error) {
	return c.Query().Where(organizationuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationUserClient) GetX(ctx context.Context, id int) *OrganizationUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a OrganizationUser.
func (c *OrganizationUserClient) QueryOrganization(ou *OrganizationUser) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationuser.Table, organizationuser.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organizationuser.OrganizationTable, organizationuser.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a OrganizationUser.
func (c *OrganizationUserClient) QueryUser(ou *OrganizationUser) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationuser.Table, organizationuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, organizationuser.UserTable, organizationuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationUserClient) Hooks() []Hook {
	hooks := c.hooks.OrganizationUser
	return append(hooks[:len(hooks):len(hooks)], organizationuser.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrganizationUserClient) Interceptors() []Interceptor {
	return c.inters.OrganizationUser
}

func (c *OrganizationUserClient) mutate(ctx context.Context, m *OrganizationUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationUser mutation op: %q", m.Op())
	}
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `permission.Intercept(f(g(h())))`.
func (c *PermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Permission = append(c.inters.Permission, interceptors...)
}

// Create returns a builder for creating a Permission entity.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id int) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionClient) DeleteOneID(id int) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePermission},
		inters: c.Interceptors(),
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id int) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id int) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a Permission.
func (c *PermissionClient) QueryOrganization(pe *Permission) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, permission.OrganizationTable, permission.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Permission.
func (c *PermissionClient) QueryUser(pe *Permission) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permission.UserTable, permission.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	hooks := c.hooks.Permission
	return append(hooks[:len(hooks):len(hooks)], permission.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PermissionClient) Interceptors() []Interceptor {
	return c.inters.Permission
}

func (c *PermissionClient) mutate(ctx context.Context, m *PermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Permission mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIdentities queries the identities edge of a User.
func (c *UserClient) QueryIdentities(u *User) *UserIdentityQuery {
	query := (&UserIdentityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useridentity.Table, useridentity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IdentitiesTable, user.IdentitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLoginProfile queries the login_profile edge of a User.
func (c *UserClient) QueryLoginProfile(u *User) *UserLoginProfileQuery {
	query := (&UserLoginProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userloginprofile.Table, userloginprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.LoginProfileTable, user.LoginProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasswords queries the passwords edge of a User.
func (c *UserClient) QueryPasswords(u *User) *UserPasswordQuery {
	query := (&UserPasswordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpassword.Table, userpassword.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasswordsTable, user.PasswordsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevices queries the devices edge of a User.
func (c *UserClient) QueryDevices(u *User) *UserDeviceQuery {
	query := (&UserDeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userdevice.Table, userdevice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DevicesTable, user.DevicesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizations queries the organizations edge of a User.
func (c *UserClient) QueryOrganizations(u *User) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.OrganizationsTable, user.OrganizationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a User.
func (c *UserClient) QueryPermissions(u *User) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.PermissionsTable, user.PermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganizationUser queries the organization_user edge of a User.
func (c *UserClient) QueryOrganizationUser(u *User) *OrganizationUserQuery {
	query := (&OrganizationUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organizationuser.Table, organizationuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.OrganizationUserTable, user.OrganizationUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserDeviceClient is a client for the UserDevice schema.
type UserDeviceClient struct {
	config
}

// NewUserDeviceClient returns a client for the UserDevice from the given config.
func NewUserDeviceClient(c config) *UserDeviceClient {
	return &UserDeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userdevice.Hooks(f(g(h())))`.
func (c *UserDeviceClient) Use(hooks ...Hook) {
	c.hooks.UserDevice = append(c.hooks.UserDevice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userdevice.Intercept(f(g(h())))`.
func (c *UserDeviceClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserDevice = append(c.inters.UserDevice, interceptors...)
}

// Create returns a builder for creating a UserDevice entity.
func (c *UserDeviceClient) Create() *UserDeviceCreate {
	mutation := newUserDeviceMutation(c.config, OpCreate)
	return &UserDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserDevice entities.
func (c *UserDeviceClient) CreateBulk(builders ...*UserDeviceCreate) *UserDeviceCreateBulk {
	return &UserDeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserDevice.
func (c *UserDeviceClient) Update() *UserDeviceUpdate {
	mutation := newUserDeviceMutation(c.config, OpUpdate)
	return &UserDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserDeviceClient) UpdateOne(ud *UserDevice) *UserDeviceUpdateOne {
	mutation := newUserDeviceMutation(c.config, OpUpdateOne, withUserDevice(ud))
	return &UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserDeviceClient) UpdateOneID(id int) *UserDeviceUpdateOne {
	mutation := newUserDeviceMutation(c.config, OpUpdateOne, withUserDeviceID(id))
	return &UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserDevice.
func (c *UserDeviceClient) Delete() *UserDeviceDelete {
	mutation := newUserDeviceMutation(c.config, OpDelete)
	return &UserDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserDeviceClient) DeleteOne(ud *UserDevice) *UserDeviceDeleteOne {
	return c.DeleteOneID(ud.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserDeviceClient) DeleteOneID(id int) *UserDeviceDeleteOne {
	builder := c.Delete().Where(userdevice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeviceDeleteOne{builder}
}

// Query returns a query builder for UserDevice.
func (c *UserDeviceClient) Query() *UserDeviceQuery {
	return &UserDeviceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserDevice},
		inters: c.Interceptors(),
	}
}

// Get returns a UserDevice entity by its id.
func (c *UserDeviceClient) Get(ctx context.Context, id int) (*UserDevice, error) {
	return c.Query().Where(userdevice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserDeviceClient) GetX(ctx context.Context, id int) *UserDevice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserDevice.
func (c *UserDeviceClient) QueryUser(ud *UserDevice) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ud.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdevice.Table, userdevice.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userdevice.UserTable, userdevice.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ud.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserDeviceClient) Hooks() []Hook {
	hooks := c.hooks.UserDevice
	return append(hooks[:len(hooks):len(hooks)], userdevice.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserDeviceClient) Interceptors() []Interceptor {
	return c.inters.UserDevice
}

func (c *UserDeviceClient) mutate(ctx context.Context, m *UserDeviceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserDevice mutation op: %q", m.Op())
	}
}

// UserIdentityClient is a client for the UserIdentity schema.
type UserIdentityClient struct {
	config
}

// NewUserIdentityClient returns a client for the UserIdentity from the given config.
func NewUserIdentityClient(c config) *UserIdentityClient {
	return &UserIdentityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useridentity.Hooks(f(g(h())))`.
func (c *UserIdentityClient) Use(hooks ...Hook) {
	c.hooks.UserIdentity = append(c.hooks.UserIdentity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `useridentity.Intercept(f(g(h())))`.
func (c *UserIdentityClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserIdentity = append(c.inters.UserIdentity, interceptors...)
}

// Create returns a builder for creating a UserIdentity entity.
func (c *UserIdentityClient) Create() *UserIdentityCreate {
	mutation := newUserIdentityMutation(c.config, OpCreate)
	return &UserIdentityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserIdentity entities.
func (c *UserIdentityClient) CreateBulk(builders ...*UserIdentityCreate) *UserIdentityCreateBulk {
	return &UserIdentityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserIdentity.
func (c *UserIdentityClient) Update() *UserIdentityUpdate {
	mutation := newUserIdentityMutation(c.config, OpUpdate)
	return &UserIdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserIdentityClient) UpdateOne(ui *UserIdentity) *UserIdentityUpdateOne {
	mutation := newUserIdentityMutation(c.config, OpUpdateOne, withUserIdentity(ui))
	return &UserIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserIdentityClient) UpdateOneID(id int) *UserIdentityUpdateOne {
	mutation := newUserIdentityMutation(c.config, OpUpdateOne, withUserIdentityID(id))
	return &UserIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserIdentity.
func (c *UserIdentityClient) Delete() *UserIdentityDelete {
	mutation := newUserIdentityMutation(c.config, OpDelete)
	return &UserIdentityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserIdentityClient) DeleteOne(ui *UserIdentity) *UserIdentityDeleteOne {
	return c.DeleteOneID(ui.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserIdentityClient) DeleteOneID(id int) *UserIdentityDeleteOne {
	builder := c.Delete().Where(useridentity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserIdentityDeleteOne{builder}
}

// Query returns a query builder for UserIdentity.
func (c *UserIdentityClient) Query() *UserIdentityQuery {
	return &UserIdentityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserIdentity},
		inters: c.Interceptors(),
	}
}

// Get returns a UserIdentity entity by its id.
func (c *UserIdentityClient) Get(ctx context.Context, id int) (*UserIdentity, error) {
	return c.Query().Where(useridentity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserIdentityClient) GetX(ctx context.Context, id int) *UserIdentity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserIdentity.
func (c *UserIdentityClient) QueryUser(ui *UserIdentity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ui.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useridentity.Table, useridentity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useridentity.UserTable, useridentity.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ui.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserIdentityClient) Hooks() []Hook {
	hooks := c.hooks.UserIdentity
	return append(hooks[:len(hooks):len(hooks)], useridentity.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserIdentityClient) Interceptors() []Interceptor {
	return c.inters.UserIdentity
}

func (c *UserIdentityClient) mutate(ctx context.Context, m *UserIdentityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserIdentityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserIdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserIdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserIdentityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserIdentity mutation op: %q", m.Op())
	}
}

// UserLoginProfileClient is a client for the UserLoginProfile schema.
type UserLoginProfileClient struct {
	config
}

// NewUserLoginProfileClient returns a client for the UserLoginProfile from the given config.
func NewUserLoginProfileClient(c config) *UserLoginProfileClient {
	return &UserLoginProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userloginprofile.Hooks(f(g(h())))`.
func (c *UserLoginProfileClient) Use(hooks ...Hook) {
	c.hooks.UserLoginProfile = append(c.hooks.UserLoginProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userloginprofile.Intercept(f(g(h())))`.
func (c *UserLoginProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserLoginProfile = append(c.inters.UserLoginProfile, interceptors...)
}

// Create returns a builder for creating a UserLoginProfile entity.
func (c *UserLoginProfileClient) Create() *UserLoginProfileCreate {
	mutation := newUserLoginProfileMutation(c.config, OpCreate)
	return &UserLoginProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLoginProfile entities.
func (c *UserLoginProfileClient) CreateBulk(builders ...*UserLoginProfileCreate) *UserLoginProfileCreateBulk {
	return &UserLoginProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLoginProfile.
func (c *UserLoginProfileClient) Update() *UserLoginProfileUpdate {
	mutation := newUserLoginProfileMutation(c.config, OpUpdate)
	return &UserLoginProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLoginProfileClient) UpdateOne(ulp *UserLoginProfile) *UserLoginProfileUpdateOne {
	mutation := newUserLoginProfileMutation(c.config, OpUpdateOne, withUserLoginProfile(ulp))
	return &UserLoginProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLoginProfileClient) UpdateOneID(id int) *UserLoginProfileUpdateOne {
	mutation := newUserLoginProfileMutation(c.config, OpUpdateOne, withUserLoginProfileID(id))
	return &UserLoginProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLoginProfile.
func (c *UserLoginProfileClient) Delete() *UserLoginProfileDelete {
	mutation := newUserLoginProfileMutation(c.config, OpDelete)
	return &UserLoginProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserLoginProfileClient) DeleteOne(ulp *UserLoginProfile) *UserLoginProfileDeleteOne {
	return c.DeleteOneID(ulp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserLoginProfileClient) DeleteOneID(id int) *UserLoginProfileDeleteOne {
	builder := c.Delete().Where(userloginprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLoginProfileDeleteOne{builder}
}

// Query returns a query builder for UserLoginProfile.
func (c *UserLoginProfileClient) Query() *UserLoginProfileQuery {
	return &UserLoginProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserLoginProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a UserLoginProfile entity by its id.
func (c *UserLoginProfileClient) Get(ctx context.Context, id int) (*UserLoginProfile, error) {
	return c.Query().Where(userloginprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLoginProfileClient) GetX(ctx context.Context, id int) *UserLoginProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserLoginProfile.
func (c *UserLoginProfileClient) QueryUser(ulp *UserLoginProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ulp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userloginprofile.Table, userloginprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userloginprofile.UserTable, userloginprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ulp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLoginProfileClient) Hooks() []Hook {
	hooks := c.hooks.UserLoginProfile
	return append(hooks[:len(hooks):len(hooks)], userloginprofile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserLoginProfileClient) Interceptors() []Interceptor {
	return c.inters.UserLoginProfile
}

func (c *UserLoginProfileClient) mutate(ctx context.Context, m *UserLoginProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserLoginProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserLoginProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserLoginProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserLoginProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserLoginProfile mutation op: %q", m.Op())
	}
}

// UserPasswordClient is a client for the UserPassword schema.
type UserPasswordClient struct {
	config
}

// NewUserPasswordClient returns a client for the UserPassword from the given config.
func NewUserPasswordClient(c config) *UserPasswordClient {
	return &UserPasswordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpassword.Hooks(f(g(h())))`.
func (c *UserPasswordClient) Use(hooks ...Hook) {
	c.hooks.UserPassword = append(c.hooks.UserPassword, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userpassword.Intercept(f(g(h())))`.
func (c *UserPasswordClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPassword = append(c.inters.UserPassword, interceptors...)
}

// Create returns a builder for creating a UserPassword entity.
func (c *UserPasswordClient) Create() *UserPasswordCreate {
	mutation := newUserPasswordMutation(c.config, OpCreate)
	return &UserPasswordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPassword entities.
func (c *UserPasswordClient) CreateBulk(builders ...*UserPasswordCreate) *UserPasswordCreateBulk {
	return &UserPasswordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPassword.
func (c *UserPasswordClient) Update() *UserPasswordUpdate {
	mutation := newUserPasswordMutation(c.config, OpUpdate)
	return &UserPasswordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPasswordClient) UpdateOne(up *UserPassword) *UserPasswordUpdateOne {
	mutation := newUserPasswordMutation(c.config, OpUpdateOne, withUserPassword(up))
	return &UserPasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPasswordClient) UpdateOneID(id int) *UserPasswordUpdateOne {
	mutation := newUserPasswordMutation(c.config, OpUpdateOne, withUserPasswordID(id))
	return &UserPasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPassword.
func (c *UserPasswordClient) Delete() *UserPasswordDelete {
	mutation := newUserPasswordMutation(c.config, OpDelete)
	return &UserPasswordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPasswordClient) DeleteOne(up *UserPassword) *UserPasswordDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPasswordClient) DeleteOneID(id int) *UserPasswordDeleteOne {
	builder := c.Delete().Where(userpassword.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPasswordDeleteOne{builder}
}

// Query returns a query builder for UserPassword.
func (c *UserPasswordClient) Query() *UserPasswordQuery {
	return &UserPasswordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPassword},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPassword entity by its id.
func (c *UserPasswordClient) Get(ctx context.Context, id int) (*UserPassword, error) {
	return c.Query().Where(userpassword.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPasswordClient) GetX(ctx context.Context, id int) *UserPassword {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPassword.
func (c *UserPasswordClient) QueryUser(up *UserPassword) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpassword.Table, userpassword.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userpassword.UserTable, userpassword.UserColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPasswordClient) Hooks() []Hook {
	hooks := c.hooks.UserPassword
	return append(hooks[:len(hooks):len(hooks)], userpassword.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserPasswordClient) Interceptors() []Interceptor {
	return c.inters.UserPassword
}

func (c *UserPasswordClient) mutate(ctx context.Context, m *UserPasswordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPasswordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPasswordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPasswordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPassword mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		App, AppAction, AppMenu, AppPolicy, AppRes, AppRole, AppRolePolicy,
		Organization, OrganizationApp, OrganizationPolicy, OrganizationRole,
		OrganizationUser, Permission, User, UserDevice, UserIdentity, UserLoginProfile,
		UserPassword []ent.Hook
	}
	inters struct {
		App, AppAction, AppMenu, AppPolicy, AppRes, AppRole, AppRolePolicy,
		Organization, OrganizationApp, OrganizationPolicy, OrganizationRole,
		OrganizationUser, Permission, User, UserDevice, UserIdentity, UserLoginProfile,
		UserPassword []ent.Interceptor
	}
)
